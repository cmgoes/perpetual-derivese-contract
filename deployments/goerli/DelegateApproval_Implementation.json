{
  "address": "0x8b0c0CC7B8a10F1Ab89EcbEfcb5D658FDFf291dF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "actions",
          "type": "uint8"
        }
      ],
      "name": "DelegationApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "actions",
          "type": "uint8"
        }
      ],
      "name": "DelegationRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "actions",
          "type": "uint8"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "canAddLiquidityFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "canOpenPositionFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "canRemoveLiquidityFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "getApprovedActions",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClearingHouseAddLiquidityAction",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClearingHouseOpenPositionAction",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClearingHouseRemoveLiquidityAction",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "actions",
          "type": "uint8"
        }
      ],
      "name": "hasApprovalFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "actions",
          "type": "uint8"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x679343f314b18b3f1d0a0dffe0b2add40b87d22d6d30ef385cb5cc2fbae2e96f",
  "receipt": {
    "to": null,
    "from": "0xAD143E30AD4852c97716ED5b32d45BcCfF7DEa36",
    "contractAddress": "0x8b0c0CC7B8a10F1Ab89EcbEfcb5D658FDFf291dF",
    "transactionIndex": 14,
    "gasUsed": "743822",
    "logsBloom": "0x
    "blockHash": "0x3bf17cb2276be603000a7a45678ecb1ed0b432c0309de9a5611f17381a367204",
    "transactionHash": "0x679343f314b18b3f1d0a0dffe0b2add40b87d22d6d30ef385cb5cc2fbae2e96f",
    "logs": [],
    "blockNumber": 7670341,
    "cumulativeGasUsed": "9357012",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01b8d55a8213240ccfc06d6f16ce9164",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"actions\",\"type\":\"uint8\"}],\"name\":\"DelegationApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"actions\",\"type\":\"uint8\"}],\"name\":\"DelegationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"actions\",\"type\":\"uint8\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"canAddLiquidityFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"canOpenPositionFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"canRemoveLiquidityFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"getApprovedActions\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouseAddLiquidityAction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouseOpenPositionAction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClearingHouseRemoveLiquidityAction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"actions\",\"type\":\"uint8\"}],\"name\":\"hasApprovalFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"actions\",\"type\":\"uint8\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint8)\":{\"params\":{\"actions\":\"The actions to be approved\",\"delegate\":\"The address of delegate\"}},\"canAddLiquidityFor(address,address)\":{\"params\":{\"delegate\":\"The address of delegate\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"true if delegate can add liquidity for trader, otherwise false\"}},\"canOpenPositionFor(address,address)\":{\"params\":{\"delegate\":\"The address of delegate\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"true if delegate can open position for trader, otherwise false\"}},\"canRemoveLiquidityFor(address,address)\":{\"params\":{\"delegate\":\"The address of delegate\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"true if delegate can remove liquidity for trader, otherwise false\"}},\"candidate()\":{\"details\":\"Returns the candidate that can become the owner.\"},\"getApprovedActions(address,address)\":{\"params\":{\"delegate\":\"The address of delegate\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"actions The approved actions\"}},\"getClearingHouseAddLiquidityAction()\":{\"returns\":{\"_0\":\"action The value of action `_CLEARINGHOUSE_ADDLIQUIDITY`\"}},\"getClearingHouseOpenPositionAction()\":{\"returns\":{\"_0\":\"action The value of action `_CLEARINGHOUSE_OPENPOSITION`\"}},\"getClearingHouseRemoveLiquidityAction()\":{\"returns\":{\"_0\":\"action The value of action `_CLEARINGHOUSE_REMOVELIQUIDITY`\"}},\"hasApprovalFor(address,address,uint8)\":{\"params\":{\"actions\":\"The actions to be checked\",\"delegate\":\"The address of delegate\",\"trader\":\"The address of trader\"},\"returns\":{\"_0\":\"true if delegate is allowed to perform **each** actions for trader, otherwise false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(address,uint8)\":{\"params\":{\"actions\":\"The actions to be revoked\",\"delegate\":\"The address of delegate\"}},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}},\"stateVariables\":{\"_CLEARINGHOUSE_OPENPOSITION\":{\"details\":\"remember to update checkActions() if we add new actions      the rule for action constants is `<<`, 2^n, n starts from 0      so actions will be 1, 2, 4, 8, 16, 32, 64, 128\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DelegateApproval.sol\":\"DelegateApproval\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"contracts/DelegateApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport { IDelegateApproval } from \\\"./interface/IDelegateApproval.sol\\\";\\r\\nimport { BlockContext } from \\\"./base/BlockContext.sol\\\";\\r\\nimport { SafeOwnable } from \\\"./base/SafeOwnable.sol\\\";\\r\\nimport { DelegateApprovalStorageV1 } from \\\"./storage/DelegateApprovalStorage.sol\\\";\\r\\n\\r\\ncontract DelegateApproval is IDelegateApproval, BlockContext, SafeOwnable, DelegateApprovalStorageV1 {\\r\\n    //\\r\\n    // CONSTANTS\\r\\n    //\\r\\n\\r\\n    /// @dev remember to update checkActions() if we add new actions\\r\\n    ///      the rule for action constants is `<<`, 2^n, n starts from 0\\r\\n    ///      so actions will be 1, 2, 4, 8, 16, 32, 64, 128\\r\\n    uint8 internal constant _CLEARINGHOUSE_OPENPOSITION = 1; // 00000001\\r\\n    uint8 internal constant _CLEARINGHOUSE_ADDLIQUIDITY = 2; // 00000010, not used for now\\r\\n    uint8 internal constant _CLEARINGHOUSE_REMOVELIQUIDITY = 4; // 00000100, not used for now\\r\\n\\r\\n    //\\r\\n    // MODIFIER\\r\\n    //\\r\\n\\r\\n    /// @dev prevent user from approving/revoking non-existed actions\\r\\n    ///      we only have 3 actions now, so actions cannot be greater than 7 (00000111)\\r\\n    modifier checkActions(uint8 actions) {\\r\\n        // DA_IA: Invalid Actions\\r\\n        require(actions > 0 && actions <= 7, \\\"DA_IA\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //\\r\\n    // EXTERNAL NON-VIEW\\r\\n    //\\r\\n\\r\\n    function initialize() external initializer {\\r\\n        __SafeOwnable_init();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function approve(address delegate, uint8 actions) external override checkActions(actions) {\\r\\n        address trader = _msgSender();\\r\\n        bytes32 key = _getApprovalKey(trader, delegate);\\r\\n\\r\\n        // Examples:\\r\\n        // oldApprovedActions: 001\\r\\n        // actions: 010\\r\\n        // newApprovedActions: 011\\r\\n\\r\\n        // oldApprovedActions: 010\\r\\n        // actions: 110\\r\\n        // newApprovedActions: 110\\r\\n\\r\\n        // oldApprovedActions: 010\\r\\n        // actions: 100\\r\\n        // newApprovedActions: 110\\r\\n        _approvalMap[key] = _approvalMap[key] | actions;\\r\\n\\r\\n        emit DelegationApproved(trader, delegate, actions);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function revoke(address delegate, uint8 actions) external override checkActions(actions) {\\r\\n        address trader = _msgSender();\\r\\n        bytes32 key = _getApprovalKey(trader, delegate);\\r\\n\\r\\n        // oldApprovedActions: 010\\r\\n        // actions: 010\\r\\n        // newApprovedActions: 000\\r\\n\\r\\n        // oldApprovedActions: 010\\r\\n        // actions: 110\\r\\n        // newApprovedActions: 000\\r\\n\\r\\n        // oldApprovedActions: 010\\r\\n        // actions: 100\\r\\n        // newApprovedActions: 010\\r\\n        _approvalMap[key] = _approvalMap[key] & (~actions);\\r\\n\\r\\n        emit DelegationRevoked(trader, delegate, actions);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    // EXTERNAL VIEW\\r\\n    //\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function getClearingHouseOpenPositionAction() external pure override returns (uint8) {\\r\\n        return _CLEARINGHOUSE_OPENPOSITION;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function getClearingHouseAddLiquidityAction() external pure override returns (uint8) {\\r\\n        return _CLEARINGHOUSE_ADDLIQUIDITY;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function getClearingHouseRemoveLiquidityAction() external pure override returns (uint8) {\\r\\n        return _CLEARINGHOUSE_REMOVELIQUIDITY;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function getApprovedActions(address trader, address delegate) external view override returns (uint8) {\\r\\n        bytes32 key = _getApprovalKey(trader, delegate);\\r\\n        return _approvalMap[key];\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function hasApprovalFor(\\r\\n        address trader,\\r\\n        address delegate,\\r\\n        uint8 actions\\r\\n    ) external view override checkActions(actions) returns (bool) {\\r\\n        return _hasApprovalFor(trader, delegate, actions);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function canOpenPositionFor(address trader, address delegate) external view override returns (bool) {\\r\\n        return _hasApprovalFor(trader, delegate, _CLEARINGHOUSE_OPENPOSITION);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function canAddLiquidityFor(address trader, address delegate) external view override returns (bool) {\\r\\n        return _hasApprovalFor(trader, delegate, _CLEARINGHOUSE_ADDLIQUIDITY);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IDelegateApproval\\r\\n    function canRemoveLiquidityFor(address trader, address delegate) external view override returns (bool) {\\r\\n        return _hasApprovalFor(trader, delegate, _CLEARINGHOUSE_REMOVELIQUIDITY);\\r\\n    }\\r\\n\\r\\n    //\\r\\n    // INTERNAL VIEW\\r\\n    //\\r\\n\\r\\n    function _getApprovalKey(address trader, address delegate) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(trader, delegate));\\r\\n    }\\r\\n\\r\\n    function _hasApprovalFor(\\r\\n        address trader,\\r\\n        address delegate,\\r\\n        uint8 actions\\r\\n    ) internal view checkActions(actions) returns (bool) {\\r\\n        bytes32 key = _getApprovalKey(trader, delegate);\\r\\n\\r\\n        // approvedActions: 010\\r\\n        // actions: 110\\r\\n        // 010 & 110 = 010 != 110 => false\\r\\n\\r\\n        // approvedActions: 000\\r\\n        // actions: 010\\r\\n        // 000 & 010 = 000 != 010 => false\\r\\n\\r\\n        // approvedActions: 110\\r\\n        // actions: 110\\r\\n        // 110 & 110 = 110 == 110 => true\\r\\n        return (_approvalMap[key] & actions) == actions;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2e695b29bec2bbb414247859ff6976a35e0f82eed8492239489b3c6013a303b4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nabstract contract BlockContext {\\r\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\r\\n        // Reply from Arbitrum\\r\\n        // block.timestamp returns timestamp at the time at which the sequencer receives the tx.\\r\\n        // It may not actually correspond to a particular L1 block\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function _blockNumber() internal view virtual returns (uint256) {\\r\\n        return block.number;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9094a82c40009c48f091d0df2b2010527ed13debf4b7f2370ec9ed17daf7bb25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport { ContextUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract SafeOwnable is ContextUpgradeable {\\r\\n    address private _owner;\\r\\n    address private _candidate;\\r\\n\\r\\n    // __gap is reserved storage\\r\\n    uint256[50] private __gap;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        // caller not owner\\r\\n        require(owner() == _msgSender(), \\\"SO_CNO\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n\\r\\n    function __SafeOwnable_init() internal initializer {\\r\\n        __Context_init();\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() external virtual onlyOwner {\\r\\n        // emitting event first to avoid caching values\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n        _candidate = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function setOwner(address newOwner) external onlyOwner {\\r\\n        // newOwner is 0\\r\\n        require(newOwner != address(0), \\\"SO_NW0\\\");\\r\\n        // same as original\\r\\n        require(newOwner != _owner, \\\"SO_SAO\\\");\\r\\n        // same as candidate\\r\\n        require(newOwner != _candidate, \\\"SO_SAC\\\");\\r\\n\\r\\n        _candidate = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\r\\n     * Can only be called by the new owner.\\r\\n     */\\r\\n    function updateOwner() external {\\r\\n        // candidate is zero\\r\\n        require(_candidate != address(0), \\\"SO_C0\\\");\\r\\n        // caller is not candidate\\r\\n        require(_candidate == _msgSender(), \\\"SO_CNC\\\");\\r\\n\\r\\n        // emitting event first to avoid caching values\\r\\n        emit OwnershipTransferred(_owner, _candidate);\\r\\n        _owner = _candidate;\\r\\n        _candidate = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the candidate that can become the owner.\\r\\n     */\\r\\n    function candidate() external view returns (address) {\\r\\n        return _candidate;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe1a59fe06dd7a6ff11cb41b8e5bfa58a7f7ab4d34eac612c63af2c877e612057\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IDelegateApproval.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IDelegateApproval {\\r\\n    /// @param trader The address of trader\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @param actions The actions to be approved\\r\\n    event DelegationApproved(address indexed trader, address delegate, uint8 actions);\\r\\n\\r\\n    /// @param trader The address of trader\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @param actions The actions to be revoked\\r\\n    event DelegationRevoked(address indexed trader, address delegate, uint8 actions);\\r\\n\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @param actions The actions to be approved\\r\\n    function approve(address delegate, uint8 actions) external;\\r\\n\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @param actions The actions to be revoked\\r\\n    function revoke(address delegate, uint8 actions) external;\\r\\n\\r\\n    /// @return action The value of action `_CLEARINGHOUSE_OPENPOSITION`\\r\\n    function getClearingHouseOpenPositionAction() external pure returns (uint8);\\r\\n\\r\\n    /// @return action The value of action `_CLEARINGHOUSE_ADDLIQUIDITY`\\r\\n    function getClearingHouseAddLiquidityAction() external pure returns (uint8);\\r\\n\\r\\n    /// @return action The value of action `_CLEARINGHOUSE_REMOVELIQUIDITY`\\r\\n    function getClearingHouseRemoveLiquidityAction() external pure returns (uint8);\\r\\n\\r\\n    /// @param trader The address of trader\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @return actions The approved actions\\r\\n    function getApprovedActions(address trader, address delegate) external view returns (uint8);\\r\\n\\r\\n    /// @param trader The address of trader\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @param actions The actions to be checked\\r\\n    /// @return true if delegate is allowed to perform **each** actions for trader, otherwise false\\r\\n    function hasApprovalFor(\\r\\n        address trader,\\r\\n        address delegate,\\r\\n        uint8 actions\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /// @param trader The address of trader\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @return true if delegate can open position for trader, otherwise false\\r\\n    function canOpenPositionFor(address trader, address delegate) external view returns (bool);\\r\\n\\r\\n    /// @param trader The address of trader\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @return true if delegate can add liquidity for trader, otherwise false\\r\\n    function canAddLiquidityFor(address trader, address delegate) external view returns (bool);\\r\\n\\r\\n    /// @param trader The address of trader\\r\\n    /// @param delegate The address of delegate\\r\\n    /// @return true if delegate can remove liquidity for trader, otherwise false\\r\\n    function canRemoveLiquidityFor(address trader, address delegate) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x881eeae4ce24db52c73c45c1f099fb65d77b911fe408651dee45e208d3e86cd1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/storage/DelegateApprovalStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/// @notice For future upgrades, do not change DelegateApprovalStorageV1. Create a new\\r\\n/// contract which implements DelegateApprovalStorageV1 and following the naming convention\\r\\n/// DelegateApprovalStorageVX.\\r\\nabstract contract DelegateApprovalStorageV1 {\\r\\n    // key: the hash of `trader` and `delegate`, see _getApprovalKey()\\r\\n    // value: the bit value of approved actions\\r\\n    mapping(bytes32 => uint8) internal _approvalMap;\\r\\n}\\r\\n\",\"keccak256\":\"0x359f1d0ebd9f0b6e828cbffdcf6d01d61108ffa64c910e6e33e9fd381d028b23\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c7e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100e05760003560e01c80639686a5b6116100875780639686a5b61461016b578063a08012a314610173578063a4f5dd3b14610193578063bc5920ba146101a6578063c43036f9146101ae578063c7d572e5146101c1578063cbab07b6146101d4578063f3ac8f12146101dc576100e0565b80631042c2ad146100e557806313af40351461010e57806315ed7caa146101235780634342e9661461012b5780636c8381f81461013e578063715018a6146101535780638129fc1c1461015b5780638da5cb5b14610163575b600080fd5b6100f86100f3366004610adb565b6101ef565b6040516101059190610bec565b60405180910390f35b61012161011c366004610ac1565b610216565b005b6100f8610371565b610121610139366004610b4f565b610376565b61014661043b565b6040516101059190610b78565b61012161044a565b6101216104eb565b610146610595565b6100f86105a4565b610186610181366004610adb565b6105a9565b6040516101059190610bc2565b6101866101a1366004610adb565b6105be565b6101216105cc565b6101866101bc366004610b0d565b6106b8565b6101866101cf366004610adb565b610702565b6100f8610710565b6101216101ea366004610b4f565b610715565b6000806101fc84846107c1565b60009081526067602052604090205460ff16949350505050565b61021e6107f4565b6001600160a01b031661022f610595565b6001600160a01b031614610273576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6001600160a01b0381166102b7576040805162461bcd60e51b81526020600482015260066024820152650534f5f4e57360d41b604482015290519081900360640190fd5b6033546001600160a01b0382811691161415610303576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414f60d01b604482015290519081900360640190fd5b6034546001600160a01b038281169116141561034f576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414360d01b604482015290519081900360640190fd5b603480546001600160a01b0319166001600160a01b0392909216919091179055565b600290565b8060008160ff1611801561038e575060078160ff1611155b6103b35760405162461bcd60e51b81526004016103aa90610bcd565b60405180910390fd5b60006103bd6107f4565b905060006103cb82866107c1565b60008181526067602052604090819020805460ff80821689171660ff19909116179055519091506001600160a01b038316907f283397791e09409b99db81b486878c1fe41c0d40fb646e721f04bc52549fbc829061042c9088908890610ba6565b60405180910390a25050505050565b6034546001600160a01b031690565b6104526107f4565b6001600160a01b0316610463610595565b6001600160a01b0316146104a7576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6033546040516000916001600160a01b031690600080516020610c29833981519152908390a3603380546001600160a01b0319908116909155603480549091169055565b600054610100900460ff168061050457506105046107f8565b80610512575060005460ff16155b61054d5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff16158015610578576000805460ff1961ff0019909116610100171660011790555b610580610809565b8015610592576000805461ff00191690555b50565b6033546001600160a01b031690565b600490565b60006105b7838360016108f8565b9392505050565b60006105b7838360046108f8565b6034546001600160a01b0316610611576040805162461bcd60e51b81526020600482015260056024820152640534f5f43360dc1b604482015290519081900360640190fd5b6106196107f4565b6034546001600160a01b03908116911614610664576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4360d01b604482015290519081900360640190fd5b6034546033546040516001600160a01b039283169290911690600080516020610c2983398151915290600090a360348054603380546001600160a01b03199081166001600160a01b03841617909155169055565b60008160008160ff161180156106d2575060078160ff1611155b6106ee5760405162461bcd60e51b81526004016103aa90610bcd565b6106f98585856108f8565b95945050505050565b60006105b7838360026108f8565b600190565b8060008160ff1611801561072d575060078160ff1611155b6107495760405162461bcd60e51b81526004016103aa90610bcd565b60006107536107f4565b9050600061076182866107c1565b60008181526067602052604090819020805460ff881982161660ff19909116179055519091506001600160a01b038316907f1e84a572409e246a20065a062c50f43afa35723be0d38bf1a25e7ffb38c699359061042c9088908890610ba6565b600082826040516020016107d6929190610b8c565b60405160208183030381529060405280519060200120905092915050565b3390565b60006108033061095f565b15905090565b600054610100900460ff168061082257506108226107f8565b80610830575060005460ff16155b61086b5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff16158015610896576000805460ff1961ff0019909116610100171660011790555b61089e610969565b60006108a86107f4565b603380546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020610c29833981519152908290a3508015610592576000805461ff001916905550565b60008160008160ff16118015610912575060078160ff1611155b61092e5760405162461bcd60e51b81526004016103aa90610bcd565b600061093a86866107c1565b600090815260676020526040902054841660ff90811690851614925050509392505050565b803b15155b919050565b600054610100900460ff168061098257506109826107f8565b80610990575060005460ff16155b6109cb5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff161580156109f6576000805460ff1961ff0019909116610100171660011790555b610580600054610100900460ff1680610a125750610a126107f8565b80610a20575060005460ff16155b610a5b5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff16158015610580576000805460ff1961ff0019909116610100171660011790558015610592576000805461ff001916905550565b80356001600160a01b038116811461096457600080fd5b803560ff8116811461096457600080fd5b600060208284031215610ad2578081fd5b6105b782610a99565b60008060408385031215610aed578081fd5b610af683610a99565b9150610b0460208401610a99565b90509250929050565b600080600060608486031215610b21578081fd5b610b2a84610a99565b9250610b3860208501610a99565b9150610b4660408501610ab0565b90509250925092565b60008060408385031215610b61578182fd5b610b6a83610a99565b9150610b0460208401610ab0565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b901515815260200190565b60208082526005908201526444415f494160d81b604082015260600190565b60ff9190911681526020019056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65648be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212208687507f26c50f5b9a78e61fe0b20e7e01b4924108733e7f54c4d6415d0110e764736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e05760003560e01c80639686a5b6116100875780639686a5b61461016b578063a08012a314610173578063a4f5dd3b14610193578063bc5920ba146101a6578063c43036f9146101ae578063c7d572e5146101c1578063cbab07b6146101d4578063f3ac8f12146101dc576100e0565b80631042c2ad146100e557806313af40351461010e57806315ed7caa146101235780634342e9661461012b5780636c8381f81461013e578063715018a6146101535780638129fc1c1461015b5780638da5cb5b14610163575b600080fd5b6100f86100f3366004610adb565b6101ef565b6040516101059190610bec565b60405180910390f35b61012161011c366004610ac1565b610216565b005b6100f8610371565b610121610139366004610b4f565b610376565b61014661043b565b6040516101059190610b78565b61012161044a565b6101216104eb565b610146610595565b6100f86105a4565b610186610181366004610adb565b6105a9565b6040516101059190610bc2565b6101866101a1366004610adb565b6105be565b6101216105cc565b6101866101bc366004610b0d565b6106b8565b6101866101cf366004610adb565b610702565b6100f8610710565b6101216101ea366004610b4f565b610715565b6000806101fc84846107c1565b60009081526067602052604090205460ff16949350505050565b61021e6107f4565b6001600160a01b031661022f610595565b6001600160a01b031614610273576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6001600160a01b0381166102b7576040805162461bcd60e51b81526020600482015260066024820152650534f5f4e57360d41b604482015290519081900360640190fd5b6033546001600160a01b0382811691161415610303576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414f60d01b604482015290519081900360640190fd5b6034546001600160a01b038281169116141561034f576040805162461bcd60e51b8152602060048201526006602482015265534f5f53414360d01b604482015290519081900360640190fd5b603480546001600160a01b0319166001600160a01b0392909216919091179055565b600290565b8060008160ff1611801561038e575060078160ff1611155b6103b35760405162461bcd60e51b81526004016103aa90610bcd565b60405180910390fd5b60006103bd6107f4565b905060006103cb82866107c1565b60008181526067602052604090819020805460ff80821689171660ff19909116179055519091506001600160a01b038316907f283397791e09409b99db81b486878c1fe41c0d40fb646e721f04bc52549fbc829061042c9088908890610ba6565b60405180910390a25050505050565b6034546001600160a01b031690565b6104526107f4565b6001600160a01b0316610463610595565b6001600160a01b0316146104a7576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4f60d01b604482015290519081900360640190fd5b6033546040516000916001600160a01b031690600080516020610c29833981519152908390a3603380546001600160a01b0319908116909155603480549091169055565b600054610100900460ff168061050457506105046107f8565b80610512575060005460ff16155b61054d5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff16158015610578576000805460ff1961ff0019909116610100171660011790555b610580610809565b8015610592576000805461ff00191690555b50565b6033546001600160a01b031690565b600490565b60006105b7838360016108f8565b9392505050565b60006105b7838360046108f8565b6034546001600160a01b0316610611576040805162461bcd60e51b81526020600482015260056024820152640534f5f43360dc1b604482015290519081900360640190fd5b6106196107f4565b6034546001600160a01b03908116911614610664576040805162461bcd60e51b8152602060048201526006602482015265534f5f434e4360d01b604482015290519081900360640190fd5b6034546033546040516001600160a01b039283169290911690600080516020610c2983398151915290600090a360348054603380546001600160a01b03199081166001600160a01b03841617909155169055565b60008160008160ff161180156106d2575060078160ff1611155b6106ee5760405162461bcd60e51b81526004016103aa90610bcd565b6106f98585856108f8565b95945050505050565b60006105b7838360026108f8565b600190565b8060008160ff1611801561072d575060078160ff1611155b6107495760405162461bcd60e51b81526004016103aa90610bcd565b60006107536107f4565b9050600061076182866107c1565b60008181526067602052604090819020805460ff881982161660ff19909116179055519091506001600160a01b038316907f1e84a572409e246a20065a062c50f43afa35723be0d38bf1a25e7ffb38c699359061042c9088908890610ba6565b600082826040516020016107d6929190610b8c565b60405160208183030381529060405280519060200120905092915050565b3390565b60006108033061095f565b15905090565b600054610100900460ff168061082257506108226107f8565b80610830575060005460ff16155b61086b5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff16158015610896576000805460ff1961ff0019909116610100171660011790555b61089e610969565b60006108a86107f4565b603380546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020610c29833981519152908290a3508015610592576000805461ff001916905550565b60008160008160ff16118015610912575060078160ff1611155b61092e5760405162461bcd60e51b81526004016103aa90610bcd565b600061093a86866107c1565b600090815260676020526040902054841660ff90811690851614925050509392505050565b803b15155b919050565b600054610100900460ff168061098257506109826107f8565b80610990575060005460ff16155b6109cb5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff161580156109f6576000805460ff1961ff0019909116610100171660011790555b610580600054610100900460ff1680610a125750610a126107f8565b80610a20575060005460ff16155b610a5b5760405162461bcd60e51b815260040180806020018281038252602e815260200180610bfb602e913960400191505060405180910390fd5b600054610100900460ff16158015610580576000805460ff1961ff0019909116610100171660011790558015610592576000805461ff001916905550565b80356001600160a01b038116811461096457600080fd5b803560ff8116811461096457600080fd5b600060208284031215610ad2578081fd5b6105b782610a99565b60008060408385031215610aed578081fd5b610af683610a99565b9150610b0460208401610a99565b90509250929050565b600080600060608486031215610b21578081fd5b610b2a84610a99565b9250610b3860208501610a99565b9150610b4660408501610ab0565b90509250925092565b60008060408385031215610b61578182fd5b610b6a83610a99565b9150610b0460208401610ab0565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b901515815260200190565b60208082526005908201526444415f494160d81b604082015260600190565b60ff9190911681526020019056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65648be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212208687507f26c50f5b9a78e61fe0b20e7e01b4924108733e7f54c4d6415d0110e764736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint8)": {
        "params": {
          "actions": "The actions to be approved",
          "delegate": "The address of delegate"
        }
      },
      "canAddLiquidityFor(address,address)": {
        "params": {
          "delegate": "The address of delegate",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "true if delegate can add liquidity for trader, otherwise false"
        }
      },
      "canOpenPositionFor(address,address)": {
        "params": {
          "delegate": "The address of delegate",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "true if delegate can open position for trader, otherwise false"
        }
      },
      "canRemoveLiquidityFor(address,address)": {
        "params": {
          "delegate": "The address of delegate",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "true if delegate can remove liquidity for trader, otherwise false"
        }
      },
      "candidate()": {
        "details": "Returns the candidate that can become the owner."
      },
      "getApprovedActions(address,address)": {
        "params": {
          "delegate": "The address of delegate",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "actions The approved actions"
        }
      },
      "getClearingHouseAddLiquidityAction()": {
        "returns": {
          "_0": "action The value of action `_CLEARINGHOUSE_ADDLIQUIDITY`"
        }
      },
      "getClearingHouseOpenPositionAction()": {
        "returns": {
          "_0": "action The value of action `_CLEARINGHOUSE_OPENPOSITION`"
        }
      },
      "getClearingHouseRemoveLiquidityAction()": {
        "returns": {
          "_0": "action The value of action `_CLEARINGHOUSE_REMOVELIQUIDITY`"
        }
      },
      "hasApprovalFor(address,address,uint8)": {
        "params": {
          "actions": "The actions to be checked",
          "delegate": "The address of delegate",
          "trader": "The address of trader"
        },
        "returns": {
          "_0": "true if delegate is allowed to perform **each** actions for trader, otherwise false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke(address,uint8)": {
        "params": {
          "actions": "The actions to be revoked",
          "delegate": "The address of delegate"
        }
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      }
    },
    "stateVariables": {
      "_CLEARINGHOUSE_OPENPOSITION": {
        "details": "remember to update checkActions() if we add new actions      the rule for action constants is `<<`, 2^n, n starts from 0      so actions will be 1, 2, 4, 8, 16, 32, 64, 128"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1158,
        "contract": "contracts/DelegateApproval.sol:DelegateApproval",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1161,
        "contract": "contracts/DelegateApproval.sol:DelegateApproval",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2475,
        "contract": "contracts/DelegateApproval.sol:DelegateApproval",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 27037,
        "contract": "contracts/DelegateApproval.sol:DelegateApproval",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 27039,
        "contract": "contracts/DelegateApproval.sol:DelegateApproval",
        "label": "_candidate",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 27043,
        "contract": "contracts/DelegateApproval.sol:DelegateApproval",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 32350,
        "contract": "contracts/DelegateApproval.sol:DelegateApproval",
        "label": "_approvalMap",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}