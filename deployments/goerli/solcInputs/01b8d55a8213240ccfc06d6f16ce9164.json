{
  "language": "Solidity",
  "sources": {
    "contracts/AccountBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\r\nimport { ClearingHouseCallee } from \"./base/ClearingHouseCallee.sol\";\r\nimport { PerpSafeCast } from \"./lib/PerpSafeCast.sol\";\r\nimport { PerpMath } from \"./lib/PerpMath.sol\";\r\nimport { IExchange } from \"./interface/IExchange.sol\";\r\nimport { IBaseToken } from \"./interface/IBaseToken.sol\";\r\nimport { IIndexPrice } from \"./interface/IIndexPrice.sol\";\r\nimport { IOrderBook } from \"./interface/IOrderBook.sol\";\r\nimport { IClearingHouseConfig } from \"./interface/IClearingHouseConfig.sol\";\r\nimport { AccountBalanceStorageV1, AccountMarket } from \"./storage/AccountBalanceStorage.sol\";\r\nimport { BlockContext } from \"./base/BlockContext.sol\";\r\nimport { IAccountBalance } from \"./interface/IAccountBalance.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract AccountBalance is IAccountBalance, BlockContext, ClearingHouseCallee, AccountBalanceStorageV1 {\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n    using SignedSafeMathUpgradeable for int256;\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for int256;\r\n    using PerpMath for uint256;\r\n    using PerpMath for int256;\r\n    using PerpMath for uint160;\r\n    using AccountMarket for AccountMarket.Info;\r\n\r\n    //\r\n    // CONSTANT\r\n    //\r\n\r\n    uint256 internal constant _DUST = 10 wei;\r\n    uint256 internal constant _MIN_PARTIAL_LIQUIDATE_POSITION_VALUE = 100e18 wei; // 100 USD in decimal 18\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize(address clearingHouseConfigArg, address orderBookArg) external initializer {\r\n        // IClearingHouseConfig address is not contract\r\n        require(clearingHouseConfigArg.isContract(), \"AB_CHCNC\");\r\n\r\n        // IOrderBook is not contract\r\n        require(orderBookArg.isContract(), \"AB_OBNC\");\r\n\r\n        __ClearingHouseCallee_init();\r\n\r\n        _clearingHouseConfig = clearingHouseConfigArg;\r\n        _orderBook = orderBookArg;\r\n    }\r\n\r\n    function setVault(address vaultArg) external onlyOwner {\r\n        // vault address is not contract\r\n        require(vaultArg.isContract(), \"AB_VNC\");\r\n        _vault = vaultArg;\r\n        emit VaultChanged(vaultArg);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function modifyTakerBalance(\r\n        address trader,\r\n        address baseToken,\r\n        int256 base,\r\n        int256 quote\r\n    ) external override returns (int256, int256) {\r\n        _requireOnlyClearingHouse();\r\n        return _modifyTakerBalance(trader, baseToken, base, quote);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function modifyOwedRealizedPnl(address trader, int256 amount) external override {\r\n        _requireOnlyClearingHouse();\r\n        _modifyOwedRealizedPnl(trader, amount);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function settleQuoteToOwedRealizedPnl(\r\n        address trader,\r\n        address baseToken,\r\n        int256 amount\r\n    ) external override {\r\n        _requireOnlyClearingHouse();\r\n        _settleQuoteToOwedRealizedPnl(trader, baseToken, amount);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function settleOwedRealizedPnl(address trader) external override returns (int256) {\r\n        // only vault\r\n        require(_msgSender() == _vault, \"AB_OV\");\r\n        int256 owedRealizedPnl = _owedRealizedPnlMap[trader];\r\n        _owedRealizedPnlMap[trader] = 0;\r\n\r\n        return owedRealizedPnl;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function settleBalanceAndDeregister(\r\n        address trader,\r\n        address baseToken,\r\n        int256 takerBase,\r\n        int256 takerQuote,\r\n        int256 realizedPnl,\r\n        int256 makerFee\r\n    ) external override {\r\n        _requireOnlyClearingHouse();\r\n        _modifyTakerBalance(trader, baseToken, takerBase, takerQuote);\r\n        _modifyOwedRealizedPnl(trader, makerFee);\r\n\r\n        // @audit should merge _addOwedRealizedPnl and settleQuoteToOwedRealizedPnl in some way.\r\n        // PnlRealized will be emitted three times when removing trader's liquidity\r\n        _settleQuoteToOwedRealizedPnl(trader, baseToken, realizedPnl);\r\n        _deregisterBaseToken(trader, baseToken);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function registerBaseToken(address trader, address baseToken) external override {\r\n        _requireOnlyClearingHouse();\r\n        address[] storage tokensStorage = _baseTokensMap[trader];\r\n        if (_hasBaseToken(tokensStorage, baseToken)) {\r\n            return;\r\n        }\r\n\r\n        tokensStorage.push(baseToken);\r\n        // AB_MNE: markets number exceeds\r\n        require(tokensStorage.length <= IClearingHouseConfig(_clearingHouseConfig).getMaxMarketsPerAccount(), \"AB_MNE\");\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function deregisterBaseToken(address trader, address baseToken) external override {\r\n        _requireOnlyClearingHouse();\r\n        _deregisterBaseToken(trader, baseToken);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function updateTwPremiumGrowthGlobal(\r\n        address trader,\r\n        address baseToken,\r\n        int256 lastTwPremiumGrowthGlobalX96\r\n    ) external override {\r\n        _requireOnlyClearingHouse();\r\n        _accountMarketMap[trader][baseToken].lastTwPremiumGrowthGlobalX96 = lastTwPremiumGrowthGlobalX96;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    /// @dev we don't do swap to get position notional here.\r\n    ///      we define the position notional in a closed market is `closed price * position size`\r\n    function settlePositionInClosedMarket(address trader, address baseToken)\r\n        external\r\n        override\r\n        returns (\r\n            int256 positionNotional,\r\n            int256 openNotional,\r\n            int256 realizedPnl,\r\n            uint256 closedPrice\r\n        )\r\n    {\r\n        _requireOnlyClearingHouse();\r\n\r\n        int256 positionSize = getTakerPositionSize(trader, baseToken);\r\n\r\n        closedPrice = IBaseToken(baseToken).getClosedPrice();\r\n        positionNotional = positionSize.mulDiv(closedPrice.toInt256(), 1e18);\r\n        openNotional = _accountMarketMap[trader][baseToken].takerOpenNotional;\r\n        realizedPnl = positionNotional.add(openNotional);\r\n\r\n        _deleteBaseToken(trader, baseToken);\r\n        _modifyOwedRealizedPnl(trader, realizedPnl);\r\n\r\n        return (positionNotional, openNotional, realizedPnl, closedPrice);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getClearingHouseConfig() external view override returns (address) {\r\n        return _clearingHouseConfig;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getOrderBook() external view override returns (address) {\r\n        return _orderBook;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getVault() external view override returns (address) {\r\n        return _vault;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getBaseTokens(address trader) external view override returns (address[] memory) {\r\n        return _baseTokensMap[trader];\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getAccountInfo(address trader, address baseToken)\r\n        external\r\n        view\r\n        override\r\n        returns (AccountMarket.Info memory)\r\n    {\r\n        return _accountMarketMap[trader][baseToken];\r\n    }\r\n\r\n    // @inheritdoc IAccountBalance\r\n    function getTakerOpenNotional(address trader, address baseToken) external view override returns (int256) {\r\n        return _accountMarketMap[trader][baseToken].takerOpenNotional;\r\n    }\r\n\r\n    // @inheritdoc IAccountBalance\r\n    function getTotalOpenNotional(address trader, address baseToken) external view override returns (int256) {\r\n        // quote.pool[baseToken] + quoteBalance[baseToken]\r\n        (uint256 quoteInPool, ) =\r\n            IOrderBook(_orderBook).getTotalTokenAmountInPoolAndPendingFee(trader, baseToken, false);\r\n        int256 quoteBalance = getQuote(trader, baseToken);\r\n        return quoteInPool.toInt256().add(quoteBalance);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getTotalDebtValue(address trader) external view override returns (uint256) {\r\n        int256 totalQuoteBalance;\r\n        int256 totalBaseDebtValue;\r\n        uint256 tokenLen = _baseTokensMap[trader].length;\r\n        for (uint256 i = 0; i < tokenLen; i++) {\r\n            address baseToken = _baseTokensMap[trader][i];\r\n            int256 baseBalance = getBase(trader, baseToken);\r\n            int256 baseDebtValue;\r\n            // baseDebt = baseBalance when it's negative\r\n            if (baseBalance < 0) {\r\n                // baseDebtValue = baseDebt * indexPrice\r\n                baseDebtValue = baseBalance.mulDiv(_getReferencePrice(baseToken).toInt256(), 1e18);\r\n            }\r\n            totalBaseDebtValue = totalBaseDebtValue.add(baseDebtValue);\r\n\r\n            // we can't calculate totalQuoteDebtValue until we have totalQuoteBalance\r\n            totalQuoteBalance = totalQuoteBalance.add(getQuote(trader, baseToken));\r\n        }\r\n        int256 totalQuoteDebtValue = totalQuoteBalance >= 0 ? 0 : totalQuoteBalance;\r\n\r\n        // both values are negative due to the above condition checks\r\n        return totalQuoteDebtValue.add(totalBaseDebtValue).abs();\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getPnlAndPendingFee(address trader)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            int256,\r\n            int256,\r\n            uint256\r\n        )\r\n    {\r\n        int256 totalPositionValue;\r\n        uint256 tokenLen = _baseTokensMap[trader].length;\r\n        for (uint256 i = 0; i < tokenLen; i++) {\r\n            address baseToken = _baseTokensMap[trader][i];\r\n            totalPositionValue = totalPositionValue.add(getTotalPositionValue(trader, baseToken));\r\n        }\r\n        (int256 netQuoteBalance, uint256 pendingFee) = _getNetQuoteBalanceAndPendingFee(trader);\r\n        int256 unrealizedPnl = totalPositionValue.add(netQuoteBalance);\r\n\r\n        return (_owedRealizedPnlMap[trader], unrealizedPnl, pendingFee);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function hasOrder(address trader) external view override returns (bool) {\r\n        uint256 tokenLen = _baseTokensMap[trader].length;\r\n        address[] memory tokens = new address[](tokenLen);\r\n\r\n        uint256 skipped = 0;\r\n        for (uint256 i = 0; i < tokenLen; i++) {\r\n            address baseToken = _baseTokensMap[trader][i];\r\n            if (!IBaseToken(baseToken).isOpen()) {\r\n                skipped++;\r\n                continue;\r\n            }\r\n            tokens[i - skipped] = baseToken;\r\n        }\r\n\r\n        return IOrderBook(_orderBook).hasOrder(trader, tokens);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getLiquidatablePositionSize(\r\n        address trader,\r\n        address baseToken,\r\n        int256 accountValue\r\n    ) external view override returns (int256) {\r\n        int256 marginRequirement = getMarginRequirementForLiquidation(trader);\r\n        int256 positionSize = getTotalPositionSize(trader, baseToken);\r\n\r\n        // No liquidatable position\r\n        if (accountValue >= marginRequirement || positionSize == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Liquidate the entire position if its value is small enough\r\n        // to prevent tiny positions left in the system\r\n        uint256 positionValueAbs = _getPositionValue(baseToken, positionSize).abs();\r\n        if (positionValueAbs <= _MIN_PARTIAL_LIQUIDATE_POSITION_VALUE) {\r\n            return positionSize;\r\n        }\r\n\r\n        // https://www.notion.so/perp/Backstop-LP-Spec-614b42798d4943768c2837bfe659524d#968996cadaec4c00ac60bd1da02ea8bb\r\n        // Liquidator can only take over partial position if margin ratio is ≥ 3.125% (aka the half of mmRatio).\r\n        // If margin ratio < 3.125%, liquidator can take over the entire position.\r\n        //\r\n        // threshold = mmRatio / 2 = 3.125%\r\n        // if marginRatio >= threshold, then\r\n        //    maxLiquidateRatio = MIN(1, 0.5 * totalAbsPositionValue / absPositionValue)\r\n        // if marginRatio < threshold, then\r\n        //    maxLiquidateRatio = 1\r\n        uint24 maxLiquidateRatio = 1e6; // 100%\r\n        if (accountValue >= marginRequirement.div(2)) {\r\n            // maxLiquidateRatio = getTotalAbsPositionValue / ( getTotalPositionValueInMarket.abs * 2 )\r\n            maxLiquidateRatio = FullMath\r\n                .mulDiv(getTotalAbsPositionValue(trader), 1e6, positionValueAbs.mul(2))\r\n                .toUint24();\r\n            if (maxLiquidateRatio > 1e6) {\r\n                maxLiquidateRatio = 1e6;\r\n            }\r\n        }\r\n\r\n        return positionSize.mulRatio(maxLiquidateRatio);\r\n    }\r\n\r\n    //\r\n    // PUBLIC VIEW\r\n    //\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getBase(address trader, address baseToken) public view override returns (int256) {\r\n        uint256 orderDebt = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, true);\r\n        // base = takerPositionSize - orderBaseDebt\r\n        return _accountMarketMap[trader][baseToken].takerPositionSize.sub(orderDebt.toInt256());\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getQuote(address trader, address baseToken) public view override returns (int256) {\r\n        uint256 orderDebt = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, false);\r\n        // quote = takerOpenNotional - orderQuoteDebt\r\n        return _accountMarketMap[trader][baseToken].takerOpenNotional.sub(orderDebt.toInt256());\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getTakerPositionSize(address trader, address baseToken) public view override returns (int256) {\r\n        int256 positionSize = _accountMarketMap[trader][baseToken].takerPositionSize;\r\n        return positionSize.abs() < _DUST ? 0 : positionSize;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getTotalPositionSize(address trader, address baseToken) public view override returns (int256) {\r\n        // NOTE: when a token goes into UniswapV3 pool (addLiquidity or swap), there would be 1 wei rounding error\r\n        // for instance, maker adds liquidity with 2 base (2000000000000000000),\r\n        // the actual base amount in pool would be 1999999999999999999\r\n\r\n        // makerBalance = totalTokenAmountInPool - totalOrderDebt\r\n        (uint256 totalBaseBalanceFromOrders, ) =\r\n            IOrderBook(_orderBook).getTotalTokenAmountInPoolAndPendingFee(trader, baseToken, true);\r\n        uint256 totalBaseDebtFromOrder = IOrderBook(_orderBook).getTotalOrderDebt(trader, baseToken, true);\r\n        int256 makerBaseBalance = totalBaseBalanceFromOrders.toInt256().sub(totalBaseDebtFromOrder.toInt256());\r\n\r\n        int256 takerPositionSize = _accountMarketMap[trader][baseToken].takerPositionSize;\r\n        int256 totalPositionSize = makerBaseBalance.add(takerPositionSize);\r\n        return totalPositionSize.abs() < _DUST ? 0 : totalPositionSize;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getTotalPositionValue(address trader, address baseToken) public view override returns (int256) {\r\n        int256 positionSize = getTotalPositionSize(trader, baseToken);\r\n        return _getPositionValue(baseToken, positionSize);\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getTotalAbsPositionValue(address trader) public view override returns (uint256) {\r\n        address[] memory tokens = _baseTokensMap[trader];\r\n        uint256 totalPositionValue;\r\n        uint256 tokenLen = tokens.length;\r\n        for (uint256 i = 0; i < tokenLen; i++) {\r\n            address baseToken = tokens[i];\r\n            // will not use negative value in this case\r\n            uint256 positionValue = getTotalPositionValue(trader, baseToken).abs();\r\n            totalPositionValue = totalPositionValue.add(positionValue);\r\n        }\r\n        return totalPositionValue;\r\n    }\r\n\r\n    /// @inheritdoc IAccountBalance\r\n    function getMarginRequirementForLiquidation(address trader) public view override returns (int256) {\r\n        return\r\n            getTotalAbsPositionValue(trader)\r\n                .mulRatio(IClearingHouseConfig(_clearingHouseConfig).getMmRatio())\r\n                .toInt256();\r\n    }\r\n\r\n    //\r\n    // INTERNAL NON-VIEW\r\n    //\r\n    function _modifyTakerBalance(\r\n        address trader,\r\n        address baseToken,\r\n        int256 base,\r\n        int256 quote\r\n    ) internal returns (int256, int256) {\r\n        AccountMarket.Info storage accountInfo = _accountMarketMap[trader][baseToken];\r\n        accountInfo.takerPositionSize = accountInfo.takerPositionSize.add(base);\r\n        accountInfo.takerOpenNotional = accountInfo.takerOpenNotional.add(quote);\r\n        return (accountInfo.takerPositionSize, accountInfo.takerOpenNotional);\r\n    }\r\n\r\n    function _modifyOwedRealizedPnl(address trader, int256 amount) internal {\r\n        if (amount != 0) {\r\n            _owedRealizedPnlMap[trader] = _owedRealizedPnlMap[trader].add(amount);\r\n            emit PnlRealized(trader, amount);\r\n        }\r\n    }\r\n\r\n    function _settleQuoteToOwedRealizedPnl(\r\n        address trader,\r\n        address baseToken,\r\n        int256 amount\r\n    ) internal {\r\n        if (amount != 0) {\r\n            AccountMarket.Info storage accountInfo = _accountMarketMap[trader][baseToken];\r\n            accountInfo.takerOpenNotional = accountInfo.takerOpenNotional.sub(amount);\r\n            _modifyOwedRealizedPnl(trader, amount);\r\n        }\r\n    }\r\n\r\n    /// @dev this function is expensive\r\n    function _deregisterBaseToken(address trader, address baseToken) internal {\r\n        AccountMarket.Info memory info = _accountMarketMap[trader][baseToken];\r\n        if (info.takerPositionSize.abs() >= _DUST || info.takerOpenNotional.abs() >= _DUST) {\r\n            return;\r\n        }\r\n\r\n        if (IOrderBook(_orderBook).getOpenOrderIds(trader, baseToken).length > 0) {\r\n            return;\r\n        }\r\n\r\n        _deleteBaseToken(trader, baseToken);\r\n    }\r\n\r\n    function _deleteBaseToken(address trader, address baseToken) internal {\r\n        delete _accountMarketMap[trader][baseToken];\r\n\r\n        address[] storage tokensStorage = _baseTokensMap[trader];\r\n        uint256 tokenLen = tokensStorage.length;\r\n        for (uint256 i; i < tokenLen; i++) {\r\n            if (tokensStorage[i] == baseToken) {\r\n                // if the target to be removed is the last one, pop it directly;\r\n                // else, replace it with the last one and pop the last one instead\r\n                if (i != tokenLen - 1) {\r\n                    tokensStorage[i] = tokensStorage[tokenLen - 1];\r\n                }\r\n                tokensStorage.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    function _getPositionValue(address baseToken, int256 positionSize) internal view returns (int256) {\r\n        if (positionSize == 0) return 0;\r\n\r\n        uint256 indexTwap = _getReferencePrice(baseToken);\r\n        // both positionSize & indexTwap are in 10^18 already\r\n        // overflow inspection:\r\n        // only overflow when position value in USD(18 decimals) > 2^255 / 10^18\r\n        return positionSize.mulDiv(indexTwap.toInt256(), 1e18);\r\n    }\r\n\r\n    function _getReferencePrice(address baseToken) internal view returns (uint256) {\r\n        return\r\n            IBaseToken(baseToken).isClosed()\r\n                ? IBaseToken(baseToken).getClosedPrice()\r\n                : IIndexPrice(baseToken).getIndexPrice(IClearingHouseConfig(_clearingHouseConfig).getTwapInterval());\r\n    }\r\n\r\n    /// @return netQuoteBalance = quote.balance + totalQuoteInPools\r\n    function _getNetQuoteBalanceAndPendingFee(address trader)\r\n        internal\r\n        view\r\n        returns (int256 netQuoteBalance, uint256 pendingFee)\r\n    {\r\n        int256 totalTakerQuoteBalance;\r\n        uint256 tokenLen = _baseTokensMap[trader].length;\r\n        for (uint256 i = 0; i < tokenLen; i++) {\r\n            address baseToken = _baseTokensMap[trader][i];\r\n            totalTakerQuoteBalance = totalTakerQuoteBalance.add(_accountMarketMap[trader][baseToken].takerOpenNotional);\r\n        }\r\n\r\n        // pendingFee is included\r\n        int256 totalMakerQuoteBalance;\r\n        (totalMakerQuoteBalance, pendingFee) = IOrderBook(_orderBook).getTotalQuoteBalanceAndPendingFee(\r\n            trader,\r\n            _baseTokensMap[trader]\r\n        );\r\n        netQuoteBalance = totalTakerQuoteBalance.add(totalMakerQuoteBalance);\r\n\r\n        return (netQuoteBalance, pendingFee);\r\n    }\r\n\r\n    function _hasBaseToken(address[] memory baseTokens, address baseToken) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < baseTokens.length; i++) {\r\n            if (baseTokens[i] == baseToken) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMathUpgradeable {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = -denominator & denominator;\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "contracts/base/ClearingHouseCallee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { SafeOwnable } from \"./SafeOwnable.sol\";\r\n\r\nabstract contract ClearingHouseCallee is SafeOwnable {\r\n    //\r\n    // STATE\r\n    //\r\n    address internal _clearingHouse;\r\n\r\n    // __gap is reserved storage\r\n    uint256[50] private __gap;\r\n\r\n    //\r\n    // EVENT\r\n    //\r\n    event ClearingHouseChanged(address indexed clearingHouse);\r\n\r\n    //\r\n    // CONSTRUCTOR\r\n    //\r\n\r\n    // solhint-disable-next-line func-order\r\n    function __ClearingHouseCallee_init() internal initializer {\r\n        __SafeOwnable_init();\r\n    }\r\n\r\n    function setClearingHouse(address clearingHouseArg) external onlyOwner {\r\n        _clearingHouse = clearingHouseArg;\r\n        emit ClearingHouseChanged(clearingHouseArg);\r\n    }\r\n\r\n    function getClearingHouse() external view returns (address) {\r\n        return _clearingHouse;\r\n    }\r\n\r\n    function _requireOnlyClearingHouse() internal view {\r\n        // only ClearingHouse\r\n        require(_msgSender() == _clearingHouse, \"CHD_OCH\");\r\n    }\r\n}\r\n"
    },
    "contracts/lib/PerpSafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @dev copy from \"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\"\r\n * and rename to avoid naming conflict with uniswap\r\n */\r\nlibrary PerpSafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128 returnValue) {\r\n        require(((returnValue = uint128(value)) == value), \"SafeCast: value doesn't fit in 128 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64 returnValue) {\r\n        require(((returnValue = uint64(value)) == value), \"SafeCast: value doesn't fit in 64 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32 returnValue) {\r\n        require(((returnValue = uint32(value)) == value), \"SafeCast: value doesn't fit in 32 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint24 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint24).\r\n     *\r\n     * Counterpart to Solidity's `uint24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     */\r\n    function toUint24(uint256 value) internal pure returns (uint24 returnValue) {\r\n        require(((returnValue = uint24(value)) == value), \"SafeCast: value doesn't fit in 24 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16 returnValue) {\r\n        require(((returnValue = uint16(value)) == value), \"SafeCast: value doesn't fit in 16 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8 returnValue) {\r\n        require(((returnValue = uint8(value)) == value), \"SafeCast: value doesn't fit in 8 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128 returnValue) {\r\n        require(((returnValue = int128(value)) == value), \"SafeCast: value doesn't fit in 128 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64 returnValue) {\r\n        require(((returnValue = int64(value)) == value), \"SafeCast: value doesn't fit in 64 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32 returnValue) {\r\n        require(((returnValue = int32(value)) == value), \"SafeCast: value doesn't fit in 32 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16 returnValue) {\r\n        require(((returnValue = int16(value)) == value), \"SafeCast: value doesn't fit in 16 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8 returnValue) {\r\n        require(((returnValue = int8(value)) == value), \"SafeCast: value doesn't fit in 8 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint24 from int256, reverting on\r\n     * overflow (when the input is greater than largest uint24).\r\n     *\r\n     * Counterpart to Solidity's `uint24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0 and into 24 bit.\r\n     */\r\n    function toUint24(int256 value) internal pure returns (uint24 returnValue) {\r\n        require(\r\n            ((returnValue = uint24(value)) == value),\r\n            \"SafeCast: value must be positive or value doesn't fit in an 24 bits\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int24 from int256, reverting on\r\n     * overflow (when the input is greater than largest int24).\r\n     *\r\n     * Counterpart to Solidity's `int24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     */\r\n    function toInt24(int256 value) internal pure returns (int24 returnValue) {\r\n        require(((returnValue = int24(value)) == value), \"SafeCast: value doesn't fit in an 24 bits\");\r\n    }\r\n}\r\n"
    },
    "contracts/lib/PerpMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { FixedPoint96 } from \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\";\r\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\r\nimport { PerpSafeCast } from \"./PerpSafeCast.sol\";\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\n\r\nlibrary PerpMath {\r\n    using PerpSafeCast for int256;\r\n    using SignedSafeMathUpgradeable for int256;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    function formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\r\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\r\n    }\r\n\r\n    function formatX10_18ToX96(uint256 valueX10_18) internal pure returns (uint256) {\r\n        return FullMath.mulDiv(valueX10_18, FixedPoint96.Q96, 1 ether);\r\n    }\r\n\r\n    function formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\r\n        return FullMath.mulDiv(valueX96, 1 ether, FixedPoint96.Q96);\r\n    }\r\n\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function abs(int256 value) internal pure returns (uint256) {\r\n        return value >= 0 ? value.toUint256() : neg256(value).toUint256();\r\n    }\r\n\r\n    function neg256(int256 a) internal pure returns (int256) {\r\n        require(a > -2**255, \"PerpMath: inversion overflow\");\r\n        return -a;\r\n    }\r\n\r\n    function neg256(uint256 a) internal pure returns (int256) {\r\n        return -PerpSafeCast.toInt256(a);\r\n    }\r\n\r\n    function neg128(int128 a) internal pure returns (int128) {\r\n        require(a > -2**127, \"PerpMath: inversion overflow\");\r\n        return -a;\r\n    }\r\n\r\n    function neg128(uint128 a) internal pure returns (int128) {\r\n        return -PerpSafeCast.toInt128(a);\r\n    }\r\n\r\n    function divBy10_18(int256 value) internal pure returns (int256) {\r\n        // no overflow here\r\n        return value / (1 ether);\r\n    }\r\n\r\n    function divBy10_18(uint256 value) internal pure returns (uint256) {\r\n        // no overflow here\r\n        return value / (1 ether);\r\n    }\r\n\r\n    function subRatio(uint24 a, uint24 b) internal pure returns (uint24) {\r\n        require(b <= a, \"PerpMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mulRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\r\n        return FullMath.mulDiv(value, ratio, 1e6);\r\n    }\r\n\r\n    function mulRatio(int256 value, uint24 ratio) internal pure returns (int256) {\r\n        return mulDiv(value, int256(ratio), 1e6);\r\n    }\r\n\r\n    function divRatio(uint256 value, uint24 ratio) internal pure returns (uint256) {\r\n        return FullMath.mulDiv(value, 1e6, ratio);\r\n    }\r\n\r\n    /// @param denominator cannot be 0 and is checked in FullMath.mulDiv()\r\n    function mulDiv(\r\n        int256 a,\r\n        int256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (int256 result) {\r\n        uint256 unsignedA = a < 0 ? uint256(neg256(a)) : uint256(a);\r\n        uint256 unsignedB = b < 0 ? uint256(neg256(b)) : uint256(b);\r\n        bool negative = ((a < 0 && b > 0) || (a > 0 && b < 0)) ? true : false;\r\n\r\n        uint256 unsignedResult = FullMath.mulDiv(unsignedA, unsignedB, denominator);\r\n\r\n        result = negative ? neg256(unsignedResult) : PerpSafeCast.toInt256(unsignedResult);\r\n\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IExchange.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { Funding } from \"../lib/Funding.sol\";\r\n\r\ninterface IExchange {\r\n    /// @param amount when closing position, amount(uint256) == takerPositionSize(int256),\r\n    /// as amount is assigned as takerPositionSize in ClearingHouse.closePosition()\r\n    struct SwapParams {\r\n        address trader;\r\n        address baseToken;\r\n        bool isBaseToQuote;\r\n        bool isExactInput;\r\n        bool isClose;\r\n        uint256 amount;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct SwapResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n        int256 exchangedPositionSize;\r\n        int256 exchangedPositionNotional;\r\n        uint256 fee;\r\n        uint256 insuranceFundFee;\r\n        int256 pnlToBeRealized;\r\n        uint256 sqrtPriceAfterX96;\r\n        int24 tick;\r\n        bool isPartialClose;\r\n    }\r\n\r\n    struct SwapCallbackData {\r\n        address trader;\r\n        address baseToken;\r\n        address pool;\r\n        uint24 uniswapFeeRatio;\r\n        uint256 fee;\r\n    }\r\n\r\n    struct RealizePnlParams {\r\n        address trader;\r\n        address baseToken;\r\n        int256 base;\r\n        int256 quote;\r\n    }\r\n\r\n    /// @notice Emitted when the global funding growth is updated\r\n    /// @param baseToken Address of the base token\r\n    /// @param markTwap The market twap price when the funding growth is updated\r\n    /// @param indexTwap The index twap price when the funding growth is updated\r\n    event FundingUpdated(address indexed baseToken, uint256 markTwap, uint256 indexTwap);\r\n\r\n    /// @notice Emitted when maxTickCrossedWithinBlock is updated\r\n    /// @param baseToken Address of the base token\r\n    /// @param maxTickCrossedWithinBlock Max tick allowed to be crossed within block when reducing position\r\n    event MaxTickCrossedWithinBlockChanged(address indexed baseToken, uint24 maxTickCrossedWithinBlock);\r\n\r\n    /// @notice Emitted when accountBalance is updated\r\n    /// @param accountBalance The address of accountBalance contract\r\n    event AccountBalanceChanged(address accountBalance);\r\n\r\n    /// @notice The actual swap function\r\n    /// @dev can only be called from ClearingHouse\r\n    /// @param params The parameters of the swap\r\n    /// @return swapResponse The result of the swap\r\n    function swap(SwapParams memory params) external returns (SwapResponse memory swapResponse);\r\n\r\n    /// @notice Settle the funding payment for the time interval since the last settlement\r\n    /// @dev This function should be called at the beginning of every high-level function, such as `openPosition()`\r\n    ///      while it doesn't matter who calls this function\r\n    ///      this function 1. settles personal funding payment 2. updates global funding growth\r\n    ///      personal funding payment is settled whenever there is pending funding payment\r\n    ///      the global funding growth update only happens once per unique timestamp (not blockNumber, due to Arbitrum)\r\n    /// @return fundingPayment the funding payment of a trader in one market should be settled into owned realized Pnl\r\n    /// @return fundingGrowthGlobal the up-to-date globalFundingGrowth, usually used for later calculations\r\n    function settleFunding(address trader, address baseToken)\r\n        external\r\n        returns (int256 fundingPayment, Funding.Growth memory fundingGrowthGlobal);\r\n\r\n    /// @notice Get the max ticks allowed to be crossed within a block when reducing position\r\n    /// @param baseToken Address of the base token\r\n    /// @return maxTickCrossedWithinBlock The max ticks allowed to be crossed within a block when reducing position\r\n    function getMaxTickCrossedWithinBlock(address baseToken) external view returns (uint24 maxTickCrossedWithinBlock);\r\n\r\n    /// @notice Get all the pending funding payment for a trader\r\n    /// @return pendingFundingPayment The pending funding payment of the trader.\r\n    /// Positive value means the trader pays funding, negative value means the trader receives funding.\r\n    function getAllPendingFundingPayment(address trader) external view returns (int256 pendingFundingPayment);\r\n\r\n    /// @notice Check if current price spread between market price and index twap is over maximum price spread.\r\n    /// @param baseToken Address of the base token\r\n    /// @return true if over the maximum price spread\r\n    function isOverPriceSpread(address baseToken) external view returns (bool);\r\n\r\n    /// @notice Get the pending funding payment for a trader in a given market\r\n    /// @dev this is the view version of _updateFundingGrowth()\r\n    /// @return pendingFundingPayment The pending funding payment of a trader in one market,\r\n    /// including liquidity & balance coefficients. Positive value means the trader pays funding,\r\n    /// negative value means the trader receives funding.\r\n    function getPendingFundingPayment(address trader, address baseToken)\r\n        external\r\n        view\r\n        returns (int256 pendingFundingPayment);\r\n\r\n    /// @notice Get the square root of the market twap price with the given time interval\r\n    /// @dev The return value is a X96 number\r\n    /// @param baseToken Address of the base token\r\n    /// @param twapInterval The time interval in seconds\r\n    /// @return sqrtMarkTwapX96 The square root of the market twap price\r\n    function getSqrtMarkTwapX96(address baseToken, uint32 twapInterval) external view returns (uint160 sqrtMarkTwapX96);\r\n\r\n    /// @notice Get the pnl that can be realized if trader reduce position\r\n    /// @dev This function normally won't be needed by traders, but it might be useful for 3rd party\r\n    /// @param params The params needed to do the query, encoded as `RealizePnlParams` in calldata\r\n    /// @return pnlToBeRealized The pnl that can be realized if trader reduce position\r\n    function getPnlToBeRealized(RealizePnlParams memory params) external view returns (int256 pnlToBeRealized);\r\n\r\n    /// @notice Get `OrderBook` contract address\r\n    /// @return orderBook `OrderBook` contract address\r\n    function getOrderBook() external view returns (address orderBook);\r\n\r\n    /// @notice Get `AccountBalance` contract address\r\n    /// @return accountBalance `AccountBalance` contract address\r\n    function getAccountBalance() external view returns (address accountBalance);\r\n\r\n    /// @notice Get `ClearingHouseConfig` contract address\r\n    /// @return clearingHouse `ClearingHouseConfig` contract address\r\n    function getClearingHouseConfig() external view returns (address clearingHouse);\r\n}\r\n"
    },
    "contracts/interface/IBaseToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\ninterface IBaseToken {\r\n    // Do NOT change the order of enum values because it will break backwards compatibility\r\n    enum Status { Open, Paused, Closed }\r\n\r\n    event PriceFeedChanged(address indexed priceFeed);\r\n    event StatusUpdated(Status indexed status);\r\n\r\n    function close() external;\r\n\r\n    /// @notice Update the cached index price of the token.\r\n    /// @param interval The twap interval in seconds.\r\n    function cacheTwap(uint256 interval) external;\r\n\r\n    /// @notice Get the price feed address\r\n    /// @return priceFeed the current price feed\r\n    function getPriceFeed() external view returns (address priceFeed);\r\n\r\n    function getPausedTimestamp() external view returns (uint256);\r\n\r\n    function getPausedIndexPrice() external view returns (uint256);\r\n\r\n    function getClosedPrice() external view returns (uint256);\r\n\r\n    function isOpen() external view returns (bool);\r\n\r\n    function isPaused() external view returns (bool);\r\n\r\n    function isClosed() external view returns (bool);\r\n}\r\n"
    },
    "contracts/interface/IIndexPrice.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\ninterface IIndexPrice {\r\n    /// @notice Returns the index price of the token.\r\n    /// @param interval The interval represents twap interval.\r\n    /// @return indexPrice Twap price with interval\r\n    function getIndexPrice(uint256 interval) external view returns (uint256 indexPrice);\r\n}\r\n"
    },
    "contracts/interface/IOrderBook.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { Funding } from \"../lib/Funding.sol\";\r\nimport { OpenOrder } from \"../lib/OpenOrder.sol\";\r\n\r\ninterface IOrderBook {\r\n    struct AddLiquidityParams {\r\n        address trader;\r\n        address baseToken;\r\n        uint256 base;\r\n        uint256 quote;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        Funding.Growth fundingGrowthGlobal;\r\n    }\r\n\r\n    struct RemoveLiquidityParams {\r\n        address maker;\r\n        address baseToken;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint128 liquidity;\r\n    }\r\n\r\n    struct AddLiquidityResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n        uint256 fee;\r\n        uint128 liquidity;\r\n    }\r\n\r\n    struct RemoveLiquidityResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n        uint256 fee;\r\n        int256 takerBase;\r\n        int256 takerQuote;\r\n    }\r\n\r\n    struct ReplaySwapParams {\r\n        address baseToken;\r\n        bool isBaseToQuote;\r\n        bool shouldUpdateState;\r\n        int256 amount;\r\n        uint160 sqrtPriceLimitX96;\r\n        uint24 exchangeFeeRatio;\r\n        uint24 uniswapFeeRatio;\r\n        Funding.Growth globalFundingGrowth;\r\n    }\r\n\r\n    /// @param insuranceFundFee = fee * insuranceFundFeeRatio\r\n    struct ReplaySwapResponse {\r\n        int24 tick;\r\n        uint256 fee;\r\n        uint256 insuranceFundFee;\r\n    }\r\n\r\n    struct MintCallbackData {\r\n        address trader;\r\n        address pool;\r\n    }\r\n\r\n    /// @notice Emitted when the `Exchange` contract address changed\r\n    /// @param exchange The address of exchange contract\r\n    event ExchangeChanged(address indexed exchange);\r\n\r\n    /// @notice Add liquidity logic\r\n    /// @dev Only used by `ClearingHouse` contract\r\n    /// @param params Add liquidity params, detail on `IOrderBook.AddLiquidityParams`\r\n    /// @return response Add liquidity response, detail on `IOrderBook.AddLiquidityResponse`\r\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory response);\r\n\r\n    /// @notice Remove liquidity logic, only used by `ClearingHouse` contract\r\n    /// @param params Remove liquidity params, detail on `IOrderBook.RemoveLiquidityParams`\r\n    /// @return response Remove liquidity response, detail on `IOrderBook.RemoveLiquidityResponse`\r\n    function removeLiquidity(RemoveLiquidityParams calldata params)\r\n        external\r\n        returns (RemoveLiquidityResponse memory response);\r\n\r\n    /// @dev This is the non-view version of `getLiquidityCoefficientInFundingPayment()`,\r\n    /// only can be called by `ClearingHouse` contract\r\n    /// @param trader The trader address\r\n    /// @param baseToken The base token address\r\n    /// @param fundingGrowthGlobal The funding growth info, detail on `Funding.Growth`\r\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\r\n    function updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\r\n        address trader,\r\n        address baseToken,\r\n        Funding.Growth memory fundingGrowthGlobal\r\n    ) external returns (int256 liquidityCoefficientInFundingPayment);\r\n\r\n    /// @notice Replay the swap and get the swap result (price impact and swap fee),\r\n    /// only can be called by `ClearingHouse` contract;\r\n    /// @dev `ReplaySwapResponse.insuranceFundFee = fee * insuranceFundFeeRatio`\r\n    /// @param params ReplaySwap params, detail on `IOrderBook.ReplaySwapParams`\r\n    /// @return response The swap result encoded in `ReplaySwapResponse`\r\n    function replaySwap(ReplaySwapParams memory params) external returns (ReplaySwapResponse memory response);\r\n\r\n    function updateOrderDebt(\r\n        bytes32 orderId,\r\n        int256 base,\r\n        int256 quote\r\n    ) external;\r\n\r\n    /// @notice Get open order ids of a trader in the given market\r\n    /// @param trader The trader address\r\n    /// @param baseToken The base token address\r\n    /// @return orderIds The open order ids\r\n    function getOpenOrderIds(address trader, address baseToken) external view returns (bytes32[] memory orderIds);\r\n\r\n    /// @notice Get open order info by given order id\r\n    /// @param orderId The order id\r\n    /// @return info The open order info encoded in `OpenOrder.Info`\r\n    function getOpenOrderById(bytes32 orderId) external view returns (OpenOrder.Info memory info);\r\n\r\n    /// @notice Get open order info by given base token, upper tick and lower tick\r\n    /// @param trader The trader address\r\n    /// @param baseToken The base token address\r\n    /// @param upperTick The upper tick\r\n    /// @param lowerTick The lower tick\r\n    /// @return info he open order info encoded in `OpenOrder.Info`\r\n    function getOpenOrder(\r\n        address trader,\r\n        address baseToken,\r\n        int24 lowerTick,\r\n        int24 upperTick\r\n    ) external view returns (OpenOrder.Info memory info);\r\n\r\n    /// @notice Check if the specified trader has order in given markets\r\n    /// @param trader The trader address\r\n    /// @param tokens The base token addresses\r\n    /// @return hasOrder True if the trader has order in given markets\r\n    function hasOrder(address trader, address[] calldata tokens) external view returns (bool hasOrder);\r\n\r\n    /// @notice Get the total quote token amount and pending fees of all orders in given markets\r\n    /// @param trader The trader address\r\n    /// @param baseTokens The base token addresses\r\n    /// @return totalQuoteAmountInPools The total quote token amount\r\n    /// @return totalPendingFee The total pending fees in the orders\r\n    function getTotalQuoteBalanceAndPendingFee(address trader, address[] calldata baseTokens)\r\n        external\r\n        view\r\n        returns (int256 totalQuoteAmountInPools, uint256 totalPendingFee);\r\n\r\n    /// @notice Get the total token amount (quote or base) and pending fees of all orders in the given market\r\n    /// @param trader The trader address\r\n    /// @param baseToken The base token addresses\r\n    /// @param fetchBase True if fetch base token amount, false if fetch quote token amount\r\n    /// @return tokenAmount The total quote/base token amount\r\n    /// @return totalPendingFee The total pending fees in the orders\r\n    function getTotalTokenAmountInPoolAndPendingFee(\r\n        address trader,\r\n        address baseToken,\r\n        bool fetchBase\r\n    ) external view returns (uint256 tokenAmount, uint256 totalPendingFee);\r\n\r\n    /// @notice Get the total debt token amount (base or quote) of all orders in the given market\r\n    /// @param trader The trader address\r\n    /// @param baseToken The base token address\r\n    /// @param fetchBase True if fetch base token amount, false if fetch quote token amount\r\n    /// @return debtAmount The total debt token amount\r\n    function getTotalOrderDebt(\r\n        address trader,\r\n        address baseToken,\r\n        bool fetchBase\r\n    ) external view returns (uint256 debtAmount);\r\n\r\n    /// @notice Get the pending funding payment of all orders in the given market\r\n    /// @dev This is the view version of `updateFundingGrowthAndLiquidityCoefficientInFundingPayment()`, so only\r\n    /// part of the funding payment will be returned. Use it with caution because it does not return all the pending\r\n    /// funding payment of orders. **Normally you won't need to use this function**\r\n    /// @return liquidityCoefficientInFundingPayment the funding payment of all orders/liquidity of a maker\r\n    function getLiquidityCoefficientInFundingPayment(\r\n        address trader,\r\n        address baseToken,\r\n        Funding.Growth memory fundingGrowthGlobal\r\n    ) external view returns (int256 liquidityCoefficientInFundingPayment);\r\n\r\n    /// @notice Get the pending fees of a order\r\n    /// @param trader The trader address\r\n    /// @param baseToken The base token address\r\n    /// @param lowerTick The lower tick\r\n    /// @param upperTick The upper tick\r\n    /// @return fee The pending fees\r\n    function getPendingFee(\r\n        address trader,\r\n        address baseToken,\r\n        int24 lowerTick,\r\n        int24 upperTick\r\n    ) external view returns (uint256 fee);\r\n\r\n    /// @notice Get `Exchange` contract address\r\n    /// @return exchange The `Exchange` contract address\r\n    function getExchange() external view returns (address exchange);\r\n}\r\n"
    },
    "contracts/interface/IClearingHouseConfig.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\ninterface IClearingHouseConfig {\r\n    /// @return maxMarketsPerAccount Max value of total markets per account\r\n    function getMaxMarketsPerAccount() external view returns (uint8 maxMarketsPerAccount);\r\n\r\n    /// @return imRatio Initial margin ratio\r\n    function getImRatio() external view returns (uint24 imRatio);\r\n\r\n    /// @return mmRatio Maintenance margin requirement ratio\r\n    function getMmRatio() external view returns (uint24 mmRatio);\r\n\r\n    /// @return liquidationPenaltyRatio Liquidation penalty ratio\r\n    function getLiquidationPenaltyRatio() external view returns (uint24 liquidationPenaltyRatio);\r\n\r\n    /// @return partialCloseRatio Partial close ratio\r\n    function getPartialCloseRatio() external view returns (uint24 partialCloseRatio);\r\n\r\n    /// @return twapInterval TwapInterval for funding and prices (mark & index) calculations\r\n    function getTwapInterval() external view returns (uint32 twapInterval);\r\n\r\n    /// @return settlementTokenBalanceCap Max value of settlement token balance\r\n    function getSettlementTokenBalanceCap() external view returns (uint256 settlementTokenBalanceCap);\r\n\r\n    /// @return maxFundingRate Max value of funding rate\r\n    function getMaxFundingRate() external view returns (uint24 maxFundingRate);\r\n\r\n    /// @return isBackstopLiquidityProvider is backstop liquidity provider\r\n    function isBackstopLiquidityProvider(address account) external view returns (bool isBackstopLiquidityProvider);\r\n}\r\n"
    },
    "contracts/storage/AccountBalanceStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { AccountMarket } from \"../lib/AccountMarket.sol\";\r\n\r\n/// @notice For future upgrades, do not change AccountBalanceStorageV1. Create a new\r\n/// contract which implements AccountBalanceStorageV1 and following the naming convention\r\n/// AccountBalanceStorageVX.\r\nabstract contract AccountBalanceStorageV1 {\r\n    address internal _clearingHouseConfig;\r\n    address internal _orderBook;\r\n    address internal _vault;\r\n\r\n    // trader => owedRealizedPnl\r\n    mapping(address => int256) internal _owedRealizedPnlMap;\r\n\r\n    // trader => baseTokens\r\n    // base token registry of each trader\r\n    mapping(address => address[]) internal _baseTokensMap;\r\n\r\n    // first key: trader, second key: baseToken\r\n    mapping(address => mapping(address => AccountMarket.Info)) internal _accountMarketMap;\r\n}\r\n"
    },
    "contracts/base/BlockContext.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nabstract contract BlockContext {\r\n    function _blockTimestamp() internal view virtual returns (uint256) {\r\n        // Reply from Arbitrum\r\n        // block.timestamp returns timestamp at the time at which the sequencer receives the tx.\r\n        // It may not actually correspond to a particular L1 block\r\n        return block.timestamp;\r\n    }\r\n\r\n    function _blockNumber() internal view virtual returns (uint256) {\r\n        return block.number;\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IAccountBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { AccountMarket } from \"../lib/AccountMarket.sol\";\r\n\r\ninterface IAccountBalance {\r\n    /// @param vault The address of the vault contract\r\n    event VaultChanged(address indexed vault);\r\n\r\n    /// @dev Emit whenever a trader's `owedRealizedPnl` is updated\r\n    /// @param trader The address of the trader\r\n    /// @param amount The amount changed\r\n    event PnlRealized(address indexed trader, int256 amount);\r\n\r\n    /// @notice Modify trader account balance\r\n    /// @dev Only used by `ClearingHouse` contract\r\n    /// @param trader The address of the trader\r\n    /// @param baseToken The address of the baseToken\r\n    /// @param base Modified amount of base\r\n    /// @param quote Modified amount of quote\r\n    /// @return takerPositionSize Taker position size after modified\r\n    /// @return takerOpenNotional Taker open notional after modified\r\n    function modifyTakerBalance(\r\n        address trader,\r\n        address baseToken,\r\n        int256 base,\r\n        int256 quote\r\n    ) external returns (int256 takerPositionSize, int256 takerOpenNotional);\r\n\r\n    /// @notice Modify trader owedRealizedPnl\r\n    /// @dev Only used by `ClearingHouse` contract\r\n    /// @param trader The address of the trader\r\n    /// @param amount Modified amount of owedRealizedPnl\r\n    function modifyOwedRealizedPnl(address trader, int256 amount) external;\r\n\r\n    /// @notice Settle owedRealizedPnl\r\n    /// @dev Only used by `Vault.withdraw()`\r\n    /// @param trader The address of the trader\r\n    /// @return pnl Settled owedRealizedPnl\r\n    function settleOwedRealizedPnl(address trader) external returns (int256 pnl);\r\n\r\n    /// @notice Modify trader owedRealizedPnl\r\n    /// @dev Only used by `ClearingHouse` contract\r\n    /// @param trader The address of the trader\r\n    /// @param baseToken The address of the baseToken\r\n    /// @param amount Settled quote amount\r\n    function settleQuoteToOwedRealizedPnl(\r\n        address trader,\r\n        address baseToken,\r\n        int256 amount\r\n    ) external;\r\n\r\n    /// @notice Settle account balance and deregister base token\r\n    /// @dev Only used by `ClearingHouse` contract\r\n    /// @param trader The address of the trader\r\n    /// @param baseToken The address of the baseToken\r\n    /// @param takerBase Modified amount of taker base\r\n    /// @param takerQuote Modified amount of taker quote\r\n    /// @param realizedPnl Amount of pnl realized\r\n    /// @param makerFee Amount of maker fee collected from pool\r\n    function settleBalanceAndDeregister(\r\n        address trader,\r\n        address baseToken,\r\n        int256 takerBase,\r\n        int256 takerQuote,\r\n        int256 realizedPnl,\r\n        int256 makerFee\r\n    ) external;\r\n\r\n    /// @notice Every time a trader's position value is checked, the base token list of this trader will be traversed;\r\n    /// thus, this list should be kept as short as possible\r\n    /// @dev Only used by `ClearingHouse` contract\r\n    /// @param trader The address of the trader\r\n    /// @param baseToken The address of the trader's base token\r\n    function registerBaseToken(address trader, address baseToken) external;\r\n\r\n    /// @notice Deregister baseToken from trader accountInfo\r\n    /// @dev Only used by `ClearingHouse` contract, this function is expensive, due to for loop\r\n    /// @param trader The address of the trader\r\n    /// @param baseToken The address of the trader's base token\r\n    function deregisterBaseToken(address trader, address baseToken) external;\r\n\r\n    /// @notice Update trader Twap premium info\r\n    /// @dev Only used by `ClearingHouse` contract\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @param lastTwPremiumGrowthGlobalX96 The last Twap Premium\r\n    function updateTwPremiumGrowthGlobal(\r\n        address trader,\r\n        address baseToken,\r\n        int256 lastTwPremiumGrowthGlobalX96\r\n    ) external;\r\n\r\n    /// @notice Settle trader's PnL in closed market\r\n    /// @dev Only used by `ClearingHouse`\r\n    /// @param trader The address of the trader\r\n    /// @param baseToken The address of the trader's base token\r\n    /// @return positionNotional Taker's position notional settled with closed price\r\n    /// @return openNotional Taker's open notional\r\n    /// @return realizedPnl Settled realized pnl\r\n    /// @return closedPrice The closed price of the closed market\r\n    function settlePositionInClosedMarket(address trader, address baseToken)\r\n        external\r\n        returns (\r\n            int256 positionNotional,\r\n            int256 openNotional,\r\n            int256 realizedPnl,\r\n            uint256 closedPrice\r\n        );\r\n\r\n    /// @notice Get `ClearingHouseConfig` address\r\n    /// @return clearingHouseConfig The address of ClearingHouseConfig\r\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\r\n\r\n    /// @notice Get `OrderBook` address\r\n    /// @return orderBook The address of OrderBook\r\n    function getOrderBook() external view returns (address orderBook);\r\n\r\n    /// @notice Get `Vault` address\r\n    /// @return vault The address of Vault\r\n    function getVault() external view returns (address vault);\r\n\r\n    /// @notice Get trader registered baseTokens\r\n    /// @param trader The address of trader\r\n    /// @return baseTokens The array of baseToken address\r\n    function getBaseTokens(address trader) external view returns (address[] memory baseTokens);\r\n\r\n    /// @notice Get trader account info\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return traderAccountInfo The baseToken account info of trader\r\n    function getAccountInfo(address trader, address baseToken)\r\n        external\r\n        view\r\n        returns (AccountMarket.Info memory traderAccountInfo);\r\n\r\n    /// @notice Get taker cost of trader's baseToken\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return openNotional The taker cost of trader's baseToken\r\n    function getTakerOpenNotional(address trader, address baseToken) external view returns (int256 openNotional);\r\n\r\n    /// @notice Get total cost of trader's baseToken\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return totalOpenNotional the amount of quote token paid for a position when opening\r\n    function getTotalOpenNotional(address trader, address baseToken) external view returns (int256 totalOpenNotional);\r\n\r\n    /// @notice Get total debt value of trader\r\n    /// @param trader The address of trader\r\n    /// @dev Total debt value will relate to `Vault.getFreeCollateral()`\r\n    /// @return totalDebtValue The debt value of trader\r\n    function getTotalDebtValue(address trader) external view returns (uint256 totalDebtValue);\r\n\r\n    /// @notice Get margin requirement to check whether trader will be able to liquidate\r\n    /// @dev This is different from `Vault._getTotalMarginRequirement()`, which is for freeCollateral calculation\r\n    /// @param trader The address of trader\r\n    /// @return marginRequirementForLiquidation It is compared with `ClearingHouse.getAccountValue` which is also an int\r\n    function getMarginRequirementForLiquidation(address trader)\r\n        external\r\n        view\r\n        returns (int256 marginRequirementForLiquidation);\r\n\r\n    /// @notice Get owedRealizedPnl, unrealizedPnl and pending fee\r\n    /// @param trader The address of trader\r\n    /// @return owedRealizedPnl the pnl realized already but stored temporarily in AccountBalance\r\n    /// @return unrealizedPnl the pnl not yet realized\r\n    /// @return pendingFee the pending fee of maker earned\r\n    function getPnlAndPendingFee(address trader)\r\n        external\r\n        view\r\n        returns (\r\n            int256 owedRealizedPnl,\r\n            int256 unrealizedPnl,\r\n            uint256 pendingFee\r\n        );\r\n\r\n    /// @notice Check trader has open order in open/closed market.\r\n    /// @param trader The address of trader\r\n    /// @return True of false\r\n    function hasOrder(address trader) external view returns (bool);\r\n\r\n    /// @notice Get trader base amount\r\n    /// @dev `base amount = takerPositionSize - orderBaseDebt`\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return baseAmount The base amount of trader's baseToken market\r\n    function getBase(address trader, address baseToken) external view returns (int256 baseAmount);\r\n\r\n    /// @notice Get trader quote amount\r\n    /// @dev `quote amount = takerOpenNotional - orderQuoteDebt`\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return quoteAmount The quote amount of trader's baseToken market\r\n    function getQuote(address trader, address baseToken) external view returns (int256 quoteAmount);\r\n\r\n    /// @notice Get taker position size of trader's baseToken market\r\n    /// @dev This will only has taker position, can get maker impermanent position through `getTotalPositionSize`\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return takerPositionSize The taker position size of trader's baseToken market\r\n    function getTakerPositionSize(address trader, address baseToken) external view returns (int256 takerPositionSize);\r\n\r\n    /// @notice Get total position size of trader's baseToken market\r\n    /// @dev `total position size = taker position size + maker impermanent position size`\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return totalPositionSize The total position size of trader's baseToken market\r\n    function getTotalPositionSize(address trader, address baseToken) external view returns (int256 totalPositionSize);\r\n\r\n    /// @notice Get total position value of trader's baseToken market\r\n    /// @dev A negative returned value is only be used when calculating pnl,\r\n    /// @dev we use `15 mins` twap to calc position value\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return totalPositionValue Total position value of trader's baseToken market\r\n    function getTotalPositionValue(address trader, address baseToken) external view returns (int256 totalPositionValue);\r\n\r\n    /// @notice Get all market position abs value of trader\r\n    /// @param trader The address of trader\r\n    /// @return totalAbsPositionValue Sum up positions value of every market\r\n    function getTotalAbsPositionValue(address trader) external view returns (uint256 totalAbsPositionValue);\r\n\r\n    /// @notice Get liquidatable position size of trader's baseToken market\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @param accountValue The account value of trader\r\n    /// @return liquidatablePositionSize The liquidatable position size of trader's baseToken market\r\n    function getLiquidatablePositionSize(\r\n        address trader,\r\n        address baseToken,\r\n        int256 accountValue\r\n    ) external view returns (int256);\r\n}\r\n"
    },
    "contracts/base/SafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { ContextUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\n\r\nabstract contract SafeOwnable is ContextUpgradeable {\r\n    address private _owner;\r\n    address private _candidate;\r\n\r\n    // __gap is reserved storage\r\n    uint256[50] private __gap;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        // caller not owner\r\n        require(owner() == _msgSender(), \"SO_CNO\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __SafeOwnable_init() internal initializer {\r\n        __Context_init();\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        // emitting event first to avoid caching values\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n        _candidate = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Set ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setOwner(address newOwner) external onlyOwner {\r\n        // newOwner is 0\r\n        require(newOwner != address(0), \"SO_NW0\");\r\n        // same as original\r\n        require(newOwner != _owner, \"SO_SAO\");\r\n        // same as candidate\r\n        require(newOwner != _candidate, \"SO_SAC\");\r\n\r\n        _candidate = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\r\n     * Can only be called by the new owner.\r\n     */\r\n    function updateOwner() external {\r\n        // candidate is zero\r\n        require(_candidate != address(0), \"SO_C0\");\r\n        // caller is not candidate\r\n        require(_candidate == _msgSender(), \"SO_CNC\");\r\n\r\n        // emitting event first to avoid caching values\r\n        emit OwnershipTransferred(_owner, _candidate);\r\n        _owner = _candidate;\r\n        _candidate = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the candidate that can become the owner.\r\n     */\r\n    function candidate() external view returns (address) {\r\n        return _candidate;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/lib/Funding.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { Tick } from \"./Tick.sol\";\r\nimport { PerpMath } from \"./PerpMath.sol\";\r\nimport { OpenOrder } from \"./OpenOrder.sol\";\r\nimport { PerpSafeCast } from \"./PerpSafeCast.sol\";\r\nimport { PerpFixedPoint96 } from \"./PerpFixedPoint96.sol\";\r\nimport { TickMath } from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\r\nimport { LiquidityAmounts } from \"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\n\r\nlibrary Funding {\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for uint128;\r\n    using SignedSafeMathUpgradeable for int256;\r\n\r\n    //\r\n    // STRUCT\r\n    //\r\n\r\n    /// @dev tw: time-weighted\r\n    /// @param twPremiumX96 overflow inspection (as twPremiumX96 > twPremiumDivBySqrtPriceX96):\r\n    //         max = 2 ^ (255 - 96) = 2 ^ 159 = 7.307508187E47\r\n    //         assume premium = 10000, time = 10 year = 60 * 60 * 24 * 365 * 10 -> twPremium = 3.1536E12\r\n    struct Growth {\r\n        int256 twPremiumX96;\r\n        int256 twPremiumDivBySqrtPriceX96;\r\n    }\r\n\r\n    //\r\n    // CONSTANT\r\n    //\r\n\r\n    /// @dev block-based funding is calculated as: premium * timeFraction / 1 day, for 1 day as the default period\r\n    int256 internal constant _DEFAULT_FUNDING_PERIOD = 1 days;\r\n\r\n    //\r\n    // INTERNAL PURE\r\n    //\r\n\r\n    function calcPendingFundingPaymentWithLiquidityCoefficient(\r\n        int256 baseBalance,\r\n        int256 twPremiumGrowthGlobalX96,\r\n        Growth memory fundingGrowthGlobal,\r\n        int256 liquidityCoefficientInFundingPayment\r\n    ) internal pure returns (int256) {\r\n        int256 balanceCoefficientInFundingPayment =\r\n            PerpMath.mulDiv(\r\n                baseBalance,\r\n                fundingGrowthGlobal.twPremiumX96.sub(twPremiumGrowthGlobalX96),\r\n                uint256(PerpFixedPoint96._IQ96)\r\n            );\r\n\r\n        return\r\n            liquidityCoefficientInFundingPayment.add(balanceCoefficientInFundingPayment).div(_DEFAULT_FUNDING_PERIOD);\r\n    }\r\n\r\n    /// @dev the funding payment of an order/liquidity is composed of\r\n    ///      1. funding accrued inside the range 2. funding accrued below the range\r\n    ///      there is no funding when the price goes above the range, as liquidity is all swapped into quoteToken\r\n    /// @return liquidityCoefficientInFundingPayment the funding payment of an order/liquidity\r\n    function calcLiquidityCoefficientInFundingPaymentByOrder(\r\n        OpenOrder.Info memory order,\r\n        Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo\r\n    ) internal pure returns (int256) {\r\n        uint160 sqrtPriceX96AtUpperTick = TickMath.getSqrtRatioAtTick(order.upperTick);\r\n\r\n        // base amount below the range\r\n        uint256 baseAmountBelow =\r\n            LiquidityAmounts.getAmount0ForLiquidity(\r\n                TickMath.getSqrtRatioAtTick(order.lowerTick),\r\n                sqrtPriceX96AtUpperTick,\r\n                order.liquidity\r\n            );\r\n        // funding below the range\r\n        int256 fundingBelowX96 =\r\n            baseAmountBelow.toInt256().mul(\r\n                fundingGrowthRangeInfo.twPremiumGrowthBelowX96.sub(order.lastTwPremiumGrowthBelowX96)\r\n            );\r\n\r\n        // funding inside the range =\r\n        // liquidity * (ΔtwPremiumDivBySqrtPriceGrowthInsideX96 - ΔtwPremiumGrowthInsideX96 / sqrtPriceAtUpperTick)\r\n        int256 fundingInsideX96 =\r\n            order.liquidity.toInt256().mul(\r\n                // ΔtwPremiumDivBySqrtPriceGrowthInsideX96\r\n                fundingGrowthRangeInfo\r\n                    .twPremiumDivBySqrtPriceGrowthInsideX96\r\n                    .sub(order.lastTwPremiumDivBySqrtPriceGrowthInsideX96)\r\n                    .sub(\r\n                    // ΔtwPremiumGrowthInsideX96\r\n                    PerpMath.mulDiv(\r\n                        fundingGrowthRangeInfo.twPremiumGrowthInsideX96.sub(order.lastTwPremiumGrowthInsideX96),\r\n                        PerpFixedPoint96._IQ96,\r\n                        sqrtPriceX96AtUpperTick\r\n                    )\r\n                )\r\n            );\r\n\r\n        return fundingBelowX96.add(fundingInsideX96).div(PerpFixedPoint96._IQ96);\r\n    }\r\n}\r\n"
    },
    "contracts/lib/Tick.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nlibrary Tick {\r\n    struct GrowthInfo {\r\n        uint256 feeX128;\r\n        int256 twPremiumX96;\r\n        int256 twPremiumDivBySqrtPriceX96;\r\n    }\r\n\r\n    struct FundingGrowthRangeInfo {\r\n        int256 twPremiumGrowthInsideX96;\r\n        int256 twPremiumGrowthBelowX96;\r\n        int256 twPremiumDivBySqrtPriceGrowthInsideX96;\r\n    }\r\n\r\n    /// @dev call this function only if (liquidityGrossBefore == 0 && liquidityDelta != 0)\r\n    /// @dev per Uniswap: we assume that all growths before a tick is initialized happen \"below\" the tick\r\n    function initialize(\r\n        mapping(int24 => GrowthInfo) storage self,\r\n        int24 tick,\r\n        int24 currentTick,\r\n        GrowthInfo memory globalGrowthInfo\r\n    ) internal {\r\n        if (tick <= currentTick) {\r\n            GrowthInfo storage growthInfo = self[tick];\r\n            growthInfo.feeX128 = globalGrowthInfo.feeX128;\r\n            growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96;\r\n            growthInfo.twPremiumDivBySqrtPriceX96 = globalGrowthInfo.twPremiumDivBySqrtPriceX96;\r\n        }\r\n    }\r\n\r\n    function cross(\r\n        mapping(int24 => GrowthInfo) storage self,\r\n        int24 tick,\r\n        GrowthInfo memory globalGrowthInfo\r\n    ) internal {\r\n        GrowthInfo storage growthInfo = self[tick];\r\n        growthInfo.feeX128 = globalGrowthInfo.feeX128 - growthInfo.feeX128;\r\n        growthInfo.twPremiumX96 = globalGrowthInfo.twPremiumX96 - growthInfo.twPremiumX96;\r\n        growthInfo.twPremiumDivBySqrtPriceX96 =\r\n            globalGrowthInfo.twPremiumDivBySqrtPriceX96 -\r\n            growthInfo.twPremiumDivBySqrtPriceX96;\r\n    }\r\n\r\n    function clear(mapping(int24 => GrowthInfo) storage self, int24 tick) internal {\r\n        delete self[tick];\r\n    }\r\n\r\n    /// @dev all values in this function are scaled by 2^128 (X128), thus adding the suffix to external params\r\n    /// @return feeGrowthInsideX128 this value can underflow per Tick.feeGrowthOutside specs\r\n    function getFeeGrowthInsideX128(\r\n        mapping(int24 => GrowthInfo) storage self,\r\n        int24 lowerTick,\r\n        int24 upperTick,\r\n        int24 currentTick,\r\n        uint256 feeGrowthGlobalX128\r\n    ) internal view returns (uint256 feeGrowthInsideX128) {\r\n        uint256 lowerFeeGrowthOutside = self[lowerTick].feeX128;\r\n        uint256 upperFeeGrowthOutside = self[upperTick].feeX128;\r\n\r\n        uint256 feeGrowthBelow =\r\n            currentTick >= lowerTick ? lowerFeeGrowthOutside : feeGrowthGlobalX128 - lowerFeeGrowthOutside;\r\n        uint256 feeGrowthAbove =\r\n            currentTick < upperTick ? upperFeeGrowthOutside : feeGrowthGlobalX128 - upperFeeGrowthOutside;\r\n\r\n        return feeGrowthGlobalX128 - feeGrowthBelow - feeGrowthAbove;\r\n    }\r\n\r\n    /// @return all values returned can underflow per feeGrowthOutside specs;\r\n    ///         see https://www.notion.so/32990980ba8b43859f6d2541722a739b\r\n    function getAllFundingGrowth(\r\n        mapping(int24 => GrowthInfo) storage self,\r\n        int24 lowerTick,\r\n        int24 upperTick,\r\n        int24 currentTick,\r\n        int256 twPremiumGrowthGlobalX96,\r\n        int256 twPremiumDivBySqrtPriceGrowthGlobalX96\r\n    ) internal view returns (FundingGrowthRangeInfo memory) {\r\n        GrowthInfo storage lowerTickGrowthInfo = self[lowerTick];\r\n        GrowthInfo storage upperTickGrowthInfo = self[upperTick];\r\n\r\n        int256 lowerTwPremiumGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumX96;\r\n        int256 upperTwPremiumGrowthOutsideX96 = upperTickGrowthInfo.twPremiumX96;\r\n\r\n        FundingGrowthRangeInfo memory fundingGrowthRangeInfo;\r\n        fundingGrowthRangeInfo.twPremiumGrowthBelowX96 = currentTick >= lowerTick\r\n            ? lowerTwPremiumGrowthOutsideX96\r\n            : twPremiumGrowthGlobalX96 - lowerTwPremiumGrowthOutsideX96;\r\n        int256 twPremiumGrowthAboveX96 =\r\n            currentTick < upperTick\r\n                ? upperTwPremiumGrowthOutsideX96\r\n                : twPremiumGrowthGlobalX96 - upperTwPremiumGrowthOutsideX96;\r\n\r\n        int256 lowerTwPremiumDivBySqrtPriceGrowthOutsideX96 = lowerTickGrowthInfo.twPremiumDivBySqrtPriceX96;\r\n        int256 upperTwPremiumDivBySqrtPriceGrowthOutsideX96 = upperTickGrowthInfo.twPremiumDivBySqrtPriceX96;\r\n\r\n        int256 twPremiumDivBySqrtPriceGrowthBelowX96 =\r\n            currentTick >= lowerTick\r\n                ? lowerTwPremiumDivBySqrtPriceGrowthOutsideX96\r\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - lowerTwPremiumDivBySqrtPriceGrowthOutsideX96;\r\n        int256 twPremiumDivBySqrtPriceGrowthAboveX96 =\r\n            currentTick < upperTick\r\n                ? upperTwPremiumDivBySqrtPriceGrowthOutsideX96\r\n                : twPremiumDivBySqrtPriceGrowthGlobalX96 - upperTwPremiumDivBySqrtPriceGrowthOutsideX96;\r\n\r\n        fundingGrowthRangeInfo.twPremiumGrowthInsideX96 =\r\n            twPremiumGrowthGlobalX96 -\r\n            fundingGrowthRangeInfo.twPremiumGrowthBelowX96 -\r\n            twPremiumGrowthAboveX96;\r\n        fundingGrowthRangeInfo.twPremiumDivBySqrtPriceGrowthInsideX96 =\r\n            twPremiumDivBySqrtPriceGrowthGlobalX96 -\r\n            twPremiumDivBySqrtPriceGrowthBelowX96 -\r\n            twPremiumDivBySqrtPriceGrowthAboveX96;\r\n\r\n        return fundingGrowthRangeInfo;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/OpenOrder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nlibrary OpenOrder {\r\n    /// @param lastFeeGrowthInsideX128 fees in quote token recorded in Exchange\r\n    ///        because of block-based funding, quote-only and customized fee, all fees are in quote token\r\n    struct Info {\r\n        uint128 liquidity;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint256 lastFeeGrowthInsideX128;\r\n        int256 lastTwPremiumGrowthInsideX96;\r\n        int256 lastTwPremiumGrowthBelowX96;\r\n        int256 lastTwPremiumDivBySqrtPriceGrowthInsideX96;\r\n        uint256 baseDebt;\r\n        uint256 quoteDebt;\r\n    }\r\n\r\n    function calcOrderKey(\r\n        address trader,\r\n        address baseToken,\r\n        int24 lowerTick,\r\n        int24 upperTick\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(trader, baseToken, lowerTick, upperTick));\r\n    }\r\n}\r\n"
    },
    "contracts/lib/PerpFixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nlibrary PerpFixedPoint96 {\r\n    int256 internal constant _IQ96 = 0x1000000000000000000000000;\r\n}\r\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(MAX_TICK), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "contracts/lib/AccountMarket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nlibrary AccountMarket {\r\n    /// @param lastTwPremiumGrowthGlobalX96 the last time weighted premiumGrowthGlobalX96\r\n    struct Info {\r\n        int256 takerPositionSize;\r\n        int256 takerOpenNotional;\r\n        int256 lastTwPremiumGrowthGlobalX96;\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestAccountBalance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../AccountBalance.sol\";\r\nimport \"../lib/Funding.sol\";\r\n\r\ncontract TestAccountBalance is AccountBalance {\r\n    using AddressUpgradeable for address;\r\n\r\n    uint256 private _testBlockTimestamp;\r\n\r\n    // copy paste from AccountBalance.initialize to avoid it to be public\r\n    function __TestAccountBalance_init(address clearingHouseConfigArg, address orderBookArg) external initializer {\r\n        // ClearingHouseConfig address is not contract\r\n        require(clearingHouseConfigArg.isContract(), \"AB_ENC\");\r\n\r\n        // OrderBook is not contarct\r\n        require(orderBookArg.isContract(), \"AB_OBNC\");\r\n\r\n        __ClearingHouseCallee_init();\r\n\r\n        _clearingHouseConfig = clearingHouseConfigArg;\r\n        _orderBook = orderBookArg;\r\n    }\r\n\r\n    function setBlockTimestamp(uint256 blockTimestamp) external {\r\n        _testBlockTimestamp = blockTimestamp;\r\n    }\r\n\r\n    function getBlockTimestamp() external view returns (uint256) {\r\n        return _testBlockTimestamp;\r\n    }\r\n\r\n    function _blockTimestamp() internal view override returns (uint256) {\r\n        return _testBlockTimestamp;\r\n    }\r\n\r\n    function getNetQuoteBalanceAndPendingFee(address trader)\r\n        external\r\n        view\r\n        returns (int256 netQuoteBalance, uint256 pendingFee)\r\n    {\r\n        return _getNetQuoteBalanceAndPendingFee(trader);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { PerpSafeCast } from \"../lib/PerpSafeCast.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\nimport \"../ClearingHouse.sol\";\r\nimport \"./TestAccountBalance.sol\";\r\nimport \"./TestExchange.sol\";\r\n\r\ncontract TestClearingHouse is ClearingHouse {\r\n    using PerpSafeCast for uint256;\r\n    using SignedSafeMathUpgradeable for int256;\r\n\r\n    uint256 private _testBlockTimestamp;\r\n\r\n    function __TestClearingHouse_init(\r\n        address configArg,\r\n        address vaultArg,\r\n        address quoteTokenArg,\r\n        address uniV3FactoryArg,\r\n        address exchangeArg,\r\n        address accountBalanceArg,\r\n        address insuranceFundArg\r\n    ) external initializer {\r\n        ClearingHouse.initialize(\r\n            configArg,\r\n            vaultArg,\r\n            quoteTokenArg,\r\n            uniV3FactoryArg,\r\n            exchangeArg,\r\n            accountBalanceArg,\r\n            insuranceFundArg\r\n        );\r\n        _testBlockTimestamp = block.timestamp;\r\n    }\r\n\r\n    function setBlockTimestamp(uint256 blockTimestamp) external {\r\n        TestAccountBalance(_accountBalance).setBlockTimestamp(blockTimestamp);\r\n        TestExchange(_exchange).setBlockTimestamp(blockTimestamp);\r\n        _testBlockTimestamp = blockTimestamp;\r\n    }\r\n\r\n    function getBlockTimestamp() external view returns (uint256) {\r\n        return _testBlockTimestamp;\r\n    }\r\n\r\n    function _blockTimestamp() internal view override returns (uint256) {\r\n        return _testBlockTimestamp;\r\n    }\r\n\r\n    function setDelegateApprovalUnsafe(address delegateApprovalArg) external onlyOwner {\r\n        _delegateApproval = delegateApprovalArg;\r\n        emit DelegateApprovalChanged(delegateApprovalArg);\r\n    }\r\n\r\n    //\r\n    // BELOW WERE LEGACY EXTERNAL FUNCTION, MOVE TO HERE FOR THE TESTING, CAN BE REMOVE LATER ONCE WE CLEAN THE TESTS\r\n    //\r\n\r\n    struct SwapParams {\r\n        address baseToken;\r\n        bool isBaseToQuote;\r\n        bool isExactInput;\r\n        uint256 amount;\r\n        uint160 sqrtPriceLimitX96; // price slippage protection\r\n    }\r\n\r\n    function swap(SwapParams memory params) external nonReentrant() returns (IExchange.SwapResponse memory) {\r\n        IAccountBalance(_accountBalance).registerBaseToken(_msgSender(), params.baseToken);\r\n\r\n        IExchange.SwapResponse memory response =\r\n            IExchange(_exchange).swap(\r\n                IExchange.SwapParams({\r\n                    trader: _msgSender(),\r\n                    baseToken: params.baseToken,\r\n                    isBaseToQuote: params.isBaseToQuote,\r\n                    isExactInput: params.isExactInput,\r\n                    isClose: false,\r\n                    amount: params.amount,\r\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\r\n                })\r\n            );\r\n\r\n        IAccountBalance(_accountBalance).modifyTakerBalance(\r\n            _msgSender(),\r\n            params.baseToken,\r\n            response.exchangedPositionSize,\r\n            response.exchangedPositionNotional.sub(response.fee.toInt256())\r\n        );\r\n\r\n        if (response.pnlToBeRealized != 0) {\r\n            IAccountBalance(_accountBalance).settleQuoteToOwedRealizedPnl(\r\n                _msgSender(),\r\n                params.baseToken,\r\n                response.pnlToBeRealized\r\n            );\r\n        }\r\n        return response;\r\n    }\r\n\r\n    function getTokenBalance(address trader, address baseToken) external view returns (int256, int256) {\r\n        int256 base = IAccountBalance(_accountBalance).getBase(trader, baseToken);\r\n        int256 quote = IAccountBalance(_accountBalance).getQuote(trader, baseToken);\r\n        return (base, quote);\r\n    }\r\n}\r\n"
    },
    "contracts/ClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\r\nimport { IUniswapV3Pool } from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport { IUniswapV3MintCallback } from \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\";\r\nimport { IUniswapV3SwapCallback } from \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\";\r\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\r\nimport { PerpSafeCast } from \"./lib/PerpSafeCast.sol\";\r\nimport { PerpMath } from \"./lib/PerpMath.sol\";\r\nimport { SettlementTokenMath } from \"./lib/SettlementTokenMath.sol\";\r\nimport { Funding } from \"./lib/Funding.sol\";\r\nimport { OwnerPausable } from \"./base/OwnerPausable.sol\";\r\nimport { IERC20Metadata } from \"./interface/IERC20Metadata.sol\";\r\nimport { IVault } from \"./interface/IVault.sol\";\r\nimport { IExchange } from \"./interface/IExchange.sol\";\r\nimport { IOrderBook } from \"./interface/IOrderBook.sol\";\r\nimport { IIndexPrice } from \"./interface/IIndexPrice.sol\";\r\nimport { IClearingHouseConfig } from \"./interface/IClearingHouseConfig.sol\";\r\nimport { IAccountBalance } from \"./interface/IAccountBalance.sol\";\r\nimport { IBaseToken } from \"./interface/IBaseToken.sol\";\r\nimport { IIndexPrice } from \"./interface/IIndexPrice.sol\";\r\nimport { IDelegateApproval } from \"./interface/IDelegateApproval.sol\";\r\nimport { BaseRelayRecipient } from \"./gsn/BaseRelayRecipient.sol\";\r\nimport { ClearingHouseStorageV2 } from \"./storage/ClearingHouseStorage.sol\";\r\nimport { BlockContext } from \"./base/BlockContext.sol\";\r\nimport { IClearingHouse } from \"./interface/IClearingHouse.sol\";\r\nimport { AccountMarket } from \"./lib/AccountMarket.sol\";\r\nimport { OpenOrder } from \"./lib/OpenOrder.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract ClearingHouse is\r\n    IUniswapV3MintCallback,\r\n    IUniswapV3SwapCallback,\r\n    IClearingHouse,\r\n    BlockContext,\r\n    ReentrancyGuardUpgradeable,\r\n    OwnerPausable,\r\n    BaseRelayRecipient,\r\n    ClearingHouseStorageV2\r\n{\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n    using SignedSafeMathUpgradeable for int256;\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for uint128;\r\n    using PerpSafeCast for int256;\r\n    using PerpMath for uint256;\r\n    using PerpMath for uint160;\r\n    using PerpMath for uint128;\r\n    using PerpMath for int256;\r\n    using SettlementTokenMath for int256;\r\n\r\n    //\r\n    // STRUCT\r\n    //\r\n\r\n    /// @param sqrtPriceLimitX96 tx will fill until it reaches this price but WON'T REVERT\r\n    struct InternalOpenPositionParams {\r\n        address trader;\r\n        address baseToken;\r\n        bool isBaseToQuote;\r\n        bool isExactInput;\r\n        bool isClose;\r\n        uint256 amount;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct InternalCheckSlippageParams {\r\n        bool isBaseToQuote;\r\n        bool isExactInput;\r\n        uint256 base;\r\n        uint256 quote;\r\n        uint256 oppositeAmountBound;\r\n    }\r\n\r\n    //\r\n    // MODIFIER\r\n    //\r\n\r\n    modifier checkDeadline(uint256 deadline) {\r\n        // transaction expires\r\n        require(_blockTimestamp() <= deadline, \"CH_TE\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    /// @dev this function is public for testing\r\n    // solhint-disable-next-line func-order\r\n    function initialize(\r\n        address clearingHouseConfigArg,\r\n        address vaultArg,\r\n        address quoteTokenArg,\r\n        address uniV3FactoryArg,\r\n        address exchangeArg,\r\n        address accountBalanceArg,\r\n        address insuranceFundArg\r\n    ) public initializer {\r\n        // CH_VANC: Vault address is not contract\r\n        require(vaultArg.isContract(), \"CH_VANC\");\r\n        // CH_QANC: QuoteToken address is not contract\r\n        require(quoteTokenArg.isContract(), \"CH_QANC\");\r\n        // CH_QDN18: QuoteToken decimals is not 18\r\n        require(IERC20Metadata(quoteTokenArg).decimals() == 18, \"CH_QDN18\");\r\n        // CH_UANC: UniV3Factory address is not contract\r\n        require(uniV3FactoryArg.isContract(), \"CH_UANC\");\r\n        // ClearingHouseConfig address is not contract\r\n        require(clearingHouseConfigArg.isContract(), \"CH_CCNC\");\r\n        // AccountBalance is not contract\r\n        require(accountBalanceArg.isContract(), \"CH_ABNC\");\r\n        // CH_ENC: Exchange is not contract\r\n        require(exchangeArg.isContract(), \"CH_ENC\");\r\n        // CH_IFANC: InsuranceFund address is not contract\r\n        require(insuranceFundArg.isContract(), \"CH_IFANC\");\r\n\r\n        address orderBookArg = IExchange(exchangeArg).getOrderBook();\r\n        // orderBook is not contract\r\n        require(orderBookArg.isContract(), \"CH_OBNC\");\r\n\r\n        __ReentrancyGuard_init();\r\n        __OwnerPausable_init();\r\n\r\n        _clearingHouseConfig = clearingHouseConfigArg;\r\n        _vault = vaultArg;\r\n        _quoteToken = quoteTokenArg;\r\n        _uniswapV3Factory = uniV3FactoryArg;\r\n        _exchange = exchangeArg;\r\n        _orderBook = orderBookArg;\r\n        _accountBalance = accountBalanceArg;\r\n        _insuranceFund = insuranceFundArg;\r\n\r\n        _settlementTokenDecimals = IVault(_vault).decimals();\r\n    }\r\n\r\n    /// @dev remove to reduce bytecode size, might add back when we need it\r\n    // // solhint-disable-next-line func-order\r\n    // function setTrustedForwarder(address trustedForwarderArg) external onlyOwner {\r\n    //     // CH_TFNC: TrustedForwarder is not contract\r\n    //     require(trustedForwarderArg.isContract(), \"CH_TFNC\");\r\n    //     // TrustedForwarderUpdated event is emitted in BaseRelayRecipient\r\n    //     _setTrustedForwarder(trustedForwarderArg);\r\n    // }\r\n\r\n    function setDelegateApproval(address delegateApprovalArg) external onlyOwner {\r\n        // CH_DANC: DelegateApproval is not contract\r\n        require(delegateApprovalArg.isContract(), \"CH_DANC\");\r\n        _delegateApproval = delegateApprovalArg;\r\n        emit DelegateApprovalChanged(delegateApprovalArg);\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function addLiquidity(AddLiquidityParams calldata params)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        checkDeadline(params.deadline)\r\n        returns (AddLiquidityResponse memory)\r\n    {\r\n        // input requirement checks:\r\n        //   baseToken: in Exchange.settleFunding()\r\n        //   base & quote: in LiquidityAmounts.getLiquidityForAmounts() -> FullMath.mulDiv()\r\n        //   lowerTick & upperTick: in UniswapV3Pool._modifyPosition()\r\n        //   minBase, minQuote & deadline: here\r\n\r\n        _checkMarketOpen(params.baseToken);\r\n\r\n        // This condition is to prevent the intentional bad debt attack through price manipulation.\r\n        // CH_OMPS: Over the maximum price spread\r\n        require(!IExchange(_exchange).isOverPriceSpread(params.baseToken), \"CH_OMPS\");\r\n\r\n        // CH_DUTB: Disable useTakerBalance\r\n        require(!params.useTakerBalance, \"CH_DUTB\");\r\n\r\n        address trader = _msgSender();\r\n        // register token if it's the first time\r\n        _registerBaseToken(trader, params.baseToken);\r\n\r\n        // must settle funding first\r\n        Funding.Growth memory fundingGrowthGlobal = _settleFunding(trader, params.baseToken);\r\n\r\n        // note that we no longer check available tokens here because CH will always auto-mint in UniswapV3MintCallback\r\n        IOrderBook.AddLiquidityResponse memory response =\r\n            IOrderBook(_orderBook).addLiquidity(\r\n                IOrderBook.AddLiquidityParams({\r\n                    trader: trader,\r\n                    baseToken: params.baseToken,\r\n                    base: params.base,\r\n                    quote: params.quote,\r\n                    lowerTick: params.lowerTick,\r\n                    upperTick: params.upperTick,\r\n                    fundingGrowthGlobal: fundingGrowthGlobal\r\n                })\r\n            );\r\n\r\n        _checkSlippageAfterLiquidityChange(response.base, params.minBase, response.quote, params.minQuote);\r\n\r\n        // if !useTakerBalance, takerBalance won't change, only need to collects fee to oweRealizedPnl\r\n        if (params.useTakerBalance) {\r\n            bool isBaseAdded = response.base != 0;\r\n\r\n            // can't add liquidity within range from take position\r\n            require(isBaseAdded != (response.quote != 0), \"CH_CALWRFTP\");\r\n\r\n            AccountMarket.Info memory accountMarketInfo =\r\n                IAccountBalance(_accountBalance).getAccountInfo(trader, params.baseToken);\r\n\r\n            // the signs of removedPositionSize and removedOpenNotional are always the opposite.\r\n            int256 removedPositionSize;\r\n            int256 removedOpenNotional;\r\n            if (isBaseAdded) {\r\n                // taker base not enough\r\n                require(accountMarketInfo.takerPositionSize >= response.base.toInt256(), \"CH_TBNE\");\r\n\r\n                removedPositionSize = response.base.neg256();\r\n\r\n                // move quote debt from taker to maker:\r\n                // takerOpenNotional(-) * removedPositionSize(-) / takerPositionSize(+)\r\n\r\n                // overflow inspection:\r\n                // Assume collateral is 2.406159692E28 and index price is 1e-18\r\n                // takerOpenNotional ~= 10 * 2.406159692E28 = 2.406159692E29 --> x\r\n                // takerPositionSize ~= takerOpenNotional/index price = x * 1e18 = 2.4061597E38\r\n                // max of removedPositionSize = takerPositionSize = 2.4061597E38\r\n                // (takerOpenNotional * removedPositionSize) < 2^255\r\n                // 2.406159692E29 ^2 * 1e18 < 2^255\r\n                removedOpenNotional = accountMarketInfo.takerOpenNotional.mul(removedPositionSize).div(\r\n                    accountMarketInfo.takerPositionSize\r\n                );\r\n            } else {\r\n                // taker quote not enough\r\n                require(accountMarketInfo.takerOpenNotional >= response.quote.toInt256(), \"CH_TQNE\");\r\n\r\n                removedOpenNotional = response.quote.neg256();\r\n\r\n                // move base debt from taker to maker:\r\n                // takerPositionSize(-) * removedOpenNotional(-) / takerOpenNotional(+)\r\n                // overflow inspection: same as above\r\n                removedPositionSize = accountMarketInfo.takerPositionSize.mul(removedOpenNotional).div(\r\n                    accountMarketInfo.takerOpenNotional\r\n                );\r\n            }\r\n\r\n            // update orderDebt to record the cost of this order\r\n            IOrderBook(_orderBook).updateOrderDebt(\r\n                OpenOrder.calcOrderKey(trader, params.baseToken, params.lowerTick, params.upperTick),\r\n                removedPositionSize,\r\n                removedOpenNotional\r\n            );\r\n\r\n            // update takerBalances as we're using takerBalances to provide liquidity\r\n            (, int256 takerOpenNotional) =\r\n                IAccountBalance(_accountBalance).modifyTakerBalance(\r\n                    trader,\r\n                    params.baseToken,\r\n                    removedPositionSize,\r\n                    removedOpenNotional\r\n                );\r\n\r\n            uint256 sqrtPrice = _getSqrtMarkX96(params.baseToken);\r\n            _emitPositionChanged(\r\n                trader,\r\n                params.baseToken,\r\n                removedPositionSize, // exchangedPositionSize\r\n                removedOpenNotional, // exchangedPositionNotional\r\n                0, // fee\r\n                takerOpenNotional, // openNotional\r\n                0, // realizedPnl\r\n                sqrtPrice // sqrtPriceAfterX96\r\n            );\r\n        }\r\n\r\n        // fees always have to be collected to owedRealizedPnl, as long as there is a change in liquidity\r\n        _modifyOwedRealizedPnl(trader, response.fee.toInt256());\r\n\r\n        // after token balances are updated, we can check if there is enough free collateral\r\n        _requireEnoughFreeCollateral(trader);\r\n\r\n        _emitLiquidityChanged(\r\n            trader,\r\n            params.baseToken,\r\n            _quoteToken,\r\n            params.lowerTick,\r\n            params.upperTick,\r\n            response.base.toInt256(),\r\n            response.quote.toInt256(),\r\n            response.liquidity.toInt128(),\r\n            response.fee\r\n        );\r\n\r\n        return\r\n            AddLiquidityResponse({\r\n                base: response.base,\r\n                quote: response.quote,\r\n                fee: response.fee,\r\n                liquidity: response.liquidity\r\n            });\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function removeLiquidity(RemoveLiquidityParams calldata params)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        checkDeadline(params.deadline)\r\n        returns (RemoveLiquidityResponse memory)\r\n    {\r\n        // input requirement checks:\r\n        //   baseToken: in Exchange.settleFunding()\r\n        //   lowerTick & upperTick: in UniswapV3Pool._modifyPosition()\r\n        //   liquidity: in LiquidityMath.addDelta()\r\n        //   minBase, minQuote & deadline: here\r\n\r\n        // CH_MP: Market paused\r\n        require(!IBaseToken(params.baseToken).isPaused(), \"CH_MP\");\r\n\r\n        address trader = _msgSender();\r\n\r\n        // must settle funding first\r\n        _settleFunding(trader, params.baseToken);\r\n\r\n        IOrderBook.RemoveLiquidityResponse memory response =\r\n            _removeLiquidity(\r\n                IOrderBook.RemoveLiquidityParams({\r\n                    maker: trader,\r\n                    baseToken: params.baseToken,\r\n                    lowerTick: params.lowerTick,\r\n                    upperTick: params.upperTick,\r\n                    liquidity: params.liquidity\r\n                })\r\n            );\r\n\r\n        _checkSlippageAfterLiquidityChange(response.base, params.minBase, response.quote, params.minQuote);\r\n\r\n        _modifyPositionAndRealizePnl(\r\n            trader,\r\n            params.baseToken,\r\n            response.takerBase, // exchangedPositionSize\r\n            response.takerQuote, // exchangedPositionNotional\r\n            response.fee, // makerFee\r\n            0 //takerFee\r\n        );\r\n\r\n        _emitLiquidityChanged(\r\n            trader,\r\n            params.baseToken,\r\n            _quoteToken,\r\n            params.lowerTick,\r\n            params.upperTick,\r\n            response.base.neg256(),\r\n            response.quote.neg256(),\r\n            params.liquidity.neg128(),\r\n            response.fee\r\n        );\r\n\r\n        return RemoveLiquidityResponse({ quote: response.quote, base: response.base, fee: response.fee });\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function settleAllFunding(address trader) external override {\r\n        // only vault or trader\r\n        // vault must check msg.sender == trader when calling settleAllFunding\r\n        require(_msgSender() == _vault || _msgSender() == trader, \"CH_OVOT\");\r\n\r\n        address[] memory baseTokens = IAccountBalance(_accountBalance).getBaseTokens(trader);\r\n        uint256 baseTokenLength = baseTokens.length;\r\n        for (uint256 i = 0; i < baseTokenLength; i++) {\r\n            _settleFunding(trader, baseTokens[i]);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function openPosition(OpenPositionParams memory params)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        checkDeadline(params.deadline)\r\n        returns (uint256 base, uint256 quote)\r\n    {\r\n        // openPosition() is already published, returned types remain the same (without fee)\r\n        (base, quote, ) = _openPositionFor(_msgSender(), params);\r\n        return (base, quote);\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function openPositionFor(address trader, OpenPositionParams memory params)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        checkDeadline(params.deadline)\r\n        returns (\r\n            uint256 base,\r\n            uint256 quote,\r\n            uint256 fee\r\n        )\r\n    {\r\n        // CH_SHNAOPT: Sender Has No Approval to Open Position for Trader\r\n        require(IDelegateApproval(_delegateApproval).canOpenPositionFor(trader, _msgSender()), \"CH_SHNAOPT\");\r\n\r\n        return _openPositionFor(trader, params);\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function closePosition(ClosePositionParams calldata params)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        checkDeadline(params.deadline)\r\n        returns (uint256 base, uint256 quote)\r\n    {\r\n        // input requirement checks:\r\n        //   baseToken: in Exchange.settleFunding()\r\n        //   sqrtPriceLimitX96: X (this is not for slippage protection)\r\n        //   oppositeAmountBound: in _checkSlippage()\r\n        //   deadline: here\r\n        //   referralCode: X\r\n\r\n        _checkMarketOpen(params.baseToken);\r\n\r\n        address trader = _msgSender();\r\n\r\n        // must settle funding first\r\n        _settleFunding(trader, params.baseToken);\r\n\r\n        int256 positionSize = _getTakerPositionSafe(trader, params.baseToken);\r\n\r\n        // old position is long. when closing, it's baseToQuote && exactInput (sell exact base)\r\n        // old position is short. when closing, it's quoteToBase && exactOutput (buy exact base back)\r\n        bool isBaseToQuote = positionSize > 0;\r\n\r\n        IExchange.SwapResponse memory response =\r\n            _openPosition(\r\n                InternalOpenPositionParams({\r\n                    trader: trader,\r\n                    baseToken: params.baseToken,\r\n                    isBaseToQuote: isBaseToQuote,\r\n                    isExactInput: isBaseToQuote,\r\n                    isClose: true,\r\n                    amount: positionSize.abs(),\r\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\r\n                })\r\n            );\r\n\r\n        _checkSlippage(\r\n            InternalCheckSlippageParams({\r\n                isBaseToQuote: isBaseToQuote,\r\n                isExactInput: isBaseToQuote,\r\n                base: response.base,\r\n                quote: response.quote,\r\n                oppositeAmountBound: _getOppositeAmount(params.oppositeAmountBound, response.isPartialClose)\r\n            })\r\n        );\r\n\r\n        _referredPositionChanged(params.referralCode);\r\n\r\n        return (response.base, response.quote);\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function liquidate(\r\n        address trader,\r\n        address baseToken,\r\n        int256 positionSize\r\n    ) external override whenNotPaused nonReentrant {\r\n        _liquidate(trader, baseToken, positionSize);\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function liquidate(address trader, address baseToken) external override whenNotPaused nonReentrant {\r\n        // positionSizeToBeLiquidated = 0 means liquidating as much as possible\r\n        _liquidate(trader, baseToken, 0);\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function cancelExcessOrders(\r\n        address maker,\r\n        address baseToken,\r\n        bytes32[] calldata orderIds\r\n    ) external override whenNotPaused nonReentrant {\r\n        // input requirement checks:\r\n        //   maker: in _cancelExcessOrders()\r\n        //   baseToken: in Exchange.settleFunding()\r\n        //   orderIds: in OrderBook.removeLiquidityByIds()\r\n\r\n        _cancelExcessOrders(maker, baseToken, orderIds);\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function cancelAllExcessOrders(address maker, address baseToken) external override whenNotPaused nonReentrant {\r\n        // input requirement checks:\r\n        //   maker: in _cancelExcessOrders()\r\n        //   baseToken: in Exchange.settleFunding()\r\n        //   orderIds: in OrderBook.removeLiquidityByIds()\r\n\r\n        _cancelExcessOrders(maker, baseToken, _getOpenOrderIds(maker, baseToken));\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function quitMarket(address trader, address baseToken) external override returns (uint256 base, uint256 quote) {\r\n        // CH_MNC: Market not closed\r\n        require(IBaseToken(baseToken).isClosed(), \"CH_MNC\");\r\n        // CH_HOICM: Has order in closed market\r\n        require(_getOpenOrderIds(trader, baseToken).length == 0, \"CH_HOICM\");\r\n\r\n        int256 positionSize = _getTakerPositionSafe(trader, baseToken);\r\n\r\n        _settleFunding(trader, baseToken);\r\n\r\n        (int256 positionNotional, int256 openNotional, int256 realizedPnl, uint256 closedPrice) =\r\n            IAccountBalance(_accountBalance).settlePositionInClosedMarket(trader, baseToken);\r\n\r\n        emit PositionClosed(trader, baseToken, positionSize, positionNotional, openNotional, realizedPnl, closedPrice);\r\n\r\n        return (positionSize.abs(), positionNotional.abs());\r\n    }\r\n\r\n    /// @inheritdoc IUniswapV3MintCallback\r\n    /// @dev namings here follow Uniswap's convention\r\n    function uniswapV3MintCallback(\r\n        uint256 amount0Owed,\r\n        uint256 amount1Owed,\r\n        bytes calldata data\r\n    ) external override {\r\n        // input requirement checks:\r\n        //   amount0Owed: here\r\n        //   amount1Owed: here\r\n        //   data: X\r\n\r\n        // For caller validation purposes it would be more efficient and more reliable to use\r\n        // \"msg.sender\" instead of \"_msgSender()\" as contracts never call each other through GSN.\r\n        // not orderbook\r\n        require(msg.sender == _orderBook, \"CH_NOB\");\r\n\r\n        IOrderBook.MintCallbackData memory callbackData = abi.decode(data, (IOrderBook.MintCallbackData));\r\n\r\n        if (amount0Owed > 0) {\r\n            address token = IUniswapV3Pool(callbackData.pool).token0();\r\n            _requireTransfer(token, callbackData.pool, amount0Owed);\r\n        }\r\n        if (amount1Owed > 0) {\r\n            address token = IUniswapV3Pool(callbackData.pool).token1();\r\n            _requireTransfer(token, callbackData.pool, amount1Owed);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IUniswapV3SwapCallback\r\n    /// @dev namings here follow Uniswap's convention\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external override {\r\n        // input requirement checks:\r\n        //   amount0Delta: here\r\n        //   amount1Delta: here\r\n        //   data: X\r\n        // For caller validation purposes it would be more efficient and more reliable to use\r\n        // \"msg.sender\" instead of \"_msgSender()\" as contracts never call each other through GSN.\r\n        require(msg.sender == _exchange, \"CH_OE\");\r\n\r\n        // swaps entirely within 0-liquidity regions are not supported -> 0 swap is forbidden\r\n        // CH_F0S: forbidden 0 swap\r\n        require((amount0Delta > 0 && amount1Delta < 0) || (amount0Delta < 0 && amount1Delta > 0), \"CH_F0S\");\r\n\r\n        IExchange.SwapCallbackData memory callbackData = abi.decode(data, (IExchange.SwapCallbackData));\r\n        IUniswapV3Pool uniswapV3Pool = IUniswapV3Pool(callbackData.pool);\r\n\r\n        // amount0Delta & amount1Delta are guaranteed to be positive when being the amount to be paid\r\n        (address token, uint256 amountToPay) =\r\n            amount0Delta > 0\r\n                ? (uniswapV3Pool.token0(), uint256(amount0Delta))\r\n                : (uniswapV3Pool.token1(), uint256(amount1Delta));\r\n\r\n        // swap\r\n        _requireTransfer(token, callbackData.pool, amountToPay);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getQuoteToken() external view override returns (address) {\r\n        return _quoteToken;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getUniswapV3Factory() external view override returns (address) {\r\n        return _uniswapV3Factory;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getClearingHouseConfig() external view override returns (address) {\r\n        return _clearingHouseConfig;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getVault() external view override returns (address) {\r\n        return _vault;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getExchange() external view override returns (address) {\r\n        return _exchange;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getOrderBook() external view override returns (address) {\r\n        return _orderBook;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getAccountBalance() external view override returns (address) {\r\n        return _accountBalance;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getInsuranceFund() external view override returns (address) {\r\n        return _insuranceFund;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getDelegateApproval() external view override returns (address) {\r\n        return _delegateApproval;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouse\r\n    function getAccountValue(address trader) public view override returns (int256) {\r\n        return IVault(_vault).getAccountValue(trader).parseSettlementToken(_settlementTokenDecimals);\r\n    }\r\n\r\n    //\r\n    // INTERNAL NON-VIEW\r\n    //\r\n\r\n    function _requireTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        // CH_TF: Transfer failed\r\n        require(IERC20Metadata(token).transfer(to, amount), \"CH_TF\");\r\n    }\r\n\r\n    function _liquidate(\r\n        address trader,\r\n        address baseToken,\r\n        int256 positionSizeToBeLiquidated\r\n    ) internal {\r\n        _checkMarketOpen(baseToken);\r\n\r\n        // CH_CLWTISO: cannot liquidate when there is still order\r\n        require(!IAccountBalance(_accountBalance).hasOrder(trader), \"CH_CLWTISO\");\r\n\r\n        // CH_EAV: enough account value\r\n        require(_isLiquidatable(trader), \"CH_EAV\");\r\n\r\n        int256 positionSize = _getTakerPositionSafe(trader, baseToken);\r\n\r\n        // CH_WLD: wrong liquidation direction\r\n        require(positionSize.mul(positionSizeToBeLiquidated) >= 0, \"CH_WLD\");\r\n\r\n        address liquidator = _msgSender();\r\n\r\n        _registerBaseToken(liquidator, baseToken);\r\n\r\n        // must settle funding first\r\n        _settleFunding(trader, baseToken);\r\n        _settleFunding(liquidator, baseToken);\r\n\r\n        int256 accountValue = getAccountValue(trader);\r\n\r\n        // trader's position is closed at index price and pnl realized\r\n        (int256 liquidatedPositionSize, int256 liquidatedPositionNotional) =\r\n            _getLiquidatedPositionSizeAndNotional(trader, baseToken, accountValue, positionSizeToBeLiquidated);\r\n        _modifyPositionAndRealizePnl(trader, baseToken, liquidatedPositionSize, liquidatedPositionNotional, 0, 0);\r\n\r\n        // trader pays liquidation penalty\r\n        uint256 liquidationPenalty = liquidatedPositionNotional.abs().mulRatio(_getLiquidationPenaltyRatio());\r\n        _modifyOwedRealizedPnl(trader, liquidationPenalty.neg256());\r\n\r\n        // if there is bad debt, liquidation fees all go to liquidator; otherwise, split between liquidator & IF\r\n        uint256 liquidationFeeToLiquidator = liquidationPenalty.div(2);\r\n        uint256 liquidationFeeToIF;\r\n        if (accountValue < 0) {\r\n            liquidationFeeToLiquidator = liquidationPenalty;\r\n        } else {\r\n            liquidationFeeToIF = liquidationPenalty.sub(liquidationFeeToLiquidator);\r\n        }\r\n\r\n        _modifyOwedRealizedPnl(_insuranceFund, liquidationFeeToIF.toInt256());\r\n\r\n        // liquidator opens a position with liquidationFeeToLiquidator as a discount\r\n        // liquidator's openNotional = -liquidatedPositionNotional + liquidationFeeToLiquidator\r\n        int256 liquidatorExchangedPositionSize = liquidatedPositionSize.neg256();\r\n        int256 liquidatorExchangedPositionNotional =\r\n            liquidatedPositionNotional.neg256().add(liquidationFeeToLiquidator.toInt256());\r\n        // note that this function will realize pnl if it's reducing liquidator's existing position size\r\n        _modifyPositionAndRealizePnl(\r\n            liquidator,\r\n            baseToken,\r\n            liquidatorExchangedPositionSize, // exchangedPositionSize\r\n            liquidatorExchangedPositionNotional, // exchangedPositionNotional\r\n            0, // makerFee\r\n            0 // takerFee\r\n        );\r\n\r\n        _requireEnoughFreeCollateral(liquidator);\r\n\r\n        emit PositionLiquidated(\r\n            trader,\r\n            baseToken,\r\n            liquidatedPositionNotional.abs(), // positionNotional\r\n            liquidatedPositionSize.abs(), // positionSize\r\n            liquidationPenalty,\r\n            liquidator\r\n        );\r\n    }\r\n\r\n    /// @dev Calculate how much profit/loss we should realize,\r\n    ///      The profit/loss is calculated by exchangedPositionSize/exchangedPositionNotional amount\r\n    ///      and existing taker's base/quote amount.\r\n    function _modifyPositionAndRealizePnl(\r\n        address trader,\r\n        address baseToken,\r\n        int256 exchangedPositionSize,\r\n        int256 exchangedPositionNotional,\r\n        uint256 makerFee,\r\n        uint256 takerFee\r\n    ) internal {\r\n        int256 realizedPnl;\r\n        if (exchangedPositionSize != 0) {\r\n            realizedPnl = IExchange(_exchange).getPnlToBeRealized(\r\n                IExchange.RealizePnlParams({\r\n                    trader: trader,\r\n                    baseToken: baseToken,\r\n                    base: exchangedPositionSize,\r\n                    quote: exchangedPositionNotional\r\n                })\r\n            );\r\n        }\r\n\r\n        // realizedPnl is realized here\r\n        // will deregister baseToken if there is no position\r\n        _settleBalanceAndDeregister(\r\n            trader,\r\n            baseToken,\r\n            exchangedPositionSize, // takerBase\r\n            exchangedPositionNotional, // takerQuote\r\n            realizedPnl,\r\n            makerFee.toInt256()\r\n        );\r\n\r\n        _emitPositionChanged(\r\n            trader,\r\n            baseToken,\r\n            exchangedPositionSize,\r\n            exchangedPositionNotional,\r\n            takerFee, // fee\r\n            _getTakerOpenNotional(trader, baseToken), // openNotional\r\n            realizedPnl,\r\n            _getSqrtMarkX96(baseToken) // sqrtPriceAfterX96: no swap, so market price didn't change\r\n        );\r\n    }\r\n\r\n    /// @dev only cancel open orders if there are not enough free collateral with mmRatio\r\n    /// or account is able to being liquidated.\r\n    function _cancelExcessOrders(\r\n        address maker,\r\n        address baseToken,\r\n        bytes32[] memory orderIds\r\n    ) internal {\r\n        _checkMarketOpen(baseToken);\r\n\r\n        if (orderIds.length == 0) {\r\n            return;\r\n        }\r\n\r\n        // CH_NEXO: not excess orders\r\n        require(\r\n            (_getFreeCollateralByRatio(maker, IClearingHouseConfig(_clearingHouseConfig).getMmRatio()) < 0) ||\r\n                _isLiquidatable(maker),\r\n            \"CH_NEXO\"\r\n        );\r\n\r\n        // must settle funding first\r\n        _settleFunding(maker, baseToken);\r\n\r\n        IOrderBook.RemoveLiquidityResponse memory removeLiquidityResponse;\r\n\r\n        uint256 length = orderIds.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            OpenOrder.Info memory order = IOrderBook(_orderBook).getOpenOrderById(orderIds[i]);\r\n\r\n            // CH_ONBM: order is not belongs to this maker\r\n            require(\r\n                OpenOrder.calcOrderKey(maker, baseToken, order.lowerTick, order.upperTick) == orderIds[i],\r\n                \"CH_ONBM\"\r\n            );\r\n\r\n            IOrderBook.RemoveLiquidityResponse memory response =\r\n                _removeLiquidity(\r\n                    IOrderBook.RemoveLiquidityParams({\r\n                        maker: maker,\r\n                        baseToken: baseToken,\r\n                        lowerTick: order.lowerTick,\r\n                        upperTick: order.upperTick,\r\n                        liquidity: order.liquidity\r\n                    })\r\n                );\r\n\r\n            removeLiquidityResponse.base = removeLiquidityResponse.base.add(response.base);\r\n            removeLiquidityResponse.quote = removeLiquidityResponse.quote.add(response.quote);\r\n            removeLiquidityResponse.fee = removeLiquidityResponse.fee.add(response.fee);\r\n            removeLiquidityResponse.takerBase = removeLiquidityResponse.takerBase.add(response.takerBase);\r\n            removeLiquidityResponse.takerQuote = removeLiquidityResponse.takerQuote.add(response.takerQuote);\r\n\r\n            _emitLiquidityChanged(\r\n                maker,\r\n                baseToken,\r\n                _quoteToken,\r\n                order.lowerTick,\r\n                order.upperTick,\r\n                response.base.neg256(),\r\n                response.quote.neg256(),\r\n                order.liquidity.neg128(),\r\n                response.fee\r\n            );\r\n        }\r\n\r\n        _modifyPositionAndRealizePnl(\r\n            maker,\r\n            baseToken,\r\n            removeLiquidityResponse.takerBase,\r\n            removeLiquidityResponse.takerQuote,\r\n            removeLiquidityResponse.fee,\r\n            0\r\n        );\r\n    }\r\n\r\n    /// @dev explainer diagram for the relationship between exchangedPositionNotional, fee and openNotional:\r\n    ///      https://www.figma.com/file/xuue5qGH4RalX7uAbbzgP3/swap-accounting-and-events\r\n    function _openPosition(InternalOpenPositionParams memory params) internal returns (IExchange.SwapResponse memory) {\r\n        IExchange.SwapResponse memory response =\r\n            IExchange(_exchange).swap(\r\n                IExchange.SwapParams({\r\n                    trader: params.trader,\r\n                    baseToken: params.baseToken,\r\n                    isBaseToQuote: params.isBaseToQuote,\r\n                    isExactInput: params.isExactInput,\r\n                    isClose: params.isClose,\r\n                    amount: params.amount,\r\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\r\n                })\r\n            );\r\n\r\n        _modifyOwedRealizedPnl(_insuranceFund, response.insuranceFundFee.toInt256());\r\n\r\n        // examples:\r\n        // https://www.figma.com/file/xuue5qGH4RalX7uAbbzgP3/swap-accounting-and-events?node-id=0%3A1\r\n        _settleBalanceAndDeregister(\r\n            params.trader,\r\n            params.baseToken,\r\n            response.exchangedPositionSize,\r\n            response.exchangedPositionNotional.sub(response.fee.toInt256()),\r\n            response.pnlToBeRealized,\r\n            0\r\n        );\r\n\r\n        if (response.pnlToBeRealized != 0) {\r\n            // if realized pnl is not zero, that means trader is reducing or closing position\r\n            // trader cannot reduce/close position if the remaining account value is less than\r\n            // accountValue * LiquidationPenaltyRatio, which\r\n            // enforces traders to keep LiquidationPenaltyRatio of accountValue to\r\n            // shore the remaining positions and make sure traders having enough money to pay liquidation penalty.\r\n\r\n            // CH_NEMRM : not enough minimum required margin after reducing/closing position\r\n            require(\r\n                getAccountValue(params.trader) >=\r\n                    _getTotalAbsPositionValue(params.trader).mulRatio(_getLiquidationPenaltyRatio()).toInt256(),\r\n                \"CH_NEMRM\"\r\n            );\r\n        }\r\n\r\n        // if not closing a position, check margin ratio after swap\r\n        if (!params.isClose) {\r\n            _requireEnoughFreeCollateral(params.trader);\r\n        }\r\n\r\n        // openNotional will be zero if baseToken is deregistered from trader's token list.\r\n        int256 openNotional = _getTakerOpenNotional(params.trader, params.baseToken);\r\n        _emitPositionChanged(\r\n            params.trader,\r\n            params.baseToken,\r\n            response.exchangedPositionSize,\r\n            response.exchangedPositionNotional,\r\n            response.fee,\r\n            openNotional,\r\n            response.pnlToBeRealized, // realizedPnl\r\n            response.sqrtPriceAfterX96\r\n        );\r\n\r\n        return response;\r\n    }\r\n\r\n    function _openPositionFor(address trader, OpenPositionParams memory params)\r\n        internal\r\n        returns (\r\n            uint256 base,\r\n            uint256 quote,\r\n            uint256 fee\r\n        )\r\n    {\r\n        // input requirement checks:\r\n        //   baseToken: in Exchange.settleFunding()\r\n        //   isBaseToQuote & isExactInput: X\r\n        //   amount: in UniswapV3Pool.swap()\r\n        //   oppositeAmountBound: in _checkSlippage()\r\n        //   deadline: here\r\n        //   sqrtPriceLimitX96: X (this is not for slippage protection)\r\n        //   referralCode: X\r\n\r\n        _checkMarketOpen(params.baseToken);\r\n\r\n        // register token if it's the first time\r\n        _registerBaseToken(trader, params.baseToken);\r\n\r\n        // must settle funding first\r\n        _settleFunding(trader, params.baseToken);\r\n\r\n        IExchange.SwapResponse memory response =\r\n            _openPosition(\r\n                InternalOpenPositionParams({\r\n                    trader: trader,\r\n                    baseToken: params.baseToken,\r\n                    isBaseToQuote: params.isBaseToQuote,\r\n                    isExactInput: params.isExactInput,\r\n                    amount: params.amount,\r\n                    isClose: false,\r\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\r\n                })\r\n            );\r\n\r\n        _checkSlippage(\r\n            InternalCheckSlippageParams({\r\n                isBaseToQuote: params.isBaseToQuote,\r\n                isExactInput: params.isExactInput,\r\n                base: response.base,\r\n                quote: response.quote,\r\n                oppositeAmountBound: params.oppositeAmountBound\r\n            })\r\n        );\r\n\r\n        _referredPositionChanged(params.referralCode);\r\n\r\n        return (response.base, response.quote, response.fee);\r\n    }\r\n\r\n    /// @dev Remove maker's liquidity.\r\n    function _removeLiquidity(IOrderBook.RemoveLiquidityParams memory params)\r\n        internal\r\n        returns (IOrderBook.RemoveLiquidityResponse memory)\r\n    {\r\n        return IOrderBook(_orderBook).removeLiquidity(params);\r\n    }\r\n\r\n    /// @dev Settle trader's funding payment to his/her realized pnl.\r\n    function _settleFunding(address trader, address baseToken)\r\n        internal\r\n        returns (Funding.Growth memory fundingGrowthGlobal)\r\n    {\r\n        int256 fundingPayment;\r\n        (fundingPayment, fundingGrowthGlobal) = IExchange(_exchange).settleFunding(trader, baseToken);\r\n\r\n        if (fundingPayment != 0) {\r\n            _modifyOwedRealizedPnl(trader, fundingPayment.neg256());\r\n            emit FundingPaymentSettled(trader, baseToken, fundingPayment);\r\n        }\r\n\r\n        IAccountBalance(_accountBalance).updateTwPremiumGrowthGlobal(\r\n            trader,\r\n            baseToken,\r\n            fundingGrowthGlobal.twPremiumX96\r\n        );\r\n        return fundingGrowthGlobal;\r\n    }\r\n\r\n    function _registerBaseToken(address trader, address baseToken) internal {\r\n        IAccountBalance(_accountBalance).registerBaseToken(trader, baseToken);\r\n    }\r\n\r\n    function _modifyOwedRealizedPnl(address trader, int256 amount) internal {\r\n        IAccountBalance(_accountBalance).modifyOwedRealizedPnl(trader, amount);\r\n    }\r\n\r\n    function _settleBalanceAndDeregister(\r\n        address trader,\r\n        address baseToken,\r\n        int256 takerBase,\r\n        int256 takerQuote,\r\n        int256 realizedPnl,\r\n        int256 makerFee\r\n    ) internal {\r\n        IAccountBalance(_accountBalance).settleBalanceAndDeregister(\r\n            trader,\r\n            baseToken,\r\n            takerBase,\r\n            takerQuote,\r\n            realizedPnl,\r\n            makerFee\r\n        );\r\n    }\r\n\r\n    function _emitPositionChanged(\r\n        address trader,\r\n        address baseToken,\r\n        int256 exchangedPositionSize,\r\n        int256 exchangedPositionNotional,\r\n        uint256 fee,\r\n        int256 openNotional,\r\n        int256 realizedPnl,\r\n        uint256 sqrtPriceAfterX96\r\n    ) internal {\r\n        emit PositionChanged(\r\n            trader,\r\n            baseToken,\r\n            exchangedPositionSize,\r\n            exchangedPositionNotional,\r\n            fee,\r\n            openNotional,\r\n            realizedPnl,\r\n            sqrtPriceAfterX96\r\n        );\r\n    }\r\n\r\n    function _emitLiquidityChanged(\r\n        address maker,\r\n        address baseToken,\r\n        address quoteToken,\r\n        int24 lowerTick,\r\n        int24 upperTick,\r\n        int256 base,\r\n        int256 quote,\r\n        int128 liquidity,\r\n        uint256 quoteFee\r\n    ) internal {\r\n        emit LiquidityChanged(maker, baseToken, quoteToken, lowerTick, upperTick, base, quote, liquidity, quoteFee);\r\n    }\r\n\r\n    function _referredPositionChanged(bytes32 referralCode) internal {\r\n        if (referralCode != 0) {\r\n            emit ReferredPositionChanged(referralCode);\r\n        }\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc BaseRelayRecipient\r\n    function _msgSender() internal view override(BaseRelayRecipient, OwnerPausable) returns (address payable) {\r\n        return super._msgSender();\r\n    }\r\n\r\n    /// @inheritdoc BaseRelayRecipient\r\n    function _msgData() internal view override(BaseRelayRecipient, OwnerPausable) returns (bytes memory) {\r\n        return super._msgData();\r\n    }\r\n\r\n    function _getTakerOpenNotional(address trader, address baseToken) internal view returns (int256) {\r\n        return IAccountBalance(_accountBalance).getTakerOpenNotional(trader, baseToken);\r\n    }\r\n\r\n    function _getTakerPositionSafe(address trader, address baseToken) internal view returns (int256) {\r\n        int256 takerPositionSize = IAccountBalance(_accountBalance).getTakerPositionSize(trader, baseToken);\r\n        // CH_PSZ: position size is zero\r\n        require(takerPositionSize != 0, \"CH_PSZ\");\r\n        return takerPositionSize;\r\n    }\r\n\r\n    function _getFreeCollateralByRatio(address trader, uint24 ratio) internal view returns (int256) {\r\n        return IVault(_vault).getFreeCollateralByRatio(trader, ratio);\r\n    }\r\n\r\n    function _getSqrtMarkX96(address baseToken) internal view returns (uint160) {\r\n        return IExchange(_exchange).getSqrtMarkTwapX96(baseToken, 0);\r\n    }\r\n\r\n    function _getMarginRequirementForLiquidation(address trader) internal view returns (int256) {\r\n        return IAccountBalance(_accountBalance).getMarginRequirementForLiquidation(trader);\r\n    }\r\n\r\n    function _getIndexPrice(address baseToken) internal view returns (uint256) {\r\n        return IIndexPrice(baseToken).getIndexPrice(IClearingHouseConfig(_clearingHouseConfig).getTwapInterval());\r\n    }\r\n\r\n    function _getLiquidationPenaltyRatio() internal view returns (uint24) {\r\n        return IClearingHouseConfig(_clearingHouseConfig).getLiquidationPenaltyRatio();\r\n    }\r\n\r\n    function _getTotalAbsPositionValue(address trader) internal view returns (uint256) {\r\n        return IAccountBalance(_accountBalance).getTotalAbsPositionValue(trader);\r\n    }\r\n\r\n    function _getOpenOrderIds(address maker, address baseToken) internal view returns (bytes32[] memory) {\r\n        return IOrderBook(_orderBook).getOpenOrderIds(maker, baseToken);\r\n    }\r\n\r\n    /// @dev liquidation condition:\r\n    ///      accountValue < sum(abs(positionValue_by_market)) * mmRatio = totalMinimumMarginRequirement\r\n    function _isLiquidatable(address trader) internal view returns (bool) {\r\n        return getAccountValue(trader) < _getMarginRequirementForLiquidation(trader);\r\n    }\r\n\r\n    /// @param positionSizeToBeLiquidated its direction should be the same as taker's existing position\r\n    function _getLiquidatedPositionSizeAndNotional(\r\n        address trader,\r\n        address baseToken,\r\n        int256 accountValue,\r\n        int256 positionSizeToBeLiquidated\r\n    ) internal view returns (int256, int256) {\r\n        int256 maxLiquidatablePositionSize =\r\n            IAccountBalance(_accountBalance).getLiquidatablePositionSize(trader, baseToken, accountValue);\r\n\r\n        if (positionSizeToBeLiquidated.abs() > maxLiquidatablePositionSize.abs() || positionSizeToBeLiquidated == 0) {\r\n            positionSizeToBeLiquidated = maxLiquidatablePositionSize;\r\n        }\r\n\r\n        int256 liquidatedPositionSize = positionSizeToBeLiquidated.neg256();\r\n        int256 liquidatedPositionNotional =\r\n            positionSizeToBeLiquidated.mulDiv(_getIndexPrice(baseToken).toInt256(), 1e18);\r\n\r\n        return (liquidatedPositionSize, liquidatedPositionNotional);\r\n    }\r\n\r\n    function _requireEnoughFreeCollateral(address trader) internal view {\r\n        // CH_NEFCI: not enough free collateral by imRatio\r\n        require(\r\n            _getFreeCollateralByRatio(trader, IClearingHouseConfig(_clearingHouseConfig).getImRatio()) >= 0,\r\n            \"CH_NEFCI\"\r\n        );\r\n    }\r\n\r\n    function _checkMarketOpen(address baseToken) internal view {\r\n        // CH_BC: Market not opened\r\n        require(IBaseToken(baseToken).isOpen(), \"CH_MNO\");\r\n    }\r\n\r\n    //\r\n    // INTERNAL PURE\r\n    //\r\n\r\n    function _getOppositeAmount(uint256 oppositeAmountBound, bool isPartialClose) internal view returns (uint256) {\r\n        return\r\n            isPartialClose\r\n                ? oppositeAmountBound.mulRatio(IClearingHouseConfig(_clearingHouseConfig).getPartialCloseRatio())\r\n                : oppositeAmountBound;\r\n    }\r\n\r\n    function _checkSlippage(InternalCheckSlippageParams memory params) internal pure {\r\n        // skip when params.oppositeAmountBound is zero\r\n        if (params.oppositeAmountBound == 0) {\r\n            return;\r\n        }\r\n\r\n        // B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote\r\n        // B2Q + exact output, want less input base as possible, so we set a upper bound of input base\r\n        // Q2B + exact input, want more output base as possible, so we set a lower bound of output base\r\n        // Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote\r\n        if (params.isBaseToQuote) {\r\n            if (params.isExactInput) {\r\n                // too little received when short\r\n                require(params.quote >= params.oppositeAmountBound, \"CH_TLRS\");\r\n            } else {\r\n                // too much requested when short\r\n                require(params.base <= params.oppositeAmountBound, \"CH_TMRS\");\r\n            }\r\n        } else {\r\n            if (params.isExactInput) {\r\n                // too little received when long\r\n                require(params.base >= params.oppositeAmountBound, \"CH_TLRL\");\r\n            } else {\r\n                // too much requested when long\r\n                require(params.quote <= params.oppositeAmountBound, \"CH_TMRL\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkSlippageAfterLiquidityChange(\r\n        uint256 base,\r\n        uint256 minBase,\r\n        uint256 quote,\r\n        uint256 minQuote\r\n    ) internal pure {\r\n        // CH_PSCF: price slippage check fails\r\n        require(base >= minBase && quote >= minQuote, \"CH_PSCF\");\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestExchange.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../Exchange.sol\";\r\n\r\ncontract TestExchange is Exchange {\r\n    using AddressUpgradeable for address;\r\n\r\n    uint256 private _testBlockTimestamp;\r\n\r\n    // copy paste from AccountBalance.initialize to avoid it to be public\r\n\r\n    function setBlockTimestamp(uint256 blockTimestamp) external {\r\n        _testBlockTimestamp = blockTimestamp;\r\n    }\r\n\r\n    function getBlockTimestamp() external view returns (uint256) {\r\n        return _testBlockTimestamp;\r\n    }\r\n\r\n    function _blockTimestamp() internal view override returns (uint256) {\r\n        return _testBlockTimestamp;\r\n    }\r\n\r\n    // @dev max tick range = 887272 * 2\r\n    // @dev ref : https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/TickMath.sol#L25\r\n    function _getMaxTickCrossedWithinBlockCap() internal pure override returns (uint24) {\r\n        return 1774544;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/lib/SettlementTokenMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\n\r\n/// @dev decimals of settlementToken token MUST be less than 18\r\nlibrary SettlementTokenMath {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SignedSafeMathUpgradeable for int256;\r\n\r\n    function lte(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) <= amountX10_18;\r\n    }\r\n\r\n    function lte(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) <= amountX10_18;\r\n    }\r\n\r\n    function lt(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) < amountX10_18;\r\n    }\r\n\r\n    function lt(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) < amountX10_18;\r\n    }\r\n\r\n    function gt(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) > amountX10_18;\r\n    }\r\n\r\n    function gt(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) > amountX10_18;\r\n    }\r\n\r\n    function gte(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) >= amountX10_18;\r\n    }\r\n\r\n    function gte(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) internal pure returns (bool) {\r\n        return parseSettlementToken(settlementToken, decimals) >= amountX10_18;\r\n    }\r\n\r\n    // returns number with 18 decimals\r\n    function parseSettlementToken(uint256 amount, uint8 decimals) internal pure returns (uint256) {\r\n        return amount.mul(10**(18 - decimals));\r\n    }\r\n\r\n    // returns number with 18 decimals\r\n    function parseSettlementToken(int256 amount, uint8 decimals) internal pure returns (int256) {\r\n        return amount.mul(int256(10**(18 - decimals)));\r\n    }\r\n\r\n    // returns number converted from 18 decimals to settlementToken's decimals\r\n    function formatSettlementToken(uint256 amount, uint8 decimals) internal pure returns (uint256) {\r\n        return amount.div(10**(18 - decimals));\r\n    }\r\n\r\n    // returns number converted from 18 decimals to settlementToken's decimals\r\n    // will always round down no matter positive value or negative value\r\n    function formatSettlementToken(int256 amount, uint8 decimals) internal pure returns (int256) {\r\n        uint256 denominator = 10**(18 - decimals);\r\n        int256 rounding = 0;\r\n        if (amount < 0 && uint256(-amount) % denominator != 0) {\r\n            rounding = -1;\r\n        }\r\n        return amount.div(int256(denominator)).add(rounding);\r\n    }\r\n\r\n    // returns number converted between specified decimals\r\n    function convertTokenDecimals(\r\n        uint256 amount,\r\n        uint8 fromDecimals,\r\n        uint8 toDecimals\r\n    ) internal pure returns (uint256) {\r\n        if (fromDecimals == toDecimals) {\r\n            return amount;\r\n        }\r\n        return\r\n            fromDecimals > toDecimals\r\n                ? amount.div(10**(fromDecimals - toDecimals))\r\n                : amount.mul(10**(toDecimals - fromDecimals));\r\n    }\r\n\r\n    // returns number converted between specified decimals\r\n    function convertTokenDecimals(\r\n        int256 amount,\r\n        uint8 fromDecimals,\r\n        uint8 toDecimals\r\n    ) internal pure returns (int256) {\r\n        if (fromDecimals == toDecimals) {\r\n            return amount;\r\n        }\r\n\r\n        if (fromDecimals < toDecimals) {\r\n            return amount.mul(int256(10**(toDecimals - fromDecimals)));\r\n        }\r\n\r\n        uint256 denominator = 10**(fromDecimals - toDecimals);\r\n        int256 rounding = 0;\r\n        if (amount < 0 && uint256(-amount) % denominator != 0) {\r\n            rounding = -1;\r\n        }\r\n        return amount.div(int256(denominator)).add(rounding);\r\n    }\r\n}\r\n"
    },
    "contracts/base/OwnerPausable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\r\nimport { SafeOwnable } from \"./SafeOwnable.sol\";\r\n\r\nabstract contract OwnerPausable is SafeOwnable, PausableUpgradeable {\r\n    // __gap is reserved storage\r\n    uint256[50] private __gap;\r\n\r\n    // solhint-disable-next-line func-order\r\n    function __OwnerPausable_init() internal initializer {\r\n        __SafeOwnable_init();\r\n        __Pausable_init();\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function _msgSender() internal view virtual override returns (address payable) {\r\n        return super._msgSender();\r\n    }\r\n\r\n    function _msgData() internal view virtual override returns (bytes memory) {\r\n        return super._msgData();\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/interface/IVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IVault {\r\n    /// @notice Emitted when trader deposit collateral into vault\r\n    /// @param collateralToken The address of token deposited\r\n    /// @param trader The address of trader\r\n    /// @param amount The amount of token deposited\r\n    event Deposited(address indexed collateralToken, address indexed trader, uint256 amount);\r\n\r\n    /// @notice Emitted when trader withdraw collateral from vault\r\n    /// @param collateralToken The address of token withdrawn\r\n    /// @param trader The address of trader\r\n    /// @param amount The amount of token withdrawn\r\n    event Withdrawn(address indexed collateralToken, address indexed trader, uint256 amount);\r\n\r\n    /// @notice Emitted when a trader's collateral is liquidated\r\n    /// @param trader The address of trader\r\n    /// @param collateralToken The address of the token that is liquidated\r\n    /// @param liquidator The address of liquidator\r\n    /// @param collateral The amount of collateral token liquidated\r\n    /// @param repaidSettlementWithoutInsuranceFundFeeX10_S The amount of settlement token repaid\r\n    ///        for trader (in settlement token's decimals)\r\n    /// @param insuranceFundFeeX10_S The amount of insurance fund fee paid(in settlement token's decimals)\r\n    /// @param discountRatio The discount ratio of liquidation price\r\n    event CollateralLiquidated(\r\n        address indexed trader,\r\n        address indexed collateralToken,\r\n        address indexed liquidator,\r\n        uint256 collateral,\r\n        uint256 repaidSettlementWithoutInsuranceFundFeeX10_S,\r\n        uint256 insuranceFundFeeX10_S,\r\n        uint24 discountRatio\r\n    );\r\n\r\n    /// @notice Emitted when trustedForwarder is changed\r\n    /// @dev trustedForwarder is only used for metaTx\r\n    /// @param trustedForwarder The address of trustedForwarder\r\n    event TrustedForwarderChanged(address indexed trustedForwarder);\r\n\r\n    /// @notice Emitted when clearingHouse is changed\r\n    /// @param clearingHouse The address of clearingHouse\r\n    event ClearingHouseChanged(address indexed clearingHouse);\r\n\r\n    /// @notice Emitted when collateralManager is changed\r\n    /// @param collateralManager The address of collateralManager\r\n    event CollateralManagerChanged(address indexed collateralManager);\r\n\r\n    /// @notice Emitted when WETH9 is changed\r\n    /// @param WETH9 The address of WETH9\r\n    event WETH9Changed(address indexed WETH9);\r\n\r\n    /// @notice Deposit collateral into vault\r\n    /// @param token The address of the token to deposit\r\n    /// @param amount The amount of the token to deposit\r\n    function deposit(address token, uint256 amount) external;\r\n\r\n    /// @notice Deposit the collateral token for other account\r\n    /// @param to The address of the account to deposit to\r\n    /// @param token The address of collateral token\r\n    /// @param amount The amount of the token to deposit\r\n    function depositFor(\r\n        address to,\r\n        address token,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /// @notice Deposit ETH as collateral into vault\r\n    function depositEther() external payable;\r\n\r\n    /// @notice Deposit ETH as collateral for specified account\r\n    /// @param to The address of the account to deposit to\r\n    function depositEtherFor(address to) external payable;\r\n\r\n    /// @notice Withdraw collateral from vault\r\n    /// @param token The address of the token to withdraw\r\n    /// @param amount The amount of the token to withdraw\r\n    function withdraw(address token, uint256 amount) external;\r\n\r\n    /// @notice Withdraw ETH from vault\r\n    /// @param amount The amount of the ETH to withdraw\r\n    function withdrawEther(uint256 amount) external;\r\n\r\n    /// @notice Withdraw all free collateral from vault\r\n    /// @param token The address of the token to withdraw\r\n    /// @return amount The amount of the token withdrawn\r\n    function withdrawAll(address token) external returns (uint256 amount);\r\n\r\n    /// @notice Withdraw all free collateral of ETH from vault\r\n    /// @return amount The amount of ETH withdrawn\r\n    function withdrawAllEther() external returns (uint256 amount);\r\n\r\n    /// @notice Liquidate trader's collateral by given settlement token amount or non settlement token amount\r\n    /// @param trader The address of trader that will be liquidated\r\n    /// @param token The address of non settlement collateral token that the trader will be liquidated\r\n    /// @param amount The amount of settlement token that the liquidator will repay for trader or\r\n    ///               the amount of non-settlement collateral token that the liquidator will charge from trader\r\n    /// @param isDenominatedInSettlementToken Whether the amount is denominated in settlement token or not\r\n    /// @return returnAmount The amount of a non-settlement token (in its native decimals) that is liquidated\r\n    ///         when `isDenominatedInSettlementToken` is true or the amount of settlement token that is repaid\r\n    ///         when `isDenominatedInSettlementToken` is false\r\n    function liquidateCollateral(\r\n        address trader,\r\n        address token,\r\n        uint256 amount,\r\n        bool isDenominatedInSettlementToken\r\n    ) external returns (uint256 returnAmount);\r\n\r\n    /// @notice Get the specified trader's settlement token balance, without pending fee, funding payment\r\n    ///         and owed realized PnL\r\n    /// @dev The function is equivalent to `getBalanceByToken(trader, settlementToken)`\r\n    ///      We keep this function solely for backward-compatibility with the older single-collateral system.\r\n    ///      In practical applications, the developer might want to use `getSettlementTokenValue()` instead\r\n    ///      because the latter includes pending fee, funding payment etc.\r\n    ///      and therefore more accurately reflects a trader's settlement (ex. USDC) balance\r\n    /// @return balance The balance amount (in settlement token's decimals)\r\n    function getBalance(address trader) external view returns (int256 balance);\r\n\r\n    /// @notice Get the balance of Vault of the specified collateral token and trader\r\n    /// @param trader The address of the trader\r\n    /// @param token The address of the collateral token\r\n    /// @return balance The balance amount (in its native decimals)\r\n    function getBalanceByToken(address trader, address token) external view returns (int256 balance);\r\n\r\n    /// @notice Get they array of collateral token addresses that a trader has\r\n    /// @return collateralTokens array of collateral token addresses\r\n    function getCollateralTokens(address trader) external view returns (address[] memory collateralTokens);\r\n\r\n    /// @notice Get account value of the specified trader\r\n    /// @param trader The address of the trader\r\n    /// @return accountValueX10_S account value (in settlement token's decimals)\r\n    function getAccountValue(address trader) external view returns (int256 accountValueX10_S);\r\n\r\n    /// @notice Get the free collateral value denominated in the settlement token of the specified trader\r\n    /// @param trader The address of the trader\r\n    /// @return freeCollateral the value (in settlement token's decimals) of free collateral available\r\n    ///         for withdraw or opening new positions or orders)\r\n    function getFreeCollateral(address trader) external view returns (uint256 freeCollateral);\r\n\r\n    /// @notice Get the free collateral amount of the specified trader and collateral ratio\r\n    /// @dev There are three configurations for different insolvency risk tolerances:\r\n    ///      **conservative, moderate &aggressive**. We will start with the **conservative** one\r\n    ///      and gradually move to **aggressive** to increase capital efficiency\r\n    /// @param trader The address of the trader\r\n    /// @param ratio The margin requirement ratio, imRatio or mmRatio\r\n    /// @return freeCollateralByRatio freeCollateral (in settlement token's decimals), by using the\r\n    ///         input margin requirement ratio; can be negative\r\n    function getFreeCollateralByRatio(address trader, uint24 ratio)\r\n        external\r\n        view\r\n        returns (int256 freeCollateralByRatio);\r\n\r\n    /// @notice Get the free collateral amount of the specified collateral token of specified trader\r\n    /// @param trader The address of the trader\r\n    /// @param token The address of the collateral token\r\n    /// @return freeCollateral amount of that token (in the token's native decimals)\r\n    function getFreeCollateralByToken(address trader, address token) external view returns (uint256 freeCollateral);\r\n\r\n    /// @notice Get the specified trader's settlement value, including pending fee, funding payment,\r\n    ///         owed realized PnL and unrealized PnL\r\n    /// @dev Note the difference between `settlementTokenBalanceX10_S`, `getSettlementTokenValue()` and `getBalance()`:\r\n    ///      They are all settlement token balances but with or without\r\n    ///      pending fee, funding payment, owed realized PnL, unrealized PnL, respectively\r\n    ///      In practical applications, we use `getSettlementTokenValue()` to get the trader's debt (if < 0)\r\n    /// @param trader The address of the trader\r\n    /// @return balance The balance amount (in settlement token's decimals)\r\n    function getSettlementTokenValue(address trader) external view returns (int256 balance);\r\n\r\n    /// @notice Get the settlement token address\r\n    /// @dev We assume the settlement token should match the denominator of the price oracle.\r\n    ///      i.e. if the settlement token is USDC, then the oracle should be priced in USD\r\n    /// @return settlementToken The address of the settlement token\r\n    function getSettlementToken() external view returns (address settlementToken);\r\n\r\n    /// @notice Check if a given trader's collateral token can be liquidated; liquidation criteria:\r\n    ///         1. margin ratio falls below maintenance threshold + 20bps (mmRatioBuffer)\r\n    ///         2. USDC debt > nonSettlementTokenValue * debtNonSettlementTokenValueRatio (ex: 75%)\r\n    ///         3. USDC debt > debtThreshold (ex: $10000)\r\n    //          USDC debt = USDC balance + Total Unrealized PnL\r\n    /// @param trader The address of the trader\r\n    /// @return isLiquidatable If the trader can be liquidated\r\n    function isLiquidatable(address trader) external view returns (bool isLiquidatable);\r\n\r\n    /// @notice get the margin requirement for collateral liquidation of a trader\r\n    /// @dev this value is compared with `ClearingHouse.getAccountValue()` (int)\r\n    /// @param trader The address of the trader\r\n    /// @return marginRequirement margin requirement (in 18 decimals)\r\n    function getMarginRequirementForCollateralLiquidation(address trader)\r\n        external\r\n        view\r\n        returns (int256 marginRequirement);\r\n\r\n    /// @notice Get the maintenance margin ratio for collateral liquidation\r\n    /// @return collateralMmRatio The maintenance margin ratio for collateral liquidation\r\n    function getCollateralMmRatio() external view returns (uint24 collateralMmRatio);\r\n\r\n    /// @notice Get a trader's liquidatable collateral amount by a given settlement amount\r\n    /// @param token The address of the token of the trader's collateral\r\n    /// @param settlementX10_S The amount of settlement token the liquidator wants to pay\r\n    /// @return collateral The collateral amount(in its native decimals) the liquidator can get\r\n    function getLiquidatableCollateralBySettlement(address token, uint256 settlementX10_S)\r\n        external\r\n        view\r\n        returns (uint256 collateral);\r\n\r\n    /// @notice Get a trader's repaid settlement amount by a given collateral amount\r\n    /// @param token The address of the token of the trader's collateral\r\n    /// @param collateral The amount of collateral token the liquidator wants to get\r\n    /// @return settlementX10_S The settlement amount(in settlement token's decimals) the liquidator needs to pay\r\n    function getRepaidSettlementByCollateral(address token, uint256 collateral)\r\n        external\r\n        view\r\n        returns (uint256 settlementX10_S);\r\n\r\n    /// @notice Get a trader's max repaid settlement & max liquidatable collateral by a given collateral token\r\n    /// @param trader The address of the trader\r\n    /// @param token The address of the token of the trader's collateral\r\n    /// @return maxRepaidSettlementX10_S The maximum settlement amount(in settlement token's decimals)\r\n    ///         the liquidator needs to pay to liquidate a trader's collateral token\r\n    /// @return maxLiquidatableCollateral The maximum liquidatable collateral amount\r\n    ///         (in the collateral token's native decimals) of a trader\r\n    function getMaxRepaidSettlementAndLiquidatableCollateral(address trader, address token)\r\n        external\r\n        view\r\n        returns (uint256 maxRepaidSettlementX10_S, uint256 maxLiquidatableCollateral);\r\n\r\n    /// @notice Get settlement token decimals\r\n    /// @dev cached the settlement token's decimal for gas optimization\r\n    /// @return decimals The decimals of settlement token\r\n    function decimals() external view returns (uint8 decimals);\r\n\r\n    /// @notice Get the borrowed settlement token amount from insurance fund\r\n    /// @return debtAmount The debt amount (in settlement token's decimals)\r\n    function getTotalDebt() external view returns (uint256 debtAmount);\r\n\r\n    /// @notice Get `ClearingHouseConfig` contract address\r\n    /// @return clearingHouseConfig The address of `ClearingHouseConfig` contract\r\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\r\n\r\n    /// @notice Get `AccountBalance` contract address\r\n    /// @return accountBalance The address of `AccountBalance` contract\r\n    function getAccountBalance() external view returns (address accountBalance);\r\n\r\n    /// @notice Get `InsuranceFund` contract address\r\n    /// @return insuranceFund The address of `InsuranceFund` contract\r\n    function getInsuranceFund() external view returns (address insuranceFund);\r\n\r\n    /// @notice Get `Exchange` contract address\r\n    /// @return exchange The address of `Exchange` contract\r\n    function getExchange() external view returns (address exchange);\r\n\r\n    /// @notice Get `ClearingHouse` contract address\r\n    /// @return clearingHouse The address of `ClearingHouse` contract\r\n    function getClearingHouse() external view returns (address clearingHouse);\r\n\r\n    /// @notice Get `CollateralManager` contract address\r\n    /// @return clearingHouse The address of `CollateralManager` contract\r\n    function getCollateralManager() external view returns (address clearingHouse);\r\n\r\n    /// @notice Get `WETH9` contract address\r\n    /// @return clearingHouse The address of `WETH9` contract\r\n    function getWETH9() external view returns (address clearingHouse);\r\n}\r\n"
    },
    "contracts/interface/IDelegateApproval.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IDelegateApproval {\r\n    /// @param trader The address of trader\r\n    /// @param delegate The address of delegate\r\n    /// @param actions The actions to be approved\r\n    event DelegationApproved(address indexed trader, address delegate, uint8 actions);\r\n\r\n    /// @param trader The address of trader\r\n    /// @param delegate The address of delegate\r\n    /// @param actions The actions to be revoked\r\n    event DelegationRevoked(address indexed trader, address delegate, uint8 actions);\r\n\r\n    /// @param delegate The address of delegate\r\n    /// @param actions The actions to be approved\r\n    function approve(address delegate, uint8 actions) external;\r\n\r\n    /// @param delegate The address of delegate\r\n    /// @param actions The actions to be revoked\r\n    function revoke(address delegate, uint8 actions) external;\r\n\r\n    /// @return action The value of action `_CLEARINGHOUSE_OPENPOSITION`\r\n    function getClearingHouseOpenPositionAction() external pure returns (uint8);\r\n\r\n    /// @return action The value of action `_CLEARINGHOUSE_ADDLIQUIDITY`\r\n    function getClearingHouseAddLiquidityAction() external pure returns (uint8);\r\n\r\n    /// @return action The value of action `_CLEARINGHOUSE_REMOVELIQUIDITY`\r\n    function getClearingHouseRemoveLiquidityAction() external pure returns (uint8);\r\n\r\n    /// @param trader The address of trader\r\n    /// @param delegate The address of delegate\r\n    /// @return actions The approved actions\r\n    function getApprovedActions(address trader, address delegate) external view returns (uint8);\r\n\r\n    /// @param trader The address of trader\r\n    /// @param delegate The address of delegate\r\n    /// @param actions The actions to be checked\r\n    /// @return true if delegate is allowed to perform **each** actions for trader, otherwise false\r\n    function hasApprovalFor(\r\n        address trader,\r\n        address delegate,\r\n        uint8 actions\r\n    ) external view returns (bool);\r\n\r\n    /// @param trader The address of trader\r\n    /// @param delegate The address of delegate\r\n    /// @return true if delegate can open position for trader, otherwise false\r\n    function canOpenPositionFor(address trader, address delegate) external view returns (bool);\r\n\r\n    /// @param trader The address of trader\r\n    /// @param delegate The address of delegate\r\n    /// @return true if delegate can add liquidity for trader, otherwise false\r\n    function canAddLiquidityFor(address trader, address delegate) external view returns (bool);\r\n\r\n    /// @param trader The address of trader\r\n    /// @param delegate The address of delegate\r\n    /// @return true if delegate can remove liquidity for trader, otherwise false\r\n    function canRemoveLiquidityFor(address trader, address delegate) external view returns (bool);\r\n}\r\n"
    },
    "contracts/gsn/BaseRelayRecipient.sol": {
      "content": "// copied from @opengsn/provider-2.2.4,\r\n// https://github.com/opengsn/gsn/blob/master/packages/contracts/src/BaseRelayRecipient.sol\r\n// for adding `payable` property at the return value of _msgSender()\r\n// SPDX-License-Identifier: MIT\r\n// solhint-disable no-inline-assembly\r\npragma solidity 0.7.6;\r\n\r\nimport \"./IRelayRecipient.sol\";\r\n\r\n/**\r\n * A base contract to be inherited by any contract that want to receive relayed transactions\r\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\r\n */\r\nabstract contract BaseRelayRecipient is IRelayRecipient {\r\n    /*\r\n     * Forwarder singleton we accept calls from\r\n     */\r\n    address internal _trustedForwarder;\r\n\r\n    // __gap is reserved storage\r\n    uint256[50] private __gap;\r\n\r\n    event TrustedForwarderUpdated(address trustedForwarder);\r\n\r\n    function getTrustedForwarder() external view returns (address) {\r\n        return _trustedForwarder;\r\n    }\r\n\r\n    /// @inheritdoc IRelayRecipient\r\n    function versionRecipient() external pure override returns (string memory) {\r\n        return \"2.0.0\";\r\n    }\r\n\r\n    /// @inheritdoc IRelayRecipient\r\n    function isTrustedForwarder(address forwarder) public view virtual override returns (bool) {\r\n        return forwarder == _trustedForwarder;\r\n    }\r\n\r\n    function _setTrustedForwarder(address trustedForwarderArg) internal {\r\n        _trustedForwarder = trustedForwarderArg;\r\n        emit TrustedForwarderUpdated(trustedForwarderArg);\r\n    }\r\n\r\n    /**\r\n     * return the sender of this call.\r\n     * if the call came through our trusted forwarder, return the original sender.\r\n     * otherwise, return `msg.sender`.\r\n     * should be used in the contract anywhere instead of msg.sender\r\n     */\r\n    /// @inheritdoc IRelayRecipient\r\n    function _msgSender() internal view virtual override returns (address payable ret) {\r\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\r\n            // At this point we know that the sender is a trusted forwarder,\r\n            // so we trust that the last bytes of msg.data are the verified sender address.\r\n            // extract sender address from the end of msg.data\r\n            assembly {\r\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\r\n            }\r\n        } else {\r\n            ret = msg.sender;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return the msg.data of this call.\r\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\r\n     * of the msg.data - so this method will strip those 20 bytes off.\r\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\r\n     * should be used in the contract instead of msg.data, where this difference matters.\r\n     */\r\n    /// @inheritdoc IRelayRecipient\r\n    function _msgData() internal view virtual override returns (bytes calldata ret) {\r\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\r\n            return msg.data[0:msg.data.length - 20];\r\n        } else {\r\n            return msg.data;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/storage/ClearingHouseStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\n/// @notice For future upgrades, do not change ClearingHouseStorageV1. Create a new\r\n/// contract which implements ClearingHouseStorageV1 and following the naming convention\r\n/// ClearingHouseStorageVX.\r\nabstract contract ClearingHouseStorageV1 {\r\n    // --------- IMMUTABLE ---------\r\n    address internal _quoteToken;\r\n    address internal _uniswapV3Factory;\r\n\r\n    // cache the settlement token's decimals for gas optimization\r\n    uint8 internal _settlementTokenDecimals;\r\n    // --------- ^^^^^^^^^ ---------\r\n\r\n    address internal _clearingHouseConfig;\r\n    address internal _vault;\r\n    address internal _exchange;\r\n    address internal _orderBook;\r\n    address internal _accountBalance;\r\n    address internal _insuranceFund;\r\n}\r\n\r\nabstract contract ClearingHouseStorageV2 is ClearingHouseStorageV1 {\r\n    address internal _delegateApproval;\r\n}\r\n"
    },
    "contracts/interface/IClearingHouse.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IClearingHouse {\r\n    /// @param useTakerBalance only accept false now\r\n    struct AddLiquidityParams {\r\n        address baseToken;\r\n        uint256 base;\r\n        uint256 quote;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint256 minBase;\r\n        uint256 minQuote;\r\n        bool useTakerBalance;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @param liquidity collect fee when 0\r\n    struct RemoveLiquidityParams {\r\n        address baseToken;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint128 liquidity;\r\n        uint256 minBase;\r\n        uint256 minQuote;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct AddLiquidityResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n        uint256 fee;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    struct RemoveLiquidityResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n        uint256 fee;\r\n    }\r\n\r\n    /// @param oppositeAmountBound\r\n    // B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote\r\n    // B2Q + exact output, want less input base as possible, so we set a upper bound of input base\r\n    // Q2B + exact input, want more output base as possible, so we set a lower bound of output base\r\n    // Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote\r\n    // when it's set to 0, it will disable slippage protection entirely regardless of exact input or output\r\n    // when it's over or under the bound, it will be reverted\r\n    /// @param sqrtPriceLimitX96\r\n    // B2Q: the price cannot be less than this value after the swap\r\n    // Q2B: the price cannot be greater than this value after the swap\r\n    // it will fill the trade until it reaches the price limit but WON'T REVERT\r\n    // when it's set to 0, it will disable price limit;\r\n    // when it's 0 and exact output, the output amount is required to be identical to the param amount\r\n    struct OpenPositionParams {\r\n        address baseToken;\r\n        bool isBaseToQuote;\r\n        bool isExactInput;\r\n        uint256 amount;\r\n        uint256 oppositeAmountBound;\r\n        uint256 deadline;\r\n        uint160 sqrtPriceLimitX96;\r\n        bytes32 referralCode;\r\n    }\r\n\r\n    struct ClosePositionParams {\r\n        address baseToken;\r\n        uint160 sqrtPriceLimitX96;\r\n        uint256 oppositeAmountBound;\r\n        uint256 deadline;\r\n        bytes32 referralCode;\r\n    }\r\n\r\n    struct CollectPendingFeeParams {\r\n        address trader;\r\n        address baseToken;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n    }\r\n\r\n    /// @notice Emitted when open position with non-zero referral code\r\n    /// @param referralCode The referral code by partners\r\n    event ReferredPositionChanged(bytes32 indexed referralCode);\r\n\r\n    /// @notice Emitted when taker position is being liquidated\r\n    /// @param trader The trader who has been liquidated\r\n    /// @param baseToken Virtual base token(ETH, BTC, etc...) address\r\n    /// @param positionNotional The cost of position\r\n    /// @param positionSize The size of position\r\n    /// @param liquidationFee The fee of liquidate\r\n    /// @param liquidator The address of liquidator\r\n    event PositionLiquidated(\r\n        address indexed trader,\r\n        address indexed baseToken,\r\n        uint256 positionNotional,\r\n        uint256 positionSize,\r\n        uint256 liquidationFee,\r\n        address liquidator\r\n    );\r\n\r\n    /// @notice Emitted when maker's liquidity of a order changed\r\n    /// @param maker The one who provide liquidity\r\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\r\n    /// @param quoteToken The address of virtual USD token\r\n    /// @param lowerTick The lower tick of the position in which to add liquidity\r\n    /// @param upperTick The upper tick of the position in which to add liquidity\r\n    /// @param base The amount of base token added (> 0) / removed (< 0) as liquidity; fees not included\r\n    /// @param quote The amount of quote token added ... (same as the above)\r\n    /// @param liquidity The amount of liquidity unit added (> 0) / removed (< 0)\r\n    /// @param quoteFee The amount of quote token the maker received as fees\r\n    event LiquidityChanged(\r\n        address indexed maker,\r\n        address indexed baseToken,\r\n        address indexed quoteToken,\r\n        int24 lowerTick,\r\n        int24 upperTick,\r\n        int256 base,\r\n        int256 quote,\r\n        int128 liquidity,\r\n        uint256 quoteFee\r\n    );\r\n\r\n    /// @notice Emitted when taker's position is being changed\r\n    /// @param trader Trader address\r\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\r\n    /// @param exchangedPositionSize The actual amount swap to uniswapV3 pool\r\n    /// @param exchangedPositionNotional The cost of position, include fee\r\n    /// @param fee The fee of open/close position\r\n    /// @param openNotional The cost of open/close position, < 0: long, > 0: short\r\n    /// @param realizedPnl The realized Pnl after open/close position\r\n    /// @param sqrtPriceAfterX96 The sqrt price after swap, in X96\r\n    event PositionChanged(\r\n        address indexed trader,\r\n        address indexed baseToken,\r\n        int256 exchangedPositionSize,\r\n        int256 exchangedPositionNotional,\r\n        uint256 fee,\r\n        int256 openNotional,\r\n        int256 realizedPnl,\r\n        uint256 sqrtPriceAfterX96\r\n    );\r\n\r\n    /// @notice Emitted when taker close her position in closed market\r\n    /// @param trader Trader address\r\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\r\n    /// @param closedPositionSize Trader's position size in closed market\r\n    /// @param closedPositionNotional Trader's position notional in closed market, based on closed price\r\n    /// @param openNotional The cost of open/close position, < 0: long, > 0: short\r\n    /// @param realizedPnl The realized Pnl after close position\r\n    /// @param closedPrice The close price of position\r\n    event PositionClosed(\r\n        address indexed trader,\r\n        address indexed baseToken,\r\n        int256 closedPositionSize,\r\n        int256 closedPositionNotional,\r\n        int256 openNotional,\r\n        int256 realizedPnl,\r\n        uint256 closedPrice\r\n    );\r\n\r\n    /// @notice Emitted when settling a trader's funding payment\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of virtual base token(ETH, BTC, etc...)\r\n    /// @param fundingPayment The fundingPayment of trader on baseToken market, > 0: payment, < 0 : receipt\r\n    event FundingPaymentSettled(address indexed trader, address indexed baseToken, int256 fundingPayment);\r\n\r\n    /// @notice Emitted when trusted forwarder address changed\r\n    /// @dev TrustedForward is only used for metaTx\r\n    /// @param forwarder The trusted forwarder address\r\n    event TrustedForwarderChanged(address indexed forwarder);\r\n\r\n    /// @notice Emitted when DelegateApproval address changed\r\n    /// @param delegateApproval The address of DelegateApproval\r\n    event DelegateApprovalChanged(address indexed delegateApproval);\r\n\r\n    /// @notice Maker can call `addLiquidity` to provide liquidity on Uniswap V3 pool\r\n    /// @dev Tx will fail if adding `base == 0 && quote == 0` / `liquidity == 0`\r\n    /// @dev - `AddLiquidityParams.useTakerBalance` is only accept `false` now\r\n    /// @param params AddLiquidityParams struct\r\n    /// @return response AddLiquidityResponse struct\r\n    function addLiquidity(AddLiquidityParams calldata params) external returns (AddLiquidityResponse memory response);\r\n\r\n    /// @notice Maker can call `removeLiquidity` to remove liquidity\r\n    /// @dev remove liquidity will transfer maker impermanent position to taker position,\r\n    /// if `liquidity` of RemoveLiquidityParams struct is zero, the action will collect fee from\r\n    /// pool to maker\r\n    /// @param params RemoveLiquidityParams struct\r\n    /// @return response RemoveLiquidityResponse struct\r\n    function removeLiquidity(RemoveLiquidityParams calldata params)\r\n        external\r\n        returns (RemoveLiquidityResponse memory response);\r\n\r\n    /// @notice Settle all markets fundingPayment to owedRealized Pnl\r\n    /// @param trader The address of trader\r\n    function settleAllFunding(address trader) external;\r\n\r\n    /// @notice Trader can call `openPosition` to long/short on baseToken market\r\n    /// @dev - `OpenPositionParams.oppositeAmountBound`\r\n    ///     - B2Q + exact input, want more output quote as possible, so we set a lower bound of output quote\r\n    ///     - B2Q + exact output, want less input base as possible, so we set a upper bound of input base\r\n    ///     - Q2B + exact input, want more output base as possible, so we set a lower bound of output base\r\n    ///     - Q2B + exact output, want less input quote as possible, so we set a upper bound of input quote\r\n    ///     > when it's set to 0, it will disable slippage protection entirely regardless of exact input or output\r\n    ///     > when it's over or under the bound, it will be reverted\r\n    /// @dev - `OpenPositionParams.sqrtPriceLimitX96`\r\n    ///     - B2Q: the price cannot be less than this value after the swap\r\n    ///     - Q2B: the price cannot be greater than this value after the swap\r\n    ///     > it will fill the trade until it reaches the price limit but WON'T REVERT\r\n    ///     > when it's set to 0, it will disable price limit;\r\n    ///     > when it's 0 and exact output, the output amount is required to be identical to the param amount\r\n    /// @param params OpenPositionParams struct\r\n    /// @return base The amount of baseToken the taker got or spent\r\n    /// @return quote The amount of quoteToken the taker got or spent\r\n    function openPosition(OpenPositionParams memory params) external returns (uint256 base, uint256 quote);\r\n\r\n    /// @param trader The address of trader\r\n    /// @param params OpenPositionParams struct is the same as `openPosition()`\r\n    /// @return base The amount of baseToken the taker got or spent\r\n    /// @return quote The amount of quoteToken the taker got or spent\r\n    /// @return fee The trading fee\r\n    function openPositionFor(address trader, OpenPositionParams memory params)\r\n        external\r\n        returns (\r\n            uint256 base,\r\n            uint256 quote,\r\n            uint256 fee\r\n        );\r\n\r\n    /// @notice Close trader's position\r\n    /// @param params ClosePositionParams struct\r\n    /// @return base The amount of baseToken the taker got or spent\r\n    /// @return quote The amount of quoteToken the taker got or spent\r\n    function closePosition(ClosePositionParams calldata params) external returns (uint256 base, uint256 quote);\r\n\r\n    /// @notice If trader is underwater, any one can call `liquidate` to liquidate this trader\r\n    /// @dev If trader has open orders, need to call `cancelAllExcessOrders` first\r\n    /// @dev If positionSize is greater than maxLiquidatePositionSize, liquidate maxLiquidatePositionSize by default\r\n    /// @dev If margin ratio >= 0.5 * mmRatio,\r\n    ///         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)\r\n    /// @dev If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1\r\n    /// @dev maxLiquidatePositionSize = positionSize * maxLiquidateRatio\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @param positionSize the position size to be liquidated by liquidator\r\n    //    and MUST be the same direction as trader's position size\r\n    function liquidate(\r\n        address trader,\r\n        address baseToken,\r\n        int256 positionSize\r\n    ) external;\r\n\r\n    /// @notice liquidate trader's position and will liquidate the max possible position size\r\n    /// @dev If margin ratio >= 0.5 * mmRatio,\r\n    ///         maxLiquidateRatio = MIN((1, 0.5 * totalAbsPositionValue / absPositionValue)\r\n    /// @dev If margin ratio < 0.5 * mmRatio, maxLiquidateRatio = 1\r\n    /// @dev maxLiquidatePositionSize = positionSize * maxLiquidateRatio\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    function liquidate(address trader, address baseToken) external;\r\n\r\n    /// @notice Cancel excess order of a maker\r\n    /// @dev Order id can get from `OrderBook.getOpenOrderIds`\r\n    /// @param maker The address of Maker\r\n    /// @param baseToken The address of baseToken\r\n    /// @param orderIds The id of the order\r\n    function cancelExcessOrders(\r\n        address maker,\r\n        address baseToken,\r\n        bytes32[] calldata orderIds\r\n    ) external;\r\n\r\n    /// @notice Cancel all excess orders of a maker if the maker is underwater\r\n    /// @dev This function won't fail if the maker has no order but fails when maker is not underwater\r\n    /// @param maker The address of maker\r\n    /// @param baseToken The address of baseToken\r\n    function cancelAllExcessOrders(address maker, address baseToken) external;\r\n\r\n    /// @notice Close all positions of a trader in the closed market\r\n    /// @param trader The address of trader\r\n    /// @param baseToken The address of baseToken\r\n    /// @return base The amount of base token that is closed\r\n    /// @return quote The amount of quote token that is closed\r\n    function quitMarket(address trader, address baseToken) external returns (uint256 base, uint256 quote);\r\n\r\n    /// @notice Get account value of trader\r\n    /// @dev accountValue = totalCollateralValue + totalUnrealizedPnl, in 18 decimals\r\n    /// @param trader The address of trader\r\n    /// @return accountValue The account value of trader\r\n    function getAccountValue(address trader) external view returns (int256 accountValue);\r\n\r\n    /// @notice Get QuoteToken address\r\n    /// @return quoteToken The quote token address\r\n    function getQuoteToken() external view returns (address quoteToken);\r\n\r\n    /// @notice Get UniswapV3Factory address\r\n    /// @return factory UniswapV3Factory address\r\n    function getUniswapV3Factory() external view returns (address factory);\r\n\r\n    /// @notice Get ClearingHouseConfig address\r\n    /// @return clearingHouseConfig ClearingHouseConfig address\r\n    function getClearingHouseConfig() external view returns (address clearingHouseConfig);\r\n\r\n    /// @notice Get `Vault` address\r\n    /// @return vault `Vault` address\r\n    function getVault() external view returns (address vault);\r\n\r\n    /// @notice Get `Exchange` address\r\n    /// @return exchange `Exchange` address\r\n    function getExchange() external view returns (address exchange);\r\n\r\n    /// @notice Get `OrderBook` address\r\n    /// @return orderBook `OrderBook` address\r\n    function getOrderBook() external view returns (address orderBook);\r\n\r\n    /// @notice Get AccountBalance address\r\n    /// @return accountBalance `AccountBalance` address\r\n    function getAccountBalance() external view returns (address accountBalance);\r\n\r\n    /// @notice Get `InsuranceFund` address\r\n    /// @return insuranceFund `InsuranceFund` address\r\n    function getInsuranceFund() external view returns (address insuranceFund);\r\n\r\n    /// @notice Get `DelegateApproval` address\r\n    /// @return delegateApproval `DelegateApproval` address\r\n    function getDelegateApproval() external view returns (address delegateApproval);\r\n}\r\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/gsn/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * a contract must implement this interface in order to support relayed transaction.\r\n * It is better to inherit the BaseRelayRecipient as its implementation.\r\n */\r\nabstract contract IRelayRecipient {\r\n    /**\r\n     * return if the forwarder is trusted to forward relayed transactions to us.\r\n     * the forwarder is required to verify the sender's signature, and verify\r\n     * the call is not a replay.\r\n     */\r\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool);\r\n\r\n    /**\r\n     * return the sender of this call.\r\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\r\n     * of the msg.data.\r\n     * otherwise, return `msg.sender`\r\n     * should be used in the contract anywhere instead of msg.sender\r\n     */\r\n    function _msgSender() internal view virtual returns (address payable);\r\n\r\n    /**\r\n     * return the msg.data of this call.\r\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\r\n     * of the msg.data - so this method will strip those 20 bytes off.\r\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\r\n     * should be used in the contract instead of msg.data, where this difference matters.\r\n     */\r\n    function _msgData() internal view virtual returns (bytes calldata);\r\n\r\n    function versionRecipient() external view virtual returns (string memory);\r\n}\r\n"
    },
    "contracts/Exchange.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\r\nimport { TickMath } from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\r\nimport { IUniswapV3SwapCallback } from \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\";\r\nimport { BlockContext } from \"./base/BlockContext.sol\";\r\nimport { UniswapV3Broker } from \"./lib/UniswapV3Broker.sol\";\r\nimport { PerpSafeCast } from \"./lib/PerpSafeCast.sol\";\r\nimport { SwapMath } from \"./lib/SwapMath.sol\";\r\nimport { PerpFixedPoint96 } from \"./lib/PerpFixedPoint96.sol\";\r\nimport { Funding } from \"./lib/Funding.sol\";\r\nimport { PerpMath } from \"./lib/PerpMath.sol\";\r\nimport { AccountMarket } from \"./lib/AccountMarket.sol\";\r\nimport { ClearingHouseCallee } from \"./base/ClearingHouseCallee.sol\";\r\nimport { UniswapV3CallbackBridge } from \"./base/UniswapV3CallbackBridge.sol\";\r\nimport { IOrderBook } from \"./interface/IOrderBook.sol\";\r\nimport { IMarketRegistry } from \"./interface/IMarketRegistry.sol\";\r\nimport { IAccountBalance } from \"./interface/IAccountBalance.sol\";\r\nimport { IClearingHouseConfig } from \"./interface/IClearingHouseConfig.sol\";\r\nimport { IIndexPrice } from \"./interface/IIndexPrice.sol\";\r\nimport { IBaseToken } from \"./interface/IBaseToken.sol\";\r\nimport { ExchangeStorageV1 } from \"./storage/ExchangeStorage.sol\";\r\nimport { IExchange } from \"./interface/IExchange.sol\";\r\nimport { OpenOrder } from \"./lib/OpenOrder.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract Exchange is\r\n    IUniswapV3SwapCallback,\r\n    IExchange,\r\n    BlockContext,\r\n    ClearingHouseCallee,\r\n    UniswapV3CallbackBridge,\r\n    ExchangeStorageV1\r\n{\r\n    using AddressUpgradeable for address;\r\n    using SafeMathUpgradeable for uint256;\r\n    using SignedSafeMathUpgradeable for int256;\r\n    using SignedSafeMathUpgradeable for int24;\r\n    using PerpMath for uint256;\r\n    using PerpMath for uint160;\r\n    using PerpMath for int256;\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for int256;\r\n\r\n    //\r\n    // STRUCT\r\n    //\r\n\r\n    struct InternalReplaySwapParams {\r\n        address baseToken;\r\n        bool isBaseToQuote;\r\n        bool isExactInput;\r\n        uint256 amount;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    struct InternalSwapResponse {\r\n        int256 base;\r\n        int256 quote;\r\n        int256 exchangedPositionSize;\r\n        int256 exchangedPositionNotional;\r\n        uint256 fee;\r\n        uint256 insuranceFundFee;\r\n        int24 tick;\r\n    }\r\n\r\n    struct InternalRealizePnlParams {\r\n        address trader;\r\n        address baseToken;\r\n        int256 takerPositionSize;\r\n        int256 takerOpenNotional;\r\n        int256 base;\r\n        int256 quote;\r\n    }\r\n\r\n    //\r\n    // CONSTANT\r\n    //\r\n\r\n    uint256 internal constant _FULLY_CLOSED_RATIO = 1e18;\r\n    uint24 internal constant _MAX_TICK_CROSSED_WITHIN_BLOCK_CAP = 1000; // 10%\r\n    uint24 internal constant _MAX_PRICE_SPREAD_RATIO = 0.2e6; // 20% in decimal 6\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize(\r\n        address marketRegistryArg,\r\n        address orderBookArg,\r\n        address clearingHouseConfigArg\r\n    ) external initializer {\r\n        __ClearingHouseCallee_init();\r\n        __UniswapV3CallbackBridge_init(marketRegistryArg);\r\n\r\n        // E_OBNC: OrderBook is not contract\r\n        require(orderBookArg.isContract(), \"E_OBNC\");\r\n        // E_CHNC: CH is not contract\r\n        require(clearingHouseConfigArg.isContract(), \"E_CHNC\");\r\n\r\n        // update states\r\n        _orderBook = orderBookArg;\r\n        _clearingHouseConfig = clearingHouseConfigArg;\r\n    }\r\n\r\n    /// @param accountBalanceArg: AccountBalance contract address\r\n    function setAccountBalance(address accountBalanceArg) external onlyOwner {\r\n        // accountBalance is 0\r\n        require(accountBalanceArg != address(0), \"E_AB0\");\r\n        _accountBalance = accountBalanceArg;\r\n        emit AccountBalanceChanged(accountBalanceArg);\r\n    }\r\n\r\n    /// @dev Restrict the price impact by setting the ticks can be crossed within a block when\r\n    /// trader reducing liquidity. It is used to prevent the malicious behavior of the malicious traders.\r\n    /// The restriction is applied in _isOverPriceLimitWithTick()\r\n    /// @param baseToken The base token address\r\n    /// @param maxTickCrossedWithinBlock The maximum ticks can be crossed within a block\r\n    function setMaxTickCrossedWithinBlock(address baseToken, uint24 maxTickCrossedWithinBlock) external onlyOwner {\r\n        // EX_BNC: baseToken is not contract\r\n        require(baseToken.isContract(), \"EX_BNC\");\r\n        // EX_BTNE: base token does not exists\r\n        require(IMarketRegistry(_marketRegistry).hasPool(baseToken), \"EX_BTNE\");\r\n\r\n        // tick range is [MIN_TICK, MAX_TICK], maxTickCrossedWithinBlock should be in [0, MAX_TICK - MIN_TICK]\r\n        // EX_MTCLOOR: max tick crossed limit out of range\r\n        require(maxTickCrossedWithinBlock <= _getMaxTickCrossedWithinBlockCap(), \"EX_MTCLOOR\");\r\n\r\n        _maxTickCrossedWithinBlockMap[baseToken] = maxTickCrossedWithinBlock;\r\n        emit MaxTickCrossedWithinBlockChanged(baseToken, maxTickCrossedWithinBlock);\r\n    }\r\n\r\n    /// @inheritdoc IUniswapV3SwapCallback\r\n    /// @dev This callback is forwarded to ClearingHouse.uniswapV3SwapCallback() because all the tokens\r\n    /// are stored in there.\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external override checkCallback {\r\n        IUniswapV3SwapCallback(_clearingHouse).uniswapV3SwapCallback(amount0Delta, amount1Delta, data);\r\n    }\r\n\r\n    /// @param params The parameters of the swap\r\n    /// @return The result of the swap\r\n    /// @dev can only be called from ClearingHouse\r\n    /// @inheritdoc IExchange\r\n    function swap(SwapParams memory params) external override returns (SwapResponse memory) {\r\n        _requireOnlyClearingHouse();\r\n\r\n        // EX_MIP: market is paused\r\n        require(_maxTickCrossedWithinBlockMap[params.baseToken] > 0, \"EX_MIP\");\r\n\r\n        int256 takerPositionSize =\r\n            IAccountBalance(_accountBalance).getTakerPositionSize(params.trader, params.baseToken);\r\n\r\n        bool isPartialClose;\r\n        bool isOverPriceLimit = _isOverPriceLimit(params.baseToken);\r\n        // if over price limit when\r\n        // 1. closing a position, then partially close the position\r\n        // 2. else then revert\r\n        if (params.isClose && takerPositionSize != 0) {\r\n            // if trader is on long side, baseToQuote: true, exactInput: true\r\n            // if trader is on short side, baseToQuote: false (quoteToBase), exactInput: false (exactOutput)\r\n            // simulate the tx to see if it _isOverPriceLimit; if true, can partially close the position only once\r\n            // if this is not the first tx in this timestamp and it's already over limit,\r\n            // then use _isOverPriceLimit is enough\r\n            if (\r\n                isOverPriceLimit ||\r\n                _isOverPriceLimitBySimulatingClosingPosition(\r\n                    params.baseToken,\r\n                    takerPositionSize < 0, // it's a short position\r\n                    params.amount // it's the same as takerPositionSize but in uint256\r\n                )\r\n            ) {\r\n                uint256 timestamp = _blockTimestamp();\r\n                // EX_AOPLO: already over price limit once\r\n                require(timestamp != _lastOverPriceLimitTimestampMap[params.trader][params.baseToken], \"EX_AOPLO\");\r\n\r\n                _lastOverPriceLimitTimestampMap[params.trader][params.baseToken] = timestamp;\r\n\r\n                uint24 partialCloseRatio = IClearingHouseConfig(_clearingHouseConfig).getPartialCloseRatio();\r\n                params.amount = params.amount.mulRatio(partialCloseRatio);\r\n                isPartialClose = true;\r\n            }\r\n        } else {\r\n            // EX_OPLBS: over price limit before swap\r\n            require(!isOverPriceLimit, \"EX_OPLBS\");\r\n        }\r\n\r\n        // get openNotional before swap\r\n        int256 oldTakerOpenNotional =\r\n            IAccountBalance(_accountBalance).getTakerOpenNotional(params.trader, params.baseToken);\r\n        InternalSwapResponse memory response = _swap(params);\r\n\r\n        if (!params.isClose) {\r\n            // over price limit after swap\r\n            require(!_isOverPriceLimitWithTick(params.baseToken, response.tick), \"EX_OPLAS\");\r\n        }\r\n\r\n        // when takerPositionSize < 0, it's a short position\r\n        bool isReducingPosition = takerPositionSize == 0 ? false : takerPositionSize < 0 != params.isBaseToQuote;\r\n        // when reducing/not increasing the position size, it's necessary to realize pnl\r\n        int256 pnlToBeRealized;\r\n        if (isReducingPosition) {\r\n            pnlToBeRealized = _getPnlToBeRealized(\r\n                InternalRealizePnlParams({\r\n                    trader: params.trader,\r\n                    baseToken: params.baseToken,\r\n                    takerPositionSize: takerPositionSize,\r\n                    takerOpenNotional: oldTakerOpenNotional,\r\n                    base: response.base,\r\n                    quote: response.quote\r\n                })\r\n            );\r\n        }\r\n\r\n        (uint256 sqrtPriceX96, , , , , , ) =\r\n            UniswapV3Broker.getSlot0(IMarketRegistry(_marketRegistry).getPool(params.baseToken));\r\n        return\r\n            SwapResponse({\r\n                base: response.base.abs(),\r\n                quote: response.quote.abs(),\r\n                exchangedPositionSize: response.exchangedPositionSize,\r\n                exchangedPositionNotional: response.exchangedPositionNotional,\r\n                fee: response.fee,\r\n                insuranceFundFee: response.insuranceFundFee,\r\n                pnlToBeRealized: pnlToBeRealized,\r\n                sqrtPriceAfterX96: sqrtPriceX96,\r\n                tick: response.tick,\r\n                isPartialClose: isPartialClose\r\n            });\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function settleFunding(address trader, address baseToken)\r\n        external\r\n        override\r\n        returns (int256 fundingPayment, Funding.Growth memory fundingGrowthGlobal)\r\n    {\r\n        _requireOnlyClearingHouse();\r\n        // EX_BTNE: base token does not exists\r\n        require(IMarketRegistry(_marketRegistry).hasPool(baseToken), \"EX_BTNE\");\r\n\r\n        // if updating TWAP fails, this call will be reverted and thus using try-catch\r\n        try IBaseToken(baseToken).cacheTwap(IClearingHouseConfig(_clearingHouseConfig).getTwapInterval()) {} catch {}\r\n        uint256 markTwap;\r\n        uint256 indexTwap;\r\n        (fundingGrowthGlobal, markTwap, indexTwap) = _getFundingGrowthGlobalAndTwaps(baseToken);\r\n\r\n        fundingPayment = _updateFundingGrowth(\r\n            trader,\r\n            baseToken,\r\n            IAccountBalance(_accountBalance).getBase(trader, baseToken),\r\n            IAccountBalance(_accountBalance).getAccountInfo(trader, baseToken).lastTwPremiumGrowthGlobalX96,\r\n            fundingGrowthGlobal\r\n        );\r\n\r\n        // funding will be stopped once the market is being paused\r\n        uint256 timestamp =\r\n            IBaseToken(baseToken).isOpen() ? _blockTimestamp() : IBaseToken(baseToken).getPausedTimestamp();\r\n\r\n        // update states before further actions in this block; once per block\r\n        if (timestamp != _lastSettledTimestampMap[baseToken]) {\r\n            // update fundingGrowthGlobal and _lastSettledTimestamp\r\n            Funding.Growth storage lastFundingGrowthGlobal = _globalFundingGrowthX96Map[baseToken];\r\n            (\r\n                _lastSettledTimestampMap[baseToken],\r\n                lastFundingGrowthGlobal.twPremiumX96,\r\n                lastFundingGrowthGlobal.twPremiumDivBySqrtPriceX96\r\n            ) = (timestamp, fundingGrowthGlobal.twPremiumX96, fundingGrowthGlobal.twPremiumDivBySqrtPriceX96);\r\n\r\n            emit FundingUpdated(baseToken, markTwap, indexTwap);\r\n\r\n            // update tick for price limit checks\r\n            _lastUpdatedTickMap[baseToken] = _getTick(baseToken);\r\n        }\r\n\r\n        return (fundingPayment, fundingGrowthGlobal);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IExchange\r\n    function getOrderBook() external view override returns (address) {\r\n        return _orderBook;\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function getAccountBalance() external view override returns (address) {\r\n        return _accountBalance;\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function getClearingHouseConfig() external view override returns (address) {\r\n        return _clearingHouseConfig;\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function getMaxTickCrossedWithinBlock(address baseToken) external view override returns (uint24) {\r\n        return _maxTickCrossedWithinBlockMap[baseToken];\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function getPnlToBeRealized(RealizePnlParams memory params) external view override returns (int256) {\r\n        AccountMarket.Info memory info =\r\n            IAccountBalance(_accountBalance).getAccountInfo(params.trader, params.baseToken);\r\n\r\n        int256 takerOpenNotional = info.takerOpenNotional;\r\n        int256 takerPositionSize = info.takerPositionSize;\r\n        // when takerPositionSize < 0, it's a short position; when base < 0, isBaseToQuote(shorting)\r\n        bool isReducingPosition = takerPositionSize == 0 ? false : takerPositionSize < 0 != params.base < 0;\r\n\r\n        return\r\n            isReducingPosition\r\n                ? _getPnlToBeRealized(\r\n                    InternalRealizePnlParams({\r\n                        trader: params.trader,\r\n                        baseToken: params.baseToken,\r\n                        takerPositionSize: takerPositionSize,\r\n                        takerOpenNotional: takerOpenNotional,\r\n                        base: params.base,\r\n                        quote: params.quote\r\n                    })\r\n                )\r\n                : 0;\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function getAllPendingFundingPayment(address trader) external view override returns (int256 pendingFundingPayment) {\r\n        address[] memory baseTokens = IAccountBalance(_accountBalance).getBaseTokens(trader);\r\n        uint256 baseTokenLength = baseTokens.length;\r\n\r\n        for (uint256 i = 0; i < baseTokenLength; i++) {\r\n            pendingFundingPayment = pendingFundingPayment.add(getPendingFundingPayment(trader, baseTokens[i]));\r\n        }\r\n        return pendingFundingPayment;\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function isOverPriceSpread(address baseToken) external view override returns (bool) {\r\n        uint256 markPrice = getSqrtMarkTwapX96(baseToken, 0).formatSqrtPriceX96ToPriceX96().formatX96ToX10_18();\r\n        uint256 indexTwap =\r\n            IIndexPrice(baseToken).getIndexPrice(IClearingHouseConfig(_clearingHouseConfig).getTwapInterval());\r\n        uint256 spread = markPrice > indexTwap ? markPrice.sub(indexTwap) : indexTwap.sub(markPrice);\r\n        return spread > PerpMath.mulRatio(indexTwap, _MAX_PRICE_SPREAD_RATIO);\r\n    }\r\n\r\n    //\r\n    // PUBLIC VIEW\r\n    //\r\n\r\n    /// @inheritdoc IExchange\r\n    function getPendingFundingPayment(address trader, address baseToken) public view override returns (int256) {\r\n        (Funding.Growth memory fundingGrowthGlobal, , ) = _getFundingGrowthGlobalAndTwaps(baseToken);\r\n\r\n        int256 liquidityCoefficientInFundingPayment =\r\n            IOrderBook(_orderBook).getLiquidityCoefficientInFundingPayment(trader, baseToken, fundingGrowthGlobal);\r\n\r\n        return\r\n            Funding.calcPendingFundingPaymentWithLiquidityCoefficient(\r\n                IAccountBalance(_accountBalance).getBase(trader, baseToken),\r\n                IAccountBalance(_accountBalance).getAccountInfo(trader, baseToken).lastTwPremiumGrowthGlobalX96,\r\n                fundingGrowthGlobal,\r\n                liquidityCoefficientInFundingPayment\r\n            );\r\n    }\r\n\r\n    /// @inheritdoc IExchange\r\n    function getSqrtMarkTwapX96(address baseToken, uint32 twapInterval) public view override returns (uint160) {\r\n        return UniswapV3Broker.getSqrtMarkTwapX96(IMarketRegistry(_marketRegistry).getPool(baseToken), twapInterval);\r\n    }\r\n\r\n    //\r\n    // INTERNAL NON-VIEW\r\n    //\r\n\r\n    /// @dev this function is used only when closePosition()\r\n    ///      inspect whether a tx will go over price limit by simulating closing position before swapping\r\n    function _isOverPriceLimitBySimulatingClosingPosition(\r\n        address baseToken,\r\n        bool isOldPositionShort,\r\n        uint256 positionSize\r\n    ) internal returns (bool) {\r\n        // to simulate closing position, isOldPositionShort -> quote to exact base/long; else, exact base to quote/short\r\n        return\r\n            _isOverPriceLimitWithTick(\r\n                baseToken,\r\n                _replaySwap(\r\n                    InternalReplaySwapParams({\r\n                        baseToken: baseToken,\r\n                        isBaseToQuote: !isOldPositionShort,\r\n                        isExactInput: !isOldPositionShort,\r\n                        amount: positionSize,\r\n                        sqrtPriceLimitX96: _getSqrtPriceLimitForReplaySwap(baseToken, isOldPositionShort)\r\n                    })\r\n                )\r\n            );\r\n    }\r\n\r\n    /// @return tick the resulting tick (derived from price) after replaying the swap\r\n    function _replaySwap(InternalReplaySwapParams memory params) internal returns (int24 tick) {\r\n        IMarketRegistry.MarketInfo memory marketInfo = IMarketRegistry(_marketRegistry).getMarketInfo(params.baseToken);\r\n        uint24 exchangeFeeRatio = marketInfo.exchangeFeeRatio;\r\n        uint24 uniswapFeeRatio = marketInfo.uniswapFeeRatio;\r\n        (, int256 signedScaledAmountForReplaySwap) =\r\n            SwapMath.calcScaledAmountForSwaps(\r\n                params.isBaseToQuote,\r\n                params.isExactInput,\r\n                params.amount,\r\n                exchangeFeeRatio,\r\n                uniswapFeeRatio\r\n            );\r\n\r\n        // globalFundingGrowth can be empty if shouldUpdateState is false\r\n        IOrderBook.ReplaySwapResponse memory response =\r\n            IOrderBook(_orderBook).replaySwap(\r\n                IOrderBook.ReplaySwapParams({\r\n                    baseToken: params.baseToken,\r\n                    isBaseToQuote: params.isBaseToQuote,\r\n                    amount: signedScaledAmountForReplaySwap,\r\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96,\r\n                    exchangeFeeRatio: exchangeFeeRatio,\r\n                    uniswapFeeRatio: uniswapFeeRatio,\r\n                    shouldUpdateState: false,\r\n                    globalFundingGrowth: Funding.Growth({ twPremiumX96: 0, twPremiumDivBySqrtPriceX96: 0 })\r\n                })\r\n            );\r\n        return response.tick;\r\n    }\r\n\r\n    /// @dev customized fee: https://www.notion.so/perp/Customise-fee-tier-on-B2QFee-1b7244e1db63416c8651e8fa04128cdb\r\n    function _swap(SwapParams memory params) internal returns (InternalSwapResponse memory) {\r\n        IMarketRegistry.MarketInfo memory marketInfo = IMarketRegistry(_marketRegistry).getMarketInfo(params.baseToken);\r\n\r\n        (uint256 scaledAmountForUniswapV3PoolSwap, int256 signedScaledAmountForReplaySwap) =\r\n            SwapMath.calcScaledAmountForSwaps(\r\n                params.isBaseToQuote,\r\n                params.isExactInput,\r\n                params.amount,\r\n                marketInfo.exchangeFeeRatio,\r\n                marketInfo.uniswapFeeRatio\r\n            );\r\n\r\n        (Funding.Growth memory fundingGrowthGlobal, , ) = _getFundingGrowthGlobalAndTwaps(params.baseToken);\r\n        // simulate the swap to calculate the fees charged in exchange\r\n        IOrderBook.ReplaySwapResponse memory replayResponse =\r\n            IOrderBook(_orderBook).replaySwap(\r\n                IOrderBook.ReplaySwapParams({\r\n                    baseToken: params.baseToken,\r\n                    isBaseToQuote: params.isBaseToQuote,\r\n                    shouldUpdateState: true,\r\n                    amount: signedScaledAmountForReplaySwap,\r\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96,\r\n                    exchangeFeeRatio: marketInfo.exchangeFeeRatio,\r\n                    uniswapFeeRatio: marketInfo.uniswapFeeRatio,\r\n                    globalFundingGrowth: fundingGrowthGlobal\r\n                })\r\n            );\r\n        UniswapV3Broker.SwapResponse memory response =\r\n            UniswapV3Broker.swap(\r\n                UniswapV3Broker.SwapParams(\r\n                    marketInfo.pool,\r\n                    _clearingHouse,\r\n                    params.isBaseToQuote,\r\n                    params.isExactInput,\r\n                    // mint extra base token before swap\r\n                    scaledAmountForUniswapV3PoolSwap,\r\n                    params.sqrtPriceLimitX96,\r\n                    abi.encode(\r\n                        SwapCallbackData({\r\n                            trader: params.trader,\r\n                            baseToken: params.baseToken,\r\n                            pool: marketInfo.pool,\r\n                            fee: replayResponse.fee,\r\n                            uniswapFeeRatio: marketInfo.uniswapFeeRatio\r\n                        })\r\n                    )\r\n                )\r\n            );\r\n\r\n        // as we charge fees in ClearingHouse instead of in Uniswap pools,\r\n        // we need to scale up base or quote amounts to get the exact exchanged position size and notional\r\n        int256 exchangedPositionSize;\r\n        int256 exchangedPositionNotional;\r\n        if (params.isBaseToQuote) {\r\n            // short: exchangedPositionSize <= 0 && exchangedPositionNotional >= 0\r\n            exchangedPositionSize = SwapMath\r\n                .calcAmountScaledByFeeRatio(response.base, marketInfo.uniswapFeeRatio, false)\r\n                .neg256();\r\n            // due to base to quote fee, exchangedPositionNotional contains the fee\r\n            // s.t. we can take the fee away from exchangedPositionNotional\r\n            exchangedPositionNotional = response.quote.toInt256();\r\n        } else {\r\n            // long: exchangedPositionSize >= 0 && exchangedPositionNotional <= 0\r\n            exchangedPositionSize = response.base.toInt256();\r\n            exchangedPositionNotional = SwapMath\r\n                .calcAmountScaledByFeeRatio(response.quote, marketInfo.uniswapFeeRatio, false)\r\n                .neg256();\r\n        }\r\n\r\n        // update the timestamp of the first tx in this market\r\n        if (_firstTradedTimestampMap[params.baseToken] == 0) {\r\n            _firstTradedTimestampMap[params.baseToken] = _blockTimestamp();\r\n        }\r\n\r\n        return\r\n            InternalSwapResponse({\r\n                base: exchangedPositionSize,\r\n                quote: exchangedPositionNotional.sub(replayResponse.fee.toInt256()),\r\n                exchangedPositionSize: exchangedPositionSize,\r\n                exchangedPositionNotional: exchangedPositionNotional,\r\n                fee: replayResponse.fee,\r\n                insuranceFundFee: replayResponse.insuranceFundFee,\r\n                tick: replayResponse.tick\r\n            });\r\n    }\r\n\r\n    /// @dev this is the non-view version of getPendingFundingPayment()\r\n    /// @return pendingFundingPayment the pending funding payment of a trader in one market,\r\n    ///         including liquidity & balance coefficients\r\n    function _updateFundingGrowth(\r\n        address trader,\r\n        address baseToken,\r\n        int256 baseBalance,\r\n        int256 twPremiumGrowthGlobalX96,\r\n        Funding.Growth memory fundingGrowthGlobal\r\n    ) internal returns (int256 pendingFundingPayment) {\r\n        int256 liquidityCoefficientInFundingPayment =\r\n            IOrderBook(_orderBook).updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\r\n                trader,\r\n                baseToken,\r\n                fundingGrowthGlobal\r\n            );\r\n\r\n        return\r\n            Funding.calcPendingFundingPaymentWithLiquidityCoefficient(\r\n                baseBalance,\r\n                twPremiumGrowthGlobalX96,\r\n                fundingGrowthGlobal,\r\n                liquidityCoefficientInFundingPayment\r\n            );\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    function _isOverPriceLimit(address baseToken) internal view returns (bool) {\r\n        int24 tick = _getTick(baseToken);\r\n        return _isOverPriceLimitWithTick(baseToken, tick);\r\n    }\r\n\r\n    function _isOverPriceLimitWithTick(address baseToken, int24 tick) internal view returns (bool) {\r\n        uint24 maxDeltaTick = _maxTickCrossedWithinBlockMap[baseToken];\r\n        int24 lastUpdatedTick = _lastUpdatedTickMap[baseToken];\r\n        // no overflow/underflow issue because there are range limits for tick and maxDeltaTick\r\n        int24 upperTickBound = lastUpdatedTick.add(maxDeltaTick).toInt24();\r\n        int24 lowerTickBound = lastUpdatedTick.sub(maxDeltaTick).toInt24();\r\n        return (tick < lowerTickBound || tick > upperTickBound);\r\n    }\r\n\r\n    function _getTick(address baseToken) internal view returns (int24) {\r\n        (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(IMarketRegistry(_marketRegistry).getPool(baseToken));\r\n        return tick;\r\n    }\r\n\r\n    /// @dev this function calculates the up-to-date globalFundingGrowth and twaps and pass them out\r\n    /// @return fundingGrowthGlobal the up-to-date globalFundingGrowth\r\n    /// @return markTwap only for settleFunding()\r\n    /// @return indexTwap only for settleFunding()\r\n    function _getFundingGrowthGlobalAndTwaps(address baseToken)\r\n        internal\r\n        view\r\n        returns (\r\n            Funding.Growth memory fundingGrowthGlobal,\r\n            uint256 markTwap,\r\n            uint256 indexTwap\r\n        )\r\n    {\r\n        bool marketOpen = IBaseToken(baseToken).isOpen();\r\n        uint256 timestamp = marketOpen ? _blockTimestamp() : IBaseToken(baseToken).getPausedTimestamp();\r\n\r\n        // shorten twapInterval if prior observations are not enough\r\n        uint32 twapInterval;\r\n        if (_firstTradedTimestampMap[baseToken] != 0) {\r\n            twapInterval = IClearingHouseConfig(_clearingHouseConfig).getTwapInterval();\r\n            // overflow inspection:\r\n            // 2 ^ 32 = 4,294,967,296 > 100 years = 60 * 60 * 24 * 365 * 100 = 3,153,600,000\r\n            uint32 deltaTimestamp = timestamp.sub(_firstTradedTimestampMap[baseToken]).toUint32();\r\n            twapInterval = twapInterval > deltaTimestamp ? deltaTimestamp : twapInterval;\r\n        }\r\n\r\n        uint256 markTwapX96;\r\n        if (marketOpen) {\r\n            markTwapX96 = getSqrtMarkTwapX96(baseToken, twapInterval).formatSqrtPriceX96ToPriceX96();\r\n            indexTwap = IIndexPrice(baseToken).getIndexPrice(twapInterval);\r\n        } else {\r\n            // if a market is paused/closed, we use the last known index price which is getPausedIndexPrice\r\n            //\r\n            // -----+--- twap interval ---+--- secondsAgo ---+\r\n            //                        pausedTime            now\r\n\r\n            // timestamp is pausedTime when the market is not open\r\n            uint32 secondsAgo = _blockTimestamp().sub(timestamp).toUint32();\r\n            markTwapX96 = UniswapV3Broker\r\n                .getSqrtMarkTwapX96From(IMarketRegistry(_marketRegistry).getPool(baseToken), secondsAgo, twapInterval)\r\n                .formatSqrtPriceX96ToPriceX96();\r\n            indexTwap = IBaseToken(baseToken).getPausedIndexPrice();\r\n        }\r\n        markTwap = markTwapX96.formatX96ToX10_18();\r\n\r\n        uint256 lastSettledTimestamp = _lastSettledTimestampMap[baseToken];\r\n        Funding.Growth storage lastFundingGrowthGlobal = _globalFundingGrowthX96Map[baseToken];\r\n        if (timestamp == lastSettledTimestamp || lastSettledTimestamp == 0) {\r\n            // if this is the latest updated timestamp, values in _globalFundingGrowthX96Map are up-to-date already\r\n            fundingGrowthGlobal = lastFundingGrowthGlobal;\r\n        } else {\r\n            // deltaTwPremium = (markTwap - indexTwap) * (now - lastSettledTimestamp)\r\n            int256 deltaTwPremiumX96 =\r\n                _getDeltaTwapX96(markTwapX96, indexTwap.formatX10_18ToX96()).mul(\r\n                    timestamp.sub(lastSettledTimestamp).toInt256()\r\n                );\r\n            fundingGrowthGlobal.twPremiumX96 = lastFundingGrowthGlobal.twPremiumX96.add(deltaTwPremiumX96);\r\n\r\n            // overflow inspection:\r\n            // assuming premium = 1 billion (1e9), time diff = 1 year (3600 * 24 * 365)\r\n            // log(1e9 * 2^96 * (3600 * 24 * 365) * 2^96) / log(2) = 246.8078491997 < 255\r\n            // twPremiumDivBySqrtPrice += deltaTwPremium / getSqrtMarkTwap(baseToken)\r\n            fundingGrowthGlobal.twPremiumDivBySqrtPriceX96 = lastFundingGrowthGlobal.twPremiumDivBySqrtPriceX96.add(\r\n                PerpMath.mulDiv(deltaTwPremiumX96, PerpFixedPoint96._IQ96, getSqrtMarkTwapX96(baseToken, 0))\r\n            );\r\n        }\r\n\r\n        return (fundingGrowthGlobal, markTwap, indexTwap);\r\n    }\r\n\r\n    /// @dev get a price limit for replaySwap s.t. it can stop when reaching the limit to save gas\r\n    function _getSqrtPriceLimitForReplaySwap(address baseToken, bool isLong) internal view returns (uint160) {\r\n        int24 lastUpdatedTick = _lastUpdatedTickMap[baseToken];\r\n        uint24 maxDeltaTick = _maxTickCrossedWithinBlockMap[baseToken];\r\n\r\n        // price limit = max tick + 1 or min tick - 1, depending on which direction\r\n        int24 tickBoundary =\r\n            isLong ? lastUpdatedTick + int24(maxDeltaTick) + 1 : lastUpdatedTick - int24(maxDeltaTick) - 1;\r\n\r\n        // tickBoundary should be in [MIN_TICK, MAX_TICK]\r\n        tickBoundary = tickBoundary > TickMath.MAX_TICK ? TickMath.MAX_TICK : tickBoundary;\r\n        tickBoundary = tickBoundary < TickMath.MIN_TICK ? TickMath.MIN_TICK : tickBoundary;\r\n\r\n        return TickMath.getSqrtRatioAtTick(tickBoundary);\r\n    }\r\n\r\n    function _getDeltaTwapX96(uint256 markTwapX96, uint256 indexTwapX96) internal view returns (int256 deltaTwapX96) {\r\n        uint24 maxFundingRate = IClearingHouseConfig(_clearingHouseConfig).getMaxFundingRate();\r\n        uint256 maxDeltaTwapX96 = indexTwapX96.mulRatio(maxFundingRate);\r\n        uint256 absDeltaTwapX96;\r\n        if (markTwapX96 > indexTwapX96) {\r\n            absDeltaTwapX96 = markTwapX96.sub(indexTwapX96);\r\n            deltaTwapX96 = absDeltaTwapX96 > maxDeltaTwapX96 ? maxDeltaTwapX96.toInt256() : absDeltaTwapX96.toInt256();\r\n        } else {\r\n            absDeltaTwapX96 = indexTwapX96.sub(markTwapX96);\r\n            deltaTwapX96 = absDeltaTwapX96 > maxDeltaTwapX96 ? maxDeltaTwapX96.neg256() : absDeltaTwapX96.neg256();\r\n        }\r\n    }\r\n\r\n    function _getPnlToBeRealized(InternalRealizePnlParams memory params) internal pure returns (int256) {\r\n        // closedRatio is based on the position size\r\n        uint256 closedRatio = FullMath.mulDiv(params.base.abs(), _FULLY_CLOSED_RATIO, params.takerPositionSize.abs());\r\n\r\n        int256 pnlToBeRealized;\r\n        // if closedRatio <= 1, it's reducing or closing a position; else, it's opening a larger reverse position\r\n        if (closedRatio <= _FULLY_CLOSED_RATIO) {\r\n            // https://docs.google.com/spreadsheets/d/1QwN_UZOiASv3dPBP7bNVdLR_GTaZGUrHW3-29ttMbLs/edit#gid=148137350\r\n            // taker:\r\n            // step 1: long 20 base\r\n            // openNotionalFraction = 252.53\r\n            // openNotional = -252.53\r\n            // step 2: short 10 base (reduce half of the position)\r\n            // quote = 137.5\r\n            // closeRatio = 10/20 = 0.5\r\n            // reducedOpenNotional = openNotional * closedRatio = -252.53 * 0.5 = -126.265\r\n            // realizedPnl = quote + reducedOpenNotional = 137.5 + -126.265 = 11.235\r\n            // openNotionalFraction = openNotionalFraction - quote + realizedPnl\r\n            //                      = 252.53 - 137.5 + 11.235 = 126.265\r\n            // openNotional = -openNotionalFraction = 126.265\r\n\r\n            // overflow inspection:\r\n            // max closedRatio = 1e18; range of oldOpenNotional = (-2 ^ 255, 2 ^ 255)\r\n            // only overflow when oldOpenNotional < -2 ^ 255 / 1e18 or oldOpenNotional > 2 ^ 255 / 1e18\r\n            int256 reducedOpenNotional = params.takerOpenNotional.mulDiv(closedRatio.toInt256(), _FULLY_CLOSED_RATIO);\r\n            pnlToBeRealized = params.quote.add(reducedOpenNotional);\r\n        } else {\r\n            // https://docs.google.com/spreadsheets/d/1QwN_UZOiASv3dPBP7bNVdLR_GTaZGUrHW3-29ttMbLs/edit#gid=668982944\r\n            // taker:\r\n            // step 1: long 20 base\r\n            // openNotionalFraction = 252.53\r\n            // openNotional = -252.53\r\n            // step 2: short 30 base (open a larger reverse position)\r\n            // quote = 337.5\r\n            // closeRatio = 30/20 = 1.5\r\n            // closedPositionNotional = quote / closeRatio = 337.5 / 1.5 = 225\r\n            // remainsPositionNotional = quote - closedPositionNotional = 337.5 - 225 = 112.5\r\n            // realizedPnl = closedPositionNotional + openNotional = -252.53 + 225 = -27.53\r\n            // openNotionalFraction = openNotionalFraction - quote + realizedPnl\r\n            //                      = 252.53 - 337.5 + -27.53 = -112.5\r\n            // openNotional = -openNotionalFraction = remainsPositionNotional = 112.5\r\n\r\n            // overflow inspection:\r\n            // max & min tick = 887272, -887272; max liquidity = 2 ^ 128\r\n            // max quote = 2^128 * (sqrt(1.0001^887272) - sqrt(1.0001^-887272)) = 6.276865796e57 < 2^255 / 1e18\r\n            int256 closedPositionNotional = params.quote.mulDiv(int256(_FULLY_CLOSED_RATIO), closedRatio);\r\n            pnlToBeRealized = params.takerOpenNotional.add(closedPositionNotional);\r\n        }\r\n\r\n        return pnlToBeRealized;\r\n    }\r\n\r\n    // @dev use virtual for testing\r\n    function _getMaxTickCrossedWithinBlockCap() internal pure virtual returns (uint24) {\r\n        return _MAX_TICK_CROSSED_WITHIN_BLOCK_CAP;\r\n    }\r\n}\r\n"
    },
    "contracts/lib/UniswapV3Broker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { IUniswapV3Pool } from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport { IUniswapV3Factory } from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\r\nimport { TickMath } from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\r\nimport { LiquidityAmounts } from \"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\";\r\nimport { PoolAddress } from \"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\";\r\nimport { BitMath } from \"@uniswap/v3-core/contracts/libraries/BitMath.sol\";\r\nimport { PerpSafeCast } from \"./PerpSafeCast.sol\";\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { PerpMath } from \"../lib/PerpMath.sol\";\r\n\r\n/**\r\n * Uniswap's v3 pool: token0 & token1\r\n * -> token0's price = token1 / token0; tick index = log(1.0001, token0's price)\r\n * Our system: base & quote\r\n * -> base's price = quote / base; tick index = log(1.0001, base price)\r\n * Thus, we require that (base, quote) = (token0, token1) is always true for convenience\r\n */\r\nlibrary UniswapV3Broker {\r\n    using SafeMathUpgradeable for uint256;\r\n    using PerpMath for int256;\r\n    using PerpMath for uint256;\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for int256;\r\n\r\n    //\r\n    // STRUCT\r\n    //\r\n\r\n    struct AddLiquidityParams {\r\n        address pool;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint256 base;\r\n        uint256 quote;\r\n        bytes data;\r\n    }\r\n\r\n    struct AddLiquidityResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n        uint128 liquidity;\r\n    }\r\n\r\n    struct RemoveLiquidityParams {\r\n        address pool;\r\n        address recipient;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint128 liquidity;\r\n    }\r\n\r\n    /// @param base amount of base token received from burning the liquidity (excl. fee)\r\n    /// @param quote amount of quote token received from burning the liquidity (excl. fee)\r\n    struct RemoveLiquidityResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n    }\r\n\r\n    struct SwapState {\r\n        int24 tick;\r\n        uint160 sqrtPriceX96;\r\n        int256 amountSpecifiedRemaining;\r\n        uint256 feeGrowthGlobalX128;\r\n        uint128 liquidity;\r\n    }\r\n\r\n    struct SwapParams {\r\n        address pool;\r\n        address recipient;\r\n        bool isBaseToQuote;\r\n        bool isExactInput;\r\n        uint256 amount;\r\n        uint160 sqrtPriceLimitX96;\r\n        bytes data;\r\n    }\r\n\r\n    struct SwapResponse {\r\n        uint256 base;\r\n        uint256 quote;\r\n    }\r\n\r\n    //\r\n    // CONSTANT\r\n    //\r\n\r\n    uint256 internal constant _DUST = 10;\r\n\r\n    //\r\n    // INTERNAL NON-VIEW\r\n    //\r\n\r\n    function addLiquidity(AddLiquidityParams memory params) internal returns (AddLiquidityResponse memory) {\r\n        (uint160 sqrtMarkPrice, , , , , , ) = getSlot0(params.pool);\r\n\r\n        // get the equivalent amount of liquidity from amount0 & amount1 with current price\r\n        uint128 liquidity =\r\n            LiquidityAmounts.getLiquidityForAmounts(\r\n                sqrtMarkPrice,\r\n                TickMath.getSqrtRatioAtTick(params.lowerTick),\r\n                TickMath.getSqrtRatioAtTick(params.upperTick),\r\n                params.base,\r\n                params.quote\r\n            );\r\n\r\n        (uint256 addedAmount0, uint256 addedAmount1) =\r\n            IUniswapV3Pool(params.pool).mint(address(this), params.lowerTick, params.upperTick, liquidity, params.data);\r\n\r\n        return AddLiquidityResponse({ base: addedAmount0, quote: addedAmount1, liquidity: liquidity });\r\n    }\r\n\r\n    function removeLiquidity(RemoveLiquidityParams memory params) internal returns (RemoveLiquidityResponse memory) {\r\n        // call burn(), which only updates tokensOwed instead of transferring the tokens\r\n        (uint256 amount0Burned, uint256 amount1Burned) =\r\n            IUniswapV3Pool(params.pool).burn(params.lowerTick, params.upperTick, params.liquidity);\r\n\r\n        // call collect() to transfer tokens to CH\r\n        // we don't care about the returned values here as they include:\r\n        // 1. every maker's fee in the same range (ClearingHouse is the only maker in the pool's perspective)\r\n        // 2. the amount of token equivalent to liquidity burned\r\n        IUniswapV3Pool(params.pool).collect(\r\n            params.recipient,\r\n            params.lowerTick,\r\n            params.upperTick,\r\n            type(uint128).max,\r\n            type(uint128).max\r\n        );\r\n\r\n        return RemoveLiquidityResponse({ base: amount0Burned, quote: amount1Burned });\r\n    }\r\n\r\n    function swap(SwapParams memory params) internal returns (SwapResponse memory response) {\r\n        // UniswapV3Pool uses the sign to determine isExactInput or not\r\n        int256 specifiedAmount = params.isExactInput ? params.amount.toInt256() : params.amount.neg256();\r\n\r\n        // signedAmount0 & signedAmount1 are delta amounts, in the perspective of the pool\r\n        // > 0: pool gets; user pays\r\n        // < 0: pool provides; user gets\r\n        (int256 signedAmount0, int256 signedAmount1) =\r\n            IUniswapV3Pool(params.pool).swap(\r\n                params.recipient,\r\n                params.isBaseToQuote,\r\n                specifiedAmount,\r\n                params.sqrtPriceLimitX96 == 0\r\n                    ? (params.isBaseToQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\r\n                    : params.sqrtPriceLimitX96,\r\n                params.data\r\n            );\r\n\r\n        (uint256 amount0, uint256 amount1) = (signedAmount0.abs(), signedAmount1.abs());\r\n\r\n        // isExactInput = true, isZeroForOne = true => exact token0\r\n        // isExactInput = false, isZeroForOne = false => exact token0\r\n        // isExactInput = false, isZeroForOne = true => exact token1\r\n        // isExactInput = true, isZeroForOne = false => exact token1\r\n        uint256 exactAmount = params.isExactInput == params.isBaseToQuote ? amount0 : amount1;\r\n\r\n        // if no price limit, require the full output amount as it's technically possible for amounts to not match\r\n        // UB_UOA: unmatched output amount\r\n        if (!params.isExactInput && params.sqrtPriceLimitX96 == 0) {\r\n            require(\r\n                (exactAmount > params.amount ? exactAmount.sub(params.amount) : params.amount.sub(exactAmount)) < _DUST,\r\n                \"UB_UOA\"\r\n            );\r\n            return params.isBaseToQuote ? SwapResponse(amount0, params.amount) : SwapResponse(params.amount, amount1);\r\n        }\r\n\r\n        return SwapResponse(amount0, amount1);\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    function getPool(\r\n        address factory,\r\n        address quoteToken,\r\n        address baseToken,\r\n        uint24 uniswapFeeRatio\r\n    ) internal view returns (address) {\r\n        PoolAddress.PoolKey memory poolKeys = PoolAddress.getPoolKey(quoteToken, baseToken, uniswapFeeRatio);\r\n        return IUniswapV3Factory(factory).getPool(poolKeys.token0, poolKeys.token1, uniswapFeeRatio);\r\n    }\r\n\r\n    function getTickSpacing(address pool) internal view returns (int24 tickSpacing) {\r\n        tickSpacing = IUniswapV3Pool(pool).tickSpacing();\r\n    }\r\n\r\n    function getSlot0(address pool)\r\n        internal\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint8 feeProtocol,\r\n            bool unlocked\r\n        )\r\n    {\r\n        return IUniswapV3Pool(pool).slot0();\r\n    }\r\n\r\n    function getTick(address pool) internal view returns (int24 tick) {\r\n        (, tick, , , , , ) = IUniswapV3Pool(pool).slot0();\r\n    }\r\n\r\n    function getIsTickInitialized(address pool, int24 tick) internal view returns (bool initialized) {\r\n        (, , , , , , , initialized) = IUniswapV3Pool(pool).ticks(tick);\r\n    }\r\n\r\n    function getTickLiquidityNet(address pool, int24 tick) internal view returns (int128 liquidityNet) {\r\n        (, liquidityNet, , , , , , ) = IUniswapV3Pool(pool).ticks(tick);\r\n    }\r\n\r\n    function getSqrtMarkPriceX96(address pool) internal view returns (uint160 sqrtMarkPrice) {\r\n        (sqrtMarkPrice, , , , , , ) = IUniswapV3Pool(pool).slot0();\r\n    }\r\n\r\n    function getLiquidity(address pool) internal view returns (uint128 liquidity) {\r\n        return IUniswapV3Pool(pool).liquidity();\r\n    }\r\n\r\n    /// @dev if twapInterval < 10 (should be less than 1 block), return mark price without twap directly,\r\n    ///      as twapInterval is too short and makes getting twap over such a short period meaningless\r\n    function getSqrtMarkTwapX96(address pool, uint32 twapInterval) internal view returns (uint160) {\r\n        return getSqrtMarkTwapX96From(pool, 0, twapInterval);\r\n    }\r\n\r\n    function getSqrtMarkTwapX96From(\r\n        address pool,\r\n        uint32 secondsAgo,\r\n        uint32 twapInterval\r\n    ) internal view returns (uint160) {\r\n        // return the current price as twapInterval is too short/ meaningless\r\n        if (twapInterval < 10) {\r\n            (uint160 sqrtMarkPrice, , , , , , ) = getSlot0(pool);\r\n            return sqrtMarkPrice;\r\n        }\r\n        uint32[] memory secondsAgos = new uint32[](2);\r\n\r\n        // solhint-disable-next-line not-rely-on-time\r\n        secondsAgos[0] = secondsAgo + twapInterval;\r\n        secondsAgos[1] = secondsAgo;\r\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(pool).observe(secondsAgos);\r\n\r\n        // tick(imprecise as it's an integer) to price\r\n        return TickMath.getSqrtRatioAtTick(int24((tickCumulatives[1] - tickCumulatives[0]) / twapInterval));\r\n    }\r\n\r\n    // copied from UniswapV3-core\r\n    /// @param isBaseToQuote originally lte, meaning that the next tick < the current tick\r\n    function getNextInitializedTickWithinOneWord(\r\n        address pool,\r\n        int24 tick,\r\n        int24 tickSpacing,\r\n        bool isBaseToQuote\r\n    ) internal view returns (int24 next, bool initialized) {\r\n        int24 compressed = tick / tickSpacing;\r\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\r\n\r\n        if (isBaseToQuote) {\r\n            (int16 wordPos, uint8 bitPos) = _getPositionOfInitializedTickWithinOneWord(compressed);\r\n            // all the 1s at or to the right of the current bitPos\r\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\r\n            uint256 masked = _getTickBitmap(pool, wordPos) & mask;\r\n\r\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\r\n            initialized = masked != 0;\r\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\r\n            next = initialized\r\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\r\n                : (compressed - int24(bitPos)) * tickSpacing;\r\n        } else {\r\n            // start from the word of the next tick, since the current tick state doesn't matter\r\n            (int16 wordPos, uint8 bitPos) = _getPositionOfInitializedTickWithinOneWord(compressed + 1);\r\n            // all the 1s at or to the left of the bitPos\r\n            uint256 mask = ~((1 << bitPos) - 1);\r\n            uint256 masked = _getTickBitmap(pool, wordPos) & mask;\r\n\r\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\r\n            initialized = masked != 0;\r\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\r\n            next = initialized\r\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\r\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\r\n        }\r\n    }\r\n\r\n    function getSwapState(\r\n        address pool,\r\n        int256 signedScaledAmountForReplaySwap,\r\n        uint256 feeGrowthGlobalX128\r\n    ) internal view returns (SwapState memory) {\r\n        (uint160 sqrtMarkPrice, int24 tick, , , , , ) = getSlot0(pool);\r\n        uint128 liquidity = IUniswapV3Pool(pool).liquidity();\r\n        return\r\n            SwapState({\r\n                tick: tick,\r\n                sqrtPriceX96: sqrtMarkPrice,\r\n                amountSpecifiedRemaining: signedScaledAmountForReplaySwap,\r\n                feeGrowthGlobalX128: feeGrowthGlobalX128,\r\n                liquidity: liquidity\r\n            });\r\n    }\r\n\r\n    //\r\n    // PRIVATE VIEW\r\n    //\r\n\r\n    function _getTickBitmap(address pool, int16 wordPos) private view returns (uint256 tickBitmap) {\r\n        return IUniswapV3Pool(pool).tickBitmap(wordPos);\r\n    }\r\n\r\n    /// @dev this function is Uniswap's TickBitmap.position()\r\n    function _getPositionOfInitializedTickWithinOneWord(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\r\n        wordPos = int16(tick >> 8);\r\n        bitPos = uint8(tick % 256);\r\n    }\r\n}\r\n"
    },
    "contracts/lib/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { PerpMath } from \"./PerpMath.sol\";\r\nimport { PerpSafeCast } from \"./PerpSafeCast.sol\";\r\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\n\r\nlibrary SwapMath {\r\n    using PerpMath for int256;\r\n    using PerpSafeCast for uint256;\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    //\r\n    // CONSTANT\r\n    //\r\n\r\n    uint256 internal constant _ONE_HUNDRED_PERCENT = 1e6; // 100%\r\n\r\n    //\r\n    // INTERNAL PURE\r\n    //\r\n\r\n    function calcAmountScaledByFeeRatio(\r\n        uint256 amount,\r\n        uint24 feeRatio,\r\n        bool isScaledUp\r\n    ) internal pure returns (uint256) {\r\n        // when scaling up, round up to avoid imprecision; it's okay as long as we round down later\r\n        return\r\n            isScaledUp\r\n                ? FullMath.mulDivRoundingUp(amount, _ONE_HUNDRED_PERCENT, uint256(_ONE_HUNDRED_PERCENT).sub(feeRatio))\r\n                : FullMath.mulDiv(amount, uint256(_ONE_HUNDRED_PERCENT).sub(feeRatio), _ONE_HUNDRED_PERCENT);\r\n    }\r\n\r\n    /// @return scaledAmountForUniswapV3PoolSwap the unsigned scaled amount for UniswapV3Pool.swap()\r\n    /// @return signedScaledAmountForReplaySwap the signed scaled amount for _replaySwap()\r\n    /// @dev for UniswapV3Pool.swap(), scaling the amount is necessary to achieve the custom fee effect\r\n    /// @dev for _replaySwap(), however, as we can input ExchangeFeeRatioRatio directly in SwapMath.computeSwapStep(),\r\n    ///      there is no need to stick to the scaled amount\r\n    /// @dev refer to CH._openPosition() docstring for explainer diagram\r\n    function calcScaledAmountForSwaps(\r\n        bool isBaseToQuote,\r\n        bool isExactInput,\r\n        uint256 amount,\r\n        uint24 exchangeFeeRatio,\r\n        uint24 uniswapFeeRatio\r\n    ) internal pure returns (uint256 scaledAmountForUniswapV3PoolSwap, int256 signedScaledAmountForReplaySwap) {\r\n        if (isBaseToQuote) {\r\n            scaledAmountForUniswapV3PoolSwap = isExactInput\r\n                ? calcAmountScaledByFeeRatio(amount, uniswapFeeRatio, true)\r\n                : calcAmountScaledByFeeRatio(amount, exchangeFeeRatio, true);\r\n        } else {\r\n            scaledAmountForUniswapV3PoolSwap = isExactInput\r\n                ? calcAmountWithFeeRatioReplaced(amount, uniswapFeeRatio, exchangeFeeRatio, true)\r\n                : amount;\r\n        }\r\n\r\n        // x : uniswapFeeRatio, y : exchangeFeeRatioRatio\r\n        // since we can input ExchangeFeeRatioRatio directly in SwapMath.computeSwapStep() in _replaySwap(),\r\n        // when !isBaseToQuote, we can use the original amount directly\r\n        // ex: when x(uniswapFeeRatio) = 1%, y(exchangeFeeRatioRatio) = 3%, input == 1 quote\r\n        // our target is to get fee == 0.03 quote\r\n        // if scaling the input as 1 * 0.97 / 0.99, the fee calculated in `_replaySwap()` won't be 0.03\r\n        signedScaledAmountForReplaySwap = isBaseToQuote\r\n            ? scaledAmountForUniswapV3PoolSwap.toInt256()\r\n            : amount.toInt256();\r\n        signedScaledAmountForReplaySwap = isExactInput\r\n            ? signedScaledAmountForReplaySwap\r\n            : signedScaledAmountForReplaySwap.neg256();\r\n    }\r\n\r\n    /// @param isReplacingUniswapFeeRatio is to replace uniswapFeeRatio or clearingHouseFeeRatio\r\n    ///        let x : uniswapFeeRatio, y : clearingHouseFeeRatio\r\n    ///        true: replacing uniswapFeeRatio with clearingHouseFeeRatio: amount * (1 - y) / (1 - x)\r\n    ///        false: replacing clearingHouseFeeRatio with uniswapFeeRatio: amount * (1 - x) / (1 - y)\r\n    ///        multiplying a fee is applying it as the new standard and dividing a fee is removing its effect\r\n    /// @dev calculate the amount when feeRatio is switched between uniswapFeeRatio and clearingHouseFeeRatio\r\n    function calcAmountWithFeeRatioReplaced(\r\n        uint256 amount,\r\n        uint24 uniswapFeeRatio,\r\n        uint24 clearingHouseFeeRatio,\r\n        bool isReplacingUniswapFeeRatio\r\n    ) internal pure returns (uint256) {\r\n        (uint24 newFeeRatio, uint24 replacedFeeRatio) =\r\n            isReplacingUniswapFeeRatio\r\n                ? (clearingHouseFeeRatio, uniswapFeeRatio)\r\n                : (uniswapFeeRatio, clearingHouseFeeRatio);\r\n\r\n        return\r\n            FullMath.mulDivRoundingUp(\r\n                amount,\r\n                uint256(_ONE_HUNDRED_PERCENT).sub(newFeeRatio),\r\n                uint256(_ONE_HUNDRED_PERCENT).sub(replacedFeeRatio)\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/base/UniswapV3CallbackBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { ContextUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\nimport { IUniswapV3Pool } from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport { IMarketRegistry } from \"../interface/IMarketRegistry.sol\";\r\n\r\nabstract contract UniswapV3CallbackBridge is ContextUpgradeable {\r\n    //\r\n    // STATE\r\n    //\r\n    address internal _marketRegistry;\r\n\r\n    // __gap is reserved storage\r\n    uint256[50] private __gap;\r\n\r\n    //\r\n    // MODIFIER\r\n    //\r\n\r\n    modifier checkCallback() {\r\n        address pool = _msgSender();\r\n        address baseToken = IUniswapV3Pool(pool).token0();\r\n        // UCB_FCV: failed callback validation\r\n        require(pool == IMarketRegistry(_marketRegistry).getPool(baseToken), \"UCB_FCV\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // CONSTRUCTOR\r\n    //\r\n    // solhint-disable-next-line func-order\r\n    function __UniswapV3CallbackBridge_init(address marketRegistryArg) internal initializer {\r\n        __Context_init();\r\n\r\n        _marketRegistry = marketRegistryArg;\r\n    }\r\n\r\n    function getMarketRegistry() external view returns (address) {\r\n        return _marketRegistry;\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IMarketRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\ninterface IMarketRegistry {\r\n    struct MarketInfo {\r\n        address pool;\r\n        uint24 exchangeFeeRatio;\r\n        uint24 uniswapFeeRatio;\r\n        uint24 insuranceFundFeeRatio;\r\n    }\r\n\r\n    /// @notice Emitted when a new market is created.\r\n    /// @param baseToken The address of the base token\r\n    /// @param feeRatio Fee ratio of the market\r\n    /// @param pool The address of the pool\r\n    event PoolAdded(address indexed baseToken, uint24 indexed feeRatio, address indexed pool);\r\n\r\n    /// @notice Emitted when the fee ratio of a market is updated.\r\n    /// @param baseToken The address of the base token\r\n    /// @param feeRatio Fee ratio of the market\r\n    event FeeRatioChanged(address baseToken, uint24 feeRatio);\r\n\r\n    /// @notice Emitted when the insurance fund fee ratio is updated.\r\n    /// @param baseToken The address of the base token\r\n    /// @param feeRatio Insurance fund fee ratio\r\n    event InsuranceFundFeeRatioChanged(address baseToken, uint24 feeRatio);\r\n\r\n    /// @notice Emitted when the max orders per market is updated.\r\n    /// @param maxOrdersPerMarket Max orders per market\r\n    event MaxOrdersPerMarketChanged(uint8 maxOrdersPerMarket);\r\n\r\n    /// @dev Add a new pool to the registry.\r\n    /// @param baseToken The token that the pool is for.\r\n    /// @param feeRatio The fee ratio for the pool.\r\n    /// @return pool The address of the pool.\r\n    function addPool(address baseToken, uint24 feeRatio) external returns (address pool);\r\n\r\n    /// @dev Set the fee ratio for a pool\r\n    /// @param baseToken The token address of the pool.\r\n    /// @param feeRatio The fee ratio for the pool.\r\n    function setFeeRatio(address baseToken, uint24 feeRatio) external;\r\n\r\n    /// @dev Set insurance fund fee ratio for a pool\r\n    /// @param baseToken The token address of the pool.\r\n    /// @param insuranceFundFeeRatioArg The fee ratio for the pool.\r\n    function setInsuranceFundFeeRatio(address baseToken, uint24 insuranceFundFeeRatioArg) external;\r\n\r\n    /// @dev Set max allowed orders per market\r\n    /// @param maxOrdersPerMarketArg The max allowed orders per market\r\n    function setMaxOrdersPerMarket(uint8 maxOrdersPerMarketArg) external;\r\n\r\n    /// @notice Get the pool address (UNIv3 pool) by given base token address\r\n    /// @param baseToken The address of the base token\r\n    /// @return pool The address of the pool\r\n    function getPool(address baseToken) external view returns (address pool);\r\n\r\n    /// @notice Get the fee ratio of a given market\r\n    /// @dev The ratio is in `1e6` format, that means `1% = 1e4`\r\n    /// @param baseToken The address of the base token\r\n    /// @return feeRatio The fee ratio of the market, it is a decimal in `1e6`\r\n    function getFeeRatio(address baseToken) external view returns (uint24 feeRatio);\r\n\r\n    /// @notice Get the insurance fund fee ratio of a given market\r\n    /// @dev The ratio is in `1e6` format, that means `1% = 1e4`\r\n    /// @param baseToken The address of the base token\r\n    /// @return feeRatio The fee ratio of the market, it is a decimal in `1e6`\r\n    function getInsuranceFundFeeRatio(address baseToken) external view returns (uint24 feeRatio);\r\n\r\n    /// @notice Get the market info by given base token address\r\n    /// @param baseToken The address of the base token\r\n    /// @return info The market info encoded as `MarketInfo`\r\n    function getMarketInfo(address baseToken) external view returns (MarketInfo memory info);\r\n\r\n    /// @notice Get the quote token address\r\n    /// @return quoteToken The address of the quote token\r\n    function getQuoteToken() external view returns (address quoteToken);\r\n\r\n    /// @notice Get Uniswap factory address\r\n    /// @return factory The address of the Uniswap factory\r\n    function getUniswapV3Factory() external view returns (address factory);\r\n\r\n    /// @notice Get max allowed orders per market\r\n    /// @return maxOrdersPerMarket The max allowed orders per market\r\n    function getMaxOrdersPerMarket() external view returns (uint8 maxOrdersPerMarket);\r\n\r\n    /// @notice Check if a pool exist by given base token address\r\n    /// @return hasPool True if the pool exist, false otherwise\r\n    function hasPool(address baseToken) external view returns (bool hasPool);\r\n}\r\n"
    },
    "contracts/storage/ExchangeStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { Funding } from \"../lib/Funding.sol\";\r\n\r\n/// @notice For future upgrades, do not change ExchangeStorageV1. Create a new\r\n/// contract which implements ExchangeStorageV1 and following the naming convention\r\n/// ExchangeStorageVX.\r\nabstract contract ExchangeStorageV1 {\r\n    address internal _orderBook;\r\n    address internal _accountBalance;\r\n    address internal _clearingHouseConfig;\r\n\r\n    mapping(address => int24) internal _lastUpdatedTickMap;\r\n    mapping(address => uint256) internal _firstTradedTimestampMap;\r\n    mapping(address => uint256) internal _lastSettledTimestampMap;\r\n    mapping(address => Funding.Growth) internal _globalFundingGrowthX96Map;\r\n\r\n    // key: base token\r\n    // value: a threshold to limit the price impact per block when reducing or closing the position\r\n    mapping(address => uint24) internal _maxTickCrossedWithinBlockMap;\r\n\r\n    // first key: trader, second key: baseToken\r\n    // value: the last timestamp when a trader exceeds price limit when closing a position/being liquidated\r\n    mapping(address => mapping(address => uint256)) internal _lastOverPriceLimitTimestampMap;\r\n}\r\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0);\n\n        r = 255;\n        if (x & type(uint128).max > 0) {\n            r -= 128;\n        } else {\n            x >>= 128;\n        }\n        if (x & type(uint64).max > 0) {\n            r -= 64;\n        } else {\n            x >>= 64;\n        }\n        if (x & type(uint32).max > 0) {\n            r -= 32;\n        } else {\n            x >>= 32;\n        }\n        if (x & type(uint16).max > 0) {\n            r -= 16;\n        } else {\n            x >>= 16;\n        }\n        if (x & type(uint8).max > 0) {\n            r -= 8;\n        } else {\n            x >>= 8;\n        }\n        if (x & 0xf > 0) {\n            r -= 4;\n        } else {\n            x >>= 4;\n        }\n        if (x & 0x3 > 0) {\n            r -= 2;\n        } else {\n            x >>= 2;\n        }\n        if (x & 0x1 > 0) r -= 1;\n    }\n}\n"
    },
    "contracts/storage/OrderBookStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { Tick } from \"../lib/Tick.sol\";\r\nimport { Funding } from \"../lib/Funding.sol\";\r\nimport { OpenOrder } from \"../lib/OpenOrder.sol\";\r\n\r\n/// @notice For future upgrades, do not change OrderBookStorageV1. Create a new\r\n/// contract which implements OrderBookStorageV1 and following the naming convention\r\n/// OrderBookStorageVX.\r\nabstract contract OrderBookStorageV1 {\r\n    address internal _exchange;\r\n\r\n    // first key: trader, second key: base token\r\n    mapping(address => mapping(address => bytes32[])) internal _openOrderIdsMap;\r\n\r\n    // key: openOrderId\r\n    mapping(bytes32 => OpenOrder.Info) internal _openOrderMap;\r\n\r\n    // first key: base token, second key: tick index\r\n    // value: the accumulator of **Tick.GrowthInfo** outside each tick of each pool\r\n    mapping(address => mapping(int24 => Tick.GrowthInfo)) internal _growthOutsideTickMap;\r\n\r\n    // key: base token\r\n    // value: the global accumulator of **quote fee transformed from base fee** of each pool\r\n    mapping(address => uint256) internal _feeGrowthGlobalX128Map;\r\n}\r\n"
    },
    "contracts/OrderBook.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\r\nimport { TickMath } from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\r\nimport { SwapMath } from \"@uniswap/v3-core/contracts/libraries/SwapMath.sol\";\r\nimport { LiquidityMath } from \"@uniswap/v3-core/contracts/libraries/LiquidityMath.sol\";\r\nimport { FixedPoint128 } from \"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\";\r\nimport { IUniswapV3MintCallback } from \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\";\r\nimport { LiquidityAmounts } from \"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\";\r\nimport { UniswapV3Broker } from \"./lib/UniswapV3Broker.sol\";\r\nimport { PerpSafeCast } from \"./lib/PerpSafeCast.sol\";\r\nimport { PerpFixedPoint96 } from \"./lib/PerpFixedPoint96.sol\";\r\nimport { Funding } from \"./lib/Funding.sol\";\r\nimport { PerpMath } from \"./lib/PerpMath.sol\";\r\nimport { Tick } from \"./lib/Tick.sol\";\r\nimport { ClearingHouseCallee } from \"./base/ClearingHouseCallee.sol\";\r\nimport { UniswapV3CallbackBridge } from \"./base/UniswapV3CallbackBridge.sol\";\r\nimport { IMarketRegistry } from \"./interface/IMarketRegistry.sol\";\r\nimport { OrderBookStorageV1 } from \"./storage/OrderBookStorage.sol\";\r\nimport { IOrderBook } from \"./interface/IOrderBook.sol\";\r\nimport { OpenOrder } from \"./lib/OpenOrder.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract OrderBook is\r\n    IOrderBook,\r\n    IUniswapV3MintCallback,\r\n    ClearingHouseCallee,\r\n    UniswapV3CallbackBridge,\r\n    OrderBookStorageV1\r\n{\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable for uint128;\r\n    using SignedSafeMathUpgradeable for int256;\r\n    using PerpMath for uint256;\r\n    using PerpMath for uint160;\r\n    using PerpMath for int256;\r\n    using PerpMath for int128;\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for uint128;\r\n    using PerpSafeCast for int256;\r\n    using Tick for mapping(int24 => Tick.GrowthInfo);\r\n\r\n    //\r\n    // STRUCT\r\n    //\r\n\r\n    struct InternalAddLiquidityToOrderParams {\r\n        address maker;\r\n        address baseToken;\r\n        address pool;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint256 feeGrowthGlobalX128;\r\n        uint128 liquidity;\r\n        uint256 base;\r\n        uint256 quote;\r\n        Funding.Growth globalFundingGrowth;\r\n    }\r\n\r\n    struct InternalRemoveLiquidityParams {\r\n        address maker;\r\n        address baseToken;\r\n        address pool;\r\n        bytes32 orderId;\r\n        int24 lowerTick;\r\n        int24 upperTick;\r\n        uint128 liquidity;\r\n    }\r\n\r\n    struct InternalSwapStep {\r\n        uint160 initialSqrtPriceX96;\r\n        int24 nextTick;\r\n        bool isNextTickInitialized;\r\n        uint160 nextSqrtPriceX96;\r\n        uint256 amountIn;\r\n        uint256 amountOut;\r\n        uint256 fee;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize(address marketRegistryArg) external initializer {\r\n        __ClearingHouseCallee_init();\r\n        __UniswapV3CallbackBridge_init(marketRegistryArg);\r\n    }\r\n\r\n    function setExchange(address exchangeArg) external onlyOwner {\r\n        _exchange = exchangeArg;\r\n        emit ExchangeChanged(exchangeArg);\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function addLiquidity(AddLiquidityParams calldata params) external override returns (AddLiquidityResponse memory) {\r\n        _requireOnlyClearingHouse();\r\n        address pool = IMarketRegistry(_marketRegistry).getPool(params.baseToken);\r\n        uint256 feeGrowthGlobalX128 = _feeGrowthGlobalX128Map[params.baseToken];\r\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[params.baseToken];\r\n        UniswapV3Broker.AddLiquidityResponse memory response;\r\n\r\n        {\r\n            bool initializedBeforeLower = UniswapV3Broker.getIsTickInitialized(pool, params.lowerTick);\r\n            bool initializedBeforeUpper = UniswapV3Broker.getIsTickInitialized(pool, params.upperTick);\r\n\r\n            // add liquidity to pool\r\n            response = UniswapV3Broker.addLiquidity(\r\n                UniswapV3Broker.AddLiquidityParams(\r\n                    pool,\r\n                    params.lowerTick,\r\n                    params.upperTick,\r\n                    params.base,\r\n                    params.quote,\r\n                    abi.encode(MintCallbackData(params.trader, pool))\r\n                )\r\n            );\r\n\r\n            (, int24 currentTick, , , , , ) = UniswapV3Broker.getSlot0(pool);\r\n            // initialize tick info\r\n            if (!initializedBeforeLower && UniswapV3Broker.getIsTickInitialized(pool, params.lowerTick)) {\r\n                tickMap.initialize(\r\n                    params.lowerTick,\r\n                    currentTick,\r\n                    Tick.GrowthInfo(\r\n                        feeGrowthGlobalX128,\r\n                        params.fundingGrowthGlobal.twPremiumX96,\r\n                        params.fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\r\n                    )\r\n                );\r\n            }\r\n            if (!initializedBeforeUpper && UniswapV3Broker.getIsTickInitialized(pool, params.upperTick)) {\r\n                tickMap.initialize(\r\n                    params.upperTick,\r\n                    currentTick,\r\n                    Tick.GrowthInfo(\r\n                        feeGrowthGlobalX128,\r\n                        params.fundingGrowthGlobal.twPremiumX96,\r\n                        params.fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        // state changes; if adding liquidity to an existing order, get fees accrued\r\n        uint256 fee =\r\n            _addLiquidityToOrder(\r\n                InternalAddLiquidityToOrderParams({\r\n                    maker: params.trader,\r\n                    baseToken: params.baseToken,\r\n                    pool: pool,\r\n                    lowerTick: params.lowerTick,\r\n                    upperTick: params.upperTick,\r\n                    feeGrowthGlobalX128: feeGrowthGlobalX128,\r\n                    liquidity: response.liquidity,\r\n                    base: response.base,\r\n                    quote: response.quote,\r\n                    globalFundingGrowth: params.fundingGrowthGlobal\r\n                })\r\n            );\r\n\r\n        return\r\n            AddLiquidityResponse({\r\n                base: response.base,\r\n                quote: response.quote,\r\n                fee: fee,\r\n                liquidity: response.liquidity\r\n            });\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function removeLiquidity(RemoveLiquidityParams calldata params)\r\n        external\r\n        override\r\n        returns (RemoveLiquidityResponse memory)\r\n    {\r\n        _requireOnlyClearingHouse();\r\n        address pool = IMarketRegistry(_marketRegistry).getPool(params.baseToken);\r\n        bytes32 orderId = OpenOrder.calcOrderKey(params.maker, params.baseToken, params.lowerTick, params.upperTick);\r\n        return\r\n            _removeLiquidity(\r\n                InternalRemoveLiquidityParams({\r\n                    maker: params.maker,\r\n                    baseToken: params.baseToken,\r\n                    pool: pool,\r\n                    orderId: orderId,\r\n                    lowerTick: params.lowerTick,\r\n                    upperTick: params.upperTick,\r\n                    liquidity: params.liquidity\r\n                })\r\n            );\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function updateFundingGrowthAndLiquidityCoefficientInFundingPayment(\r\n        address trader,\r\n        address baseToken,\r\n        Funding.Growth memory fundingGrowthGlobal\r\n    ) external override returns (int256 liquidityCoefficientInFundingPayment) {\r\n        _requireOnlyExchange();\r\n\r\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\r\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[baseToken];\r\n        address pool = IMarketRegistry(_marketRegistry).getPool(baseToken);\r\n\r\n        // funding of liquidity coefficient\r\n        uint256 orderIdLength = orderIds.length;\r\n        (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(pool);\r\n        for (uint256 i = 0; i < orderIdLength; i++) {\r\n            OpenOrder.Info storage order = _openOrderMap[orderIds[i]];\r\n            Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo =\r\n                tickMap.getAllFundingGrowth(\r\n                    order.lowerTick,\r\n                    order.upperTick,\r\n                    tick,\r\n                    fundingGrowthGlobal.twPremiumX96,\r\n                    fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\r\n                );\r\n\r\n            // the calculation here is based on cached values\r\n            liquidityCoefficientInFundingPayment = liquidityCoefficientInFundingPayment.add(\r\n                Funding.calcLiquidityCoefficientInFundingPaymentByOrder(order, fundingGrowthRangeInfo)\r\n            );\r\n\r\n            // thus, state updates have to come after\r\n            order.lastTwPremiumGrowthInsideX96 = fundingGrowthRangeInfo.twPremiumGrowthInsideX96;\r\n            order.lastTwPremiumGrowthBelowX96 = fundingGrowthRangeInfo.twPremiumGrowthBelowX96;\r\n            order.lastTwPremiumDivBySqrtPriceGrowthInsideX96 = fundingGrowthRangeInfo\r\n                .twPremiumDivBySqrtPriceGrowthInsideX96;\r\n        }\r\n\r\n        return liquidityCoefficientInFundingPayment;\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function updateOrderDebt(\r\n        bytes32 orderId,\r\n        int256 base,\r\n        int256 quote\r\n    ) external override {\r\n        _requireOnlyClearingHouse();\r\n        OpenOrder.Info storage openOrder = _openOrderMap[orderId];\r\n        openOrder.baseDebt = openOrder.baseDebt.toInt256().add(base).toUint256();\r\n        openOrder.quoteDebt = openOrder.quoteDebt.toInt256().add(quote).toUint256();\r\n    }\r\n\r\n    /// @inheritdoc IUniswapV3MintCallback\r\n    function uniswapV3MintCallback(\r\n        uint256 amount0Owed,\r\n        uint256 amount1Owed,\r\n        bytes calldata data\r\n    ) external override checkCallback {\r\n        IUniswapV3MintCallback(_clearingHouse).uniswapV3MintCallback(amount0Owed, amount1Owed, data);\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function replaySwap(ReplaySwapParams memory params) external override returns (ReplaySwapResponse memory) {\r\n        _requireOnlyExchange();\r\n\r\n        address pool = IMarketRegistry(_marketRegistry).getPool(params.baseToken);\r\n        bool isExactInput = params.amount > 0;\r\n        uint24 insuranceFundFeeRatio =\r\n            IMarketRegistry(_marketRegistry).getMarketInfo(params.baseToken).insuranceFundFeeRatio;\r\n        uint256 fee;\r\n        uint256 insuranceFundFee; // insuranceFundFee = fee * insuranceFundFeeRatio\r\n\r\n        UniswapV3Broker.SwapState memory swapState =\r\n            UniswapV3Broker.getSwapState(pool, params.amount, _feeGrowthGlobalX128Map[params.baseToken]);\r\n\r\n        params.sqrtPriceLimitX96 = params.sqrtPriceLimitX96 == 0\r\n            ? (params.isBaseToQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\r\n            : params.sqrtPriceLimitX96;\r\n\r\n        // if there is residue in amountSpecifiedRemaining, makers can get a tiny little bit less than expected,\r\n        // which is safer for the system\r\n        int24 tickSpacing = UniswapV3Broker.getTickSpacing(pool);\r\n\r\n        while (swapState.amountSpecifiedRemaining != 0 && swapState.sqrtPriceX96 != params.sqrtPriceLimitX96) {\r\n            InternalSwapStep memory step;\r\n            step.initialSqrtPriceX96 = swapState.sqrtPriceX96;\r\n\r\n            // find next tick\r\n            // note the search is bounded in one word\r\n            (step.nextTick, step.isNextTickInitialized) = UniswapV3Broker.getNextInitializedTickWithinOneWord(\r\n                pool,\r\n                swapState.tick,\r\n                tickSpacing,\r\n                params.isBaseToQuote\r\n            );\r\n\r\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\r\n            if (step.nextTick < TickMath.MIN_TICK) {\r\n                step.nextTick = TickMath.MIN_TICK;\r\n            } else if (step.nextTick > TickMath.MAX_TICK) {\r\n                step.nextTick = TickMath.MAX_TICK;\r\n            }\r\n\r\n            // get the next price of this step (either next tick's price or the ending price)\r\n            // use sqrtPrice instead of tick is more precise\r\n            step.nextSqrtPriceX96 = TickMath.getSqrtRatioAtTick(step.nextTick);\r\n\r\n            // find the next swap checkpoint\r\n            // (either reached the next price of this step, or exhausted remaining amount specified)\r\n            (swapState.sqrtPriceX96, step.amountIn, step.amountOut, step.fee) = SwapMath.computeSwapStep(\r\n                swapState.sqrtPriceX96,\r\n                (\r\n                    params.isBaseToQuote\r\n                        ? step.nextSqrtPriceX96 < params.sqrtPriceLimitX96\r\n                        : step.nextSqrtPriceX96 > params.sqrtPriceLimitX96\r\n                )\r\n                    ? params.sqrtPriceLimitX96\r\n                    : step.nextSqrtPriceX96,\r\n                swapState.liquidity,\r\n                swapState.amountSpecifiedRemaining,\r\n                // isBaseToQuote: fee is charged in base token in uniswap pool; thus, use uniswapFeeRatio to replay\r\n                // !isBaseToQuote: fee is charged in quote token in clearing house; thus, use exchangeFeeRatioRatio\r\n                params.isBaseToQuote ? params.uniswapFeeRatio : params.exchangeFeeRatio\r\n            );\r\n\r\n            // user input 1 quote:\r\n            // quote token to uniswap ===> 1*0.98/0.99 = 0.98989899\r\n            // fee = 0.98989899 * 2% = 0.01979798\r\n            if (isExactInput) {\r\n                swapState.amountSpecifiedRemaining = swapState.amountSpecifiedRemaining.sub(\r\n                    step.amountIn.add(step.fee).toInt256()\r\n                );\r\n            } else {\r\n                swapState.amountSpecifiedRemaining = swapState.amountSpecifiedRemaining.add(step.amountOut.toInt256());\r\n            }\r\n\r\n            // update CH's global fee growth if there is liquidity in this range\r\n            // note CH only collects quote fee when swapping base -> quote\r\n            if (swapState.liquidity > 0) {\r\n                if (params.isBaseToQuote) {\r\n                    step.fee = FullMath.mulDivRoundingUp(step.amountOut, params.exchangeFeeRatio, 1e6);\r\n                }\r\n\r\n                fee += step.fee;\r\n                uint256 stepInsuranceFundFee = FullMath.mulDivRoundingUp(step.fee, insuranceFundFeeRatio, 1e6);\r\n                insuranceFundFee += stepInsuranceFundFee;\r\n                uint256 stepMakerFee = step.fee.sub(stepInsuranceFundFee);\r\n                swapState.feeGrowthGlobalX128 += FullMath.mulDiv(stepMakerFee, FixedPoint128.Q128, swapState.liquidity);\r\n            }\r\n\r\n            if (swapState.sqrtPriceX96 == step.nextSqrtPriceX96) {\r\n                // we have reached the tick's boundary\r\n                if (step.isNextTickInitialized) {\r\n                    if (params.shouldUpdateState) {\r\n                        // update the tick if it has been initialized\r\n                        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[params.baseToken];\r\n                        // according to the above updating logic,\r\n                        // if isBaseToQuote, state.feeGrowthGlobalX128 will be updated; else, will never be updated\r\n                        tickMap.cross(\r\n                            step.nextTick,\r\n                            Tick.GrowthInfo({\r\n                                feeX128: swapState.feeGrowthGlobalX128,\r\n                                twPremiumX96: params.globalFundingGrowth.twPremiumX96,\r\n                                twPremiumDivBySqrtPriceX96: params.globalFundingGrowth.twPremiumDivBySqrtPriceX96\r\n                            })\r\n                        );\r\n                    }\r\n\r\n                    int128 liquidityNet = UniswapV3Broker.getTickLiquidityNet(pool, step.nextTick);\r\n                    if (params.isBaseToQuote) liquidityNet = liquidityNet.neg128();\r\n                    swapState.liquidity = LiquidityMath.addDelta(swapState.liquidity, liquidityNet);\r\n                }\r\n\r\n                swapState.tick = params.isBaseToQuote ? step.nextTick - 1 : step.nextTick;\r\n            } else if (swapState.sqrtPriceX96 != step.initialSqrtPriceX96) {\r\n                // update state.tick corresponding to the current price if the price has changed in this step\r\n                swapState.tick = TickMath.getTickAtSqrtRatio(swapState.sqrtPriceX96);\r\n            }\r\n        }\r\n        if (params.shouldUpdateState) {\r\n            // update global states since swap state transitions are all done\r\n            _feeGrowthGlobalX128Map[params.baseToken] = swapState.feeGrowthGlobalX128;\r\n        }\r\n\r\n        return ReplaySwapResponse({ tick: swapState.tick, fee: fee, insuranceFundFee: insuranceFundFee });\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getExchange() external view override returns (address) {\r\n        return _exchange;\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getOpenOrderIds(address trader, address baseToken) external view override returns (bytes32[] memory) {\r\n        return _openOrderIdsMap[trader][baseToken];\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getOpenOrderById(bytes32 orderId) external view override returns (OpenOrder.Info memory) {\r\n        return _openOrderMap[orderId];\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getOpenOrder(\r\n        address trader,\r\n        address baseToken,\r\n        int24 lowerTick,\r\n        int24 upperTick\r\n    ) external view override returns (OpenOrder.Info memory) {\r\n        return _openOrderMap[OpenOrder.calcOrderKey(trader, baseToken, lowerTick, upperTick)];\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function hasOrder(address trader, address[] calldata tokens) external view override returns (bool) {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (_openOrderIdsMap[trader][tokens[i]].length > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getTotalQuoteBalanceAndPendingFee(address trader, address[] calldata baseTokens)\r\n        external\r\n        view\r\n        override\r\n        returns (int256 totalQuoteAmountInPools, uint256 totalPendingFee)\r\n    {\r\n        for (uint256 i = 0; i < baseTokens.length; i++) {\r\n            address baseToken = baseTokens[i];\r\n            (int256 makerQuoteBalance, uint256 pendingFee) =\r\n                _getMakerQuoteBalanceAndPendingFee(trader, baseToken, false);\r\n            totalQuoteAmountInPools = totalQuoteAmountInPools.add(makerQuoteBalance);\r\n            totalPendingFee = totalPendingFee.add(pendingFee);\r\n        }\r\n        return (totalQuoteAmountInPools, totalPendingFee);\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getTotalTokenAmountInPoolAndPendingFee(\r\n        address trader,\r\n        address baseToken,\r\n        bool fetchBase // true: fetch base amount, false: fetch quote amount\r\n    ) external view override returns (uint256 tokenAmount, uint256 pendingFee) {\r\n        (tokenAmount, pendingFee) = _getTotalTokenAmountInPool(trader, baseToken, fetchBase);\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getLiquidityCoefficientInFundingPayment(\r\n        address trader,\r\n        address baseToken,\r\n        Funding.Growth memory fundingGrowthGlobal\r\n    ) external view override returns (int256 liquidityCoefficientInFundingPayment) {\r\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\r\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[baseToken];\r\n        address pool = IMarketRegistry(_marketRegistry).getPool(baseToken);\r\n\r\n        // funding of liquidity coefficient\r\n        (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(pool);\r\n        for (uint256 i = 0; i < orderIds.length; i++) {\r\n            OpenOrder.Info memory order = _openOrderMap[orderIds[i]];\r\n            Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo =\r\n                tickMap.getAllFundingGrowth(\r\n                    order.lowerTick,\r\n                    order.upperTick,\r\n                    tick,\r\n                    fundingGrowthGlobal.twPremiumX96,\r\n                    fundingGrowthGlobal.twPremiumDivBySqrtPriceX96\r\n                );\r\n\r\n            // the calculation here is based on cached values\r\n            liquidityCoefficientInFundingPayment = liquidityCoefficientInFundingPayment.add(\r\n                Funding.calcLiquidityCoefficientInFundingPaymentByOrder(order, fundingGrowthRangeInfo)\r\n            );\r\n        }\r\n\r\n        return liquidityCoefficientInFundingPayment;\r\n    }\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getPendingFee(\r\n        address trader,\r\n        address baseToken,\r\n        int24 lowerTick,\r\n        int24 upperTick\r\n    ) external view override returns (uint256) {\r\n        (uint256 pendingFee, ) =\r\n            _getPendingFeeAndFeeGrowthInsideX128ByOrder(\r\n                baseToken,\r\n                _openOrderMap[OpenOrder.calcOrderKey(trader, baseToken, lowerTick, upperTick)]\r\n            );\r\n        return pendingFee;\r\n    }\r\n\r\n    //\r\n    // PUBLIC VIEW\r\n    //\r\n\r\n    /// @inheritdoc IOrderBook\r\n    function getTotalOrderDebt(\r\n        address trader,\r\n        address baseToken,\r\n        bool fetchBase\r\n    ) public view override returns (uint256) {\r\n        uint256 totalOrderDebt;\r\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\r\n        uint256 orderIdLength = orderIds.length;\r\n        for (uint256 i = 0; i < orderIdLength; i++) {\r\n            OpenOrder.Info memory orderInfo = _openOrderMap[orderIds[i]];\r\n            uint256 orderDebt = fetchBase ? orderInfo.baseDebt : orderInfo.quoteDebt;\r\n            totalOrderDebt = totalOrderDebt.add(orderDebt);\r\n        }\r\n        return totalOrderDebt;\r\n    }\r\n\r\n    //\r\n    // INTERNAL NON-VIEW\r\n    //\r\n\r\n    function _removeLiquidity(InternalRemoveLiquidityParams memory params)\r\n        internal\r\n        returns (RemoveLiquidityResponse memory)\r\n    {\r\n        UniswapV3Broker.RemoveLiquidityResponse memory response =\r\n            UniswapV3Broker.removeLiquidity(\r\n                UniswapV3Broker.RemoveLiquidityParams(\r\n                    params.pool,\r\n                    _clearingHouse,\r\n                    params.lowerTick,\r\n                    params.upperTick,\r\n                    params.liquidity\r\n                )\r\n            );\r\n\r\n        // update token info based on existing open order\r\n        (uint256 fee, uint256 baseDebt, uint256 quoteDebt) = _removeLiquidityFromOrder(params);\r\n\r\n        int256 takerBase = response.base.toInt256().sub(baseDebt.toInt256());\r\n        int256 takerQuote = response.quote.toInt256().sub(quoteDebt.toInt256());\r\n\r\n        // if flipped from initialized to uninitialized, clear the tick info\r\n        if (!UniswapV3Broker.getIsTickInitialized(params.pool, params.lowerTick)) {\r\n            _growthOutsideTickMap[params.baseToken].clear(params.lowerTick);\r\n        }\r\n        if (!UniswapV3Broker.getIsTickInitialized(params.pool, params.upperTick)) {\r\n            _growthOutsideTickMap[params.baseToken].clear(params.upperTick);\r\n        }\r\n\r\n        return\r\n            RemoveLiquidityResponse({\r\n                base: response.base,\r\n                quote: response.quote,\r\n                fee: fee,\r\n                takerBase: takerBase,\r\n                takerQuote: takerQuote\r\n            });\r\n    }\r\n\r\n    function _removeLiquidityFromOrder(InternalRemoveLiquidityParams memory params)\r\n        internal\r\n        returns (\r\n            uint256 fee,\r\n            uint256 baseDebt,\r\n            uint256 quoteDebt\r\n        )\r\n    {\r\n        // update token info based on existing open order\r\n        OpenOrder.Info storage openOrder = _openOrderMap[params.orderId];\r\n\r\n        // as in _addLiquidityToOrder(), fee should be calculated before the states are updated\r\n        uint256 feeGrowthInsideX128;\r\n        (fee, feeGrowthInsideX128) = _getPendingFeeAndFeeGrowthInsideX128ByOrder(params.baseToken, openOrder);\r\n\r\n        if (params.liquidity != 0) {\r\n            if (openOrder.baseDebt != 0) {\r\n                baseDebt = FullMath.mulDiv(openOrder.baseDebt, params.liquidity, openOrder.liquidity);\r\n                openOrder.baseDebt = openOrder.baseDebt.sub(baseDebt);\r\n            }\r\n            if (openOrder.quoteDebt != 0) {\r\n                quoteDebt = FullMath.mulDiv(openOrder.quoteDebt, params.liquidity, openOrder.liquidity);\r\n                openOrder.quoteDebt = openOrder.quoteDebt.sub(quoteDebt);\r\n            }\r\n            openOrder.liquidity = openOrder.liquidity.sub(params.liquidity).toUint128();\r\n        }\r\n\r\n        // after the fee is calculated, lastFeeGrowthInsideX128 can be updated if liquidity != 0 after removing\r\n        if (openOrder.liquidity == 0) {\r\n            _removeOrder(params.maker, params.baseToken, params.orderId);\r\n        } else {\r\n            openOrder.lastFeeGrowthInsideX128 = feeGrowthInsideX128;\r\n        }\r\n\r\n        return (fee, baseDebt, quoteDebt);\r\n    }\r\n\r\n    function _removeOrder(\r\n        address maker,\r\n        address baseToken,\r\n        bytes32 orderId\r\n    ) internal {\r\n        bytes32[] storage orderIds = _openOrderIdsMap[maker][baseToken];\r\n        uint256 orderLen = orderIds.length;\r\n        for (uint256 idx = 0; idx < orderLen; idx++) {\r\n            if (orderIds[idx] == orderId) {\r\n                // found the existing order ID\r\n                // remove it from the array efficiently by re-ordering and deleting the last element\r\n                if (idx != orderLen - 1) {\r\n                    orderIds[idx] = orderIds[orderLen - 1];\r\n                }\r\n                orderIds.pop();\r\n                delete _openOrderMap[orderId];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev this function is extracted from and only used by addLiquidity() to avoid stack too deep error\r\n    function _addLiquidityToOrder(InternalAddLiquidityToOrderParams memory params) internal returns (uint256) {\r\n        bytes32 orderId = OpenOrder.calcOrderKey(params.maker, params.baseToken, params.lowerTick, params.upperTick);\r\n        // get the struct by key, no matter it's a new or existing order\r\n        OpenOrder.Info storage openOrder = _openOrderMap[orderId];\r\n\r\n        // initialization for a new order\r\n        if (openOrder.liquidity == 0) {\r\n            bytes32[] storage orderIds = _openOrderIdsMap[params.maker][params.baseToken];\r\n            // OB_ONE: orders number exceeds\r\n            require(orderIds.length < IMarketRegistry(_marketRegistry).getMaxOrdersPerMarket(), \"OB_ONE\");\r\n\r\n            // state changes\r\n            orderIds.push(orderId);\r\n            openOrder.lowerTick = params.lowerTick;\r\n            openOrder.upperTick = params.upperTick;\r\n\r\n            (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(params.pool);\r\n            mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[params.baseToken];\r\n            Tick.FundingGrowthRangeInfo memory fundingGrowthRangeInfo =\r\n                tickMap.getAllFundingGrowth(\r\n                    openOrder.lowerTick,\r\n                    openOrder.upperTick,\r\n                    tick,\r\n                    params.globalFundingGrowth.twPremiumX96,\r\n                    params.globalFundingGrowth.twPremiumDivBySqrtPriceX96\r\n                );\r\n            openOrder.lastTwPremiumGrowthInsideX96 = fundingGrowthRangeInfo.twPremiumGrowthInsideX96;\r\n            openOrder.lastTwPremiumGrowthBelowX96 = fundingGrowthRangeInfo.twPremiumGrowthBelowX96;\r\n            openOrder.lastTwPremiumDivBySqrtPriceGrowthInsideX96 = fundingGrowthRangeInfo\r\n                .twPremiumDivBySqrtPriceGrowthInsideX96;\r\n        }\r\n\r\n        // fee should be calculated before the states are updated, as for\r\n        // - a new order, there is no fee accrued yet\r\n        // - an existing order, fees accrued have to be settled before more liquidity is added\r\n        (uint256 fee, uint256 feeGrowthInsideX128) =\r\n            _getPendingFeeAndFeeGrowthInsideX128ByOrder(params.baseToken, openOrder);\r\n\r\n        // after the fee is calculated, liquidity & lastFeeGrowthInsideX128 can be updated\r\n        openOrder.liquidity = openOrder.liquidity.add(params.liquidity).toUint128();\r\n        openOrder.lastFeeGrowthInsideX128 = feeGrowthInsideX128;\r\n        openOrder.baseDebt = openOrder.baseDebt.add(params.base);\r\n        openOrder.quoteDebt = openOrder.quoteDebt.add(params.quote);\r\n\r\n        return fee;\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    /// @return makerBalance maker quote balance\r\n    /// @return pendingFee pending fee\r\n    function _getMakerQuoteBalanceAndPendingFee(\r\n        address trader,\r\n        address baseToken,\r\n        bool fetchBase\r\n    ) internal view returns (int256 makerBalance, uint256 pendingFee) {\r\n        (uint256 totalBalanceFromOrders, uint256 pendingFee) = _getTotalTokenAmountInPool(trader, baseToken, fetchBase);\r\n        uint256 totalOrderDebt = getTotalOrderDebt(trader, baseToken, fetchBase);\r\n\r\n        // makerBalance = totalTokenAmountInPool - totalOrderDebt\r\n        return (totalBalanceFromOrders.toInt256().sub(totalOrderDebt.toInt256()), pendingFee);\r\n    }\r\n\r\n    /// @dev Get total amount of the specified tokens in the specified pool.\r\n    ///      Note:\r\n    ///        1. when querying quote amount, it includes Exchange fees, i.e.:\r\n    ///           quote amount = quote liquidity + fees\r\n    ///           base amount = base liquidity\r\n    ///        2. quote/base liquidity does NOT include Uniswap pool fees since\r\n    ///           they do not have any impact to our margin system\r\n    ///        3. the returned fee amount is only meaningful when querying quote amount\r\n    function _getTotalTokenAmountInPool(\r\n        address trader,\r\n        address baseToken, // this argument is only for specifying which pool to get base or quote amounts\r\n        bool fetchBase // true: fetch base amount, false: fetch quote amount\r\n    ) internal view returns (uint256 tokenAmount, uint256 pendingFee) {\r\n        bytes32[] memory orderIds = _openOrderIdsMap[trader][baseToken];\r\n\r\n        //\r\n        // tick:    lower             upper\r\n        //       -|---+-----------------+---|--\r\n        //     case 1                    case 2\r\n        //\r\n        // if current price < upper tick, maker has base\r\n        // case 1 : current price < lower tick\r\n        //  --> maker only has base token\r\n        //\r\n        // if current price > lower tick, maker has quote\r\n        // case 2 : current price > upper tick\r\n        //  --> maker only has quote token\r\n        (uint160 sqrtMarkPriceX96, , , , , , ) =\r\n            UniswapV3Broker.getSlot0(IMarketRegistry(_marketRegistry).getPool(baseToken));\r\n        uint256 orderIdLength = orderIds.length;\r\n\r\n        for (uint256 i = 0; i < orderIdLength; i++) {\r\n            OpenOrder.Info memory order = _openOrderMap[orderIds[i]];\r\n\r\n            uint256 amount;\r\n            {\r\n                uint160 sqrtPriceAtLowerTick = TickMath.getSqrtRatioAtTick(order.lowerTick);\r\n                uint160 sqrtPriceAtUpperTick = TickMath.getSqrtRatioAtTick(order.upperTick);\r\n                if (fetchBase && sqrtMarkPriceX96 < sqrtPriceAtUpperTick) {\r\n                    amount = LiquidityAmounts.getAmount0ForLiquidity(\r\n                        sqrtMarkPriceX96 > sqrtPriceAtLowerTick ? sqrtMarkPriceX96 : sqrtPriceAtLowerTick,\r\n                        sqrtPriceAtUpperTick,\r\n                        order.liquidity\r\n                    );\r\n                } else if (!fetchBase && sqrtMarkPriceX96 > sqrtPriceAtLowerTick) {\r\n                    amount = LiquidityAmounts.getAmount1ForLiquidity(\r\n                        sqrtPriceAtLowerTick,\r\n                        sqrtMarkPriceX96 < sqrtPriceAtUpperTick ? sqrtMarkPriceX96 : sqrtPriceAtUpperTick,\r\n                        order.liquidity\r\n                    );\r\n                }\r\n            }\r\n            tokenAmount = tokenAmount.add(amount);\r\n\r\n            // get uncollected fee (only quote)\r\n            if (!fetchBase) {\r\n                (uint256 pendingFeeInOrder, ) = _getPendingFeeAndFeeGrowthInsideX128ByOrder(baseToken, order);\r\n                pendingFee = pendingFee.add(pendingFeeInOrder);\r\n            }\r\n        }\r\n        return (tokenAmount, pendingFee);\r\n    }\r\n\r\n    /// @dev CANNOT use safeMath for feeGrowthInside calculation, as it can be extremely large and overflow\r\n    ///      the difference between two feeGrowthInside, however, is correct and won't be affected by overflow or not\r\n    function _getPendingFeeAndFeeGrowthInsideX128ByOrder(address baseToken, OpenOrder.Info memory order)\r\n        internal\r\n        view\r\n        returns (uint256 pendingFee, uint256 feeGrowthInsideX128)\r\n    {\r\n        (, int24 tick, , , , , ) = UniswapV3Broker.getSlot0(IMarketRegistry(_marketRegistry).getPool(baseToken));\r\n        mapping(int24 => Tick.GrowthInfo) storage tickMap = _growthOutsideTickMap[baseToken];\r\n        feeGrowthInsideX128 = tickMap.getFeeGrowthInsideX128(\r\n            order.lowerTick,\r\n            order.upperTick,\r\n            tick,\r\n            _feeGrowthGlobalX128Map[baseToken]\r\n        );\r\n        pendingFee = FullMath.mulDiv(\r\n            feeGrowthInsideX128 - order.lastFeeGrowthInsideX128,\r\n            order.liquidity,\r\n            FixedPoint128.Q128\r\n        );\r\n\r\n        return (pendingFee, feeGrowthInsideX128);\r\n    }\r\n\r\n    function _requireOnlyExchange() internal view {\r\n        // OB_OEX: Only exchange\r\n        require(_msgSender() == _exchange, \"OB_OEX\");\r\n    }\r\n}\r\n"
    },
    "@uniswap/v3-core/contracts/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './FullMath.sol';\nimport './SqrtPriceMath.sol';\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    )\n        internal\n        pure\n        returns (\n            uint160 sqrtRatioNextX96,\n            uint256 amountIn,\n            uint256 amountOut,\n            uint256 feeAmount\n        )\n    {\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n        bool exactIn = amountRemaining >= 0;\n\n        if (exactIn) {\n            uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n            amountIn = zeroForOne\n                ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n            if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    amountRemainingLessFee,\n                    zeroForOne\n                );\n        } else {\n            amountOut = zeroForOne\n                ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n            if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n            else\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                    sqrtRatioCurrentX96,\n                    liquidity,\n                    uint256(-amountRemaining),\n                    zeroForOne\n                );\n        }\n\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n        // get the input/output amounts\n        if (zeroForOne) {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n        } else {\n            amountIn = max && exactIn\n                ? amountIn\n                : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n            amountOut = max && !exactIn\n                ? amountOut\n                : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n        }\n\n        // cap the output amount to not exceed the remaining output amount\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\n            amountOut = uint256(-amountRemaining);\n        }\n\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n            // we didn't reach the target, so take the remainder of the maximum input as fee\n            feeAmount = uint256(amountRemaining) - amountIn;\n        } else {\n            feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, 'LS');\n        } else {\n            require((z = x + uint128(y)) >= x, 'LA');\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './LowGasSafeMath.sol';\nimport './SafeCast.sol';\n\nimport './FullMath.sol';\nimport './UnsafeMath.sol';\nimport './FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using LowGasSafeMath for uint256;\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            uint256 product;\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                uint256 denominator = numerator1 + product;\n                if (denominator >= numerator1)\n                    // always fits in 160 bits\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n            }\n\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n        } else {\n            uint256 product;\n            // if the product overflows, we know the denominator underflows\n            // in addition, we must check that the denominator does not underflow\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n            uint256 denominator = numerator1 - product;\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            return uint256(sqrtPX96).add(quotient).toUint160();\n        } else {\n            uint256 quotient =\n                (\n                    amount <= type(uint160).max\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n                );\n\n            require(sqrtPX96 > quotient);\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we don't pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0);\n        require(liquidity > 0);\n\n        // round to make sure that we pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0);\n\n        return\n            roundUp\n                ? UnsafeMath.divRoundingUp(\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                    sqrtRatioAX96\n                )\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            roundUp\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        return\n            liquidity < 0\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        return\n            liquidity < 0\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(x == 0 || (z = x * y) / x == y);\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x + y) >= x == (y >= 0));\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        require((z = x - y) <= x == (y >= 0));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y);\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y);\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255);\n        z = int256(y);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { SignedSafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\";\r\nimport { MathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\";\r\nimport {\r\n    SafeERC20Upgradeable,\r\n    IERC20Upgradeable\r\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\r\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\r\nimport { TransferHelper } from \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\r\nimport { PerpSafeCast } from \"./lib/PerpSafeCast.sol\";\r\nimport { SettlementTokenMath } from \"./lib/SettlementTokenMath.sol\";\r\nimport { PerpMath } from \"./lib/PerpMath.sol\";\r\nimport { IERC20Metadata } from \"./interface/IERC20Metadata.sol\";\r\nimport { IInsuranceFund } from \"./interface/IInsuranceFund.sol\";\r\nimport { IExchange } from \"./interface/IExchange.sol\";\r\nimport { IAccountBalance } from \"./interface/IAccountBalance.sol\";\r\nimport { IClearingHouseConfig } from \"./interface/IClearingHouseConfig.sol\";\r\nimport { IClearingHouse } from \"./interface/IClearingHouse.sol\";\r\nimport { BaseRelayRecipient } from \"./gsn/BaseRelayRecipient.sol\";\r\nimport { OwnerPausable } from \"./base/OwnerPausable.sol\";\r\nimport { VaultStorageV2 } from \"./storage/VaultStorage.sol\";\r\nimport { Collateral } from \"./lib/Collateral.sol\";\r\nimport { IVault } from \"./interface/IVault.sol\";\r\nimport { IWETH9 } from \"./interface/external/IWETH9.sol\";\r\nimport { ICollateralManager } from \"./interface/ICollateralManager.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract Vault is IVault, ReentrancyGuardUpgradeable, OwnerPausable, BaseRelayRecipient, VaultStorageV2 {\r\n    using SafeMathUpgradeable for uint256;\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for int256;\r\n    using SignedSafeMathUpgradeable for int256;\r\n    using SettlementTokenMath for uint256;\r\n    using SettlementTokenMath for int256;\r\n    using PerpMath for int256;\r\n    using PerpMath for uint256;\r\n    using PerpMath for uint24;\r\n    using FullMath for uint256;\r\n    using AddressUpgradeable for address;\r\n\r\n    uint24 private constant _ONE_HUNDRED_PERCENT_RATIO = 1e6;\r\n\r\n    //\r\n    // MODIFIER\r\n    //\r\n\r\n    modifier onlySettlementOrCollateralToken(address token) {\r\n        // V_OSCT: only settlement or collateral token\r\n        require(token == _settlementToken || _isCollateral(token), \"V_OSCT\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    /// @dev only used for unwrapping weth in withdrawETH\r\n    receive() external payable {}\r\n\r\n    function initialize(\r\n        address insuranceFundArg,\r\n        address clearingHouseConfigArg,\r\n        address accountBalanceArg,\r\n        address exchangeArg\r\n    ) external initializer {\r\n        address settlementTokenArg = IInsuranceFund(insuranceFundArg).getToken();\r\n        uint8 decimalsArg = IERC20Metadata(settlementTokenArg).decimals();\r\n\r\n        // invalid settlementToken decimals\r\n        require(decimalsArg <= 18, \"V_ISTD\");\r\n        // ClearingHouseConfig address is not contract\r\n        require(clearingHouseConfigArg.isContract(), \"V_CHCNC\");\r\n        // accountBalance address is not contract\r\n        require(accountBalanceArg.isContract(), \"V_ABNC\");\r\n        // exchange address is not contract\r\n        require(exchangeArg.isContract(), \"V_ENC\");\r\n\r\n        __ReentrancyGuard_init();\r\n        __OwnerPausable_init();\r\n\r\n        // update states\r\n        _decimals = decimalsArg;\r\n        _settlementToken = settlementTokenArg;\r\n        _insuranceFund = insuranceFundArg;\r\n        _clearingHouseConfig = clearingHouseConfigArg;\r\n        _accountBalance = accountBalanceArg;\r\n        _exchange = exchangeArg;\r\n    }\r\n\r\n    function setTrustedForwarder(address trustedForwarderArg) external onlyOwner {\r\n        // V_TFNC: TrustedForwarder address is not contract\r\n        require(trustedForwarderArg.isContract(), \"V_TFNC\");\r\n\r\n        _setTrustedForwarder(trustedForwarderArg);\r\n        emit TrustedForwarderChanged(trustedForwarderArg);\r\n    }\r\n\r\n    function setClearingHouse(address clearingHouseArg) external onlyOwner {\r\n        // V_CHNC: ClearingHouse is not contract\r\n        require(clearingHouseArg.isContract(), \"V_CHNC\");\r\n\r\n        _clearingHouse = clearingHouseArg;\r\n        emit ClearingHouseChanged(clearingHouseArg);\r\n    }\r\n\r\n    function setCollateralManager(address collateralManagerArg) external onlyOwner {\r\n        // V_CMNC: CollateralManager is not contract\r\n        require(collateralManagerArg.isContract(), \"V_CMNC\");\r\n\r\n        _collateralManager = collateralManagerArg;\r\n        emit CollateralManagerChanged(collateralManagerArg);\r\n    }\r\n\r\n    function setWETH9(address WETH9Arg) external onlyOwner {\r\n        // V_WNC: WETH9 is not contract\r\n        require(WETH9Arg.isContract(), \"V_WNC\");\r\n\r\n        _WETH9 = WETH9Arg;\r\n        emit WETH9Changed(WETH9Arg);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function deposit(address token, uint256 amount)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        onlySettlementOrCollateralToken(token)\r\n    {\r\n        // input requirement checks:\r\n        //   token: here\r\n        //   amount: _deposit\r\n\r\n        address from = _msgSender();\r\n        _deposit(from, from, token, amount);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function depositFor(\r\n        address to,\r\n        address token,\r\n        uint256 amount\r\n    ) external override whenNotPaused nonReentrant onlySettlementOrCollateralToken(token) {\r\n        // input requirement checks:\r\n        //   token: here\r\n        //   amount: _deposit\r\n\r\n        // V_DFZA: Deposit for zero address\r\n        require(to != address(0), \"V_DFZA\");\r\n\r\n        address from = _msgSender();\r\n        _deposit(from, to, token, amount);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function depositEther() external payable override whenNotPaused nonReentrant {\r\n        address to = _msgSender();\r\n        _depositEther(to);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function depositEtherFor(address to) external payable override whenNotPaused nonReentrant {\r\n        // input requirement checks:\r\n        //   to: here\r\n\r\n        // V_DFZA: Deposit for zero address\r\n        require(to != address(0), \"V_DFZA\");\r\n        _depositEther(to);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    // the full process of withdrawal:\r\n    // 1. settle funding payment to owedRealizedPnl\r\n    // 2. collect fee to owedRealizedPnl\r\n    // 3. call Vault.withdraw(token, amount)\r\n    // 4. settle pnl to trader balance in Vault\r\n    // 5. transfer the amount to trader\r\n    function withdraw(address token, uint256 amount)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        onlySettlementOrCollateralToken(token)\r\n    {\r\n        // input requirement checks:\r\n        //   token: here\r\n        //   amount: in _settleAndDecreaseBalance()\r\n\r\n        address to = _msgSender();\r\n        _withdraw(to, token, amount);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function withdrawEther(uint256 amount) external override whenNotPaused nonReentrant {\r\n        // input requirement checks:\r\n        //   amount: in _settleAndDecreaseBalance()\r\n\r\n        _requireWETH9IsCollateral();\r\n\r\n        address to = _msgSender();\r\n\r\n        _withdrawEther(to, amount);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function withdrawAll(address token)\r\n        external\r\n        override\r\n        whenNotPaused\r\n        nonReentrant\r\n        onlySettlementOrCollateralToken(token)\r\n        returns (uint256 amount)\r\n    {\r\n        // input requirement checks:\r\n        //   token: here\r\n\r\n        address to = _msgSender();\r\n        amount = getFreeCollateralByToken(to, token);\r\n\r\n        _withdraw(to, token, amount);\r\n        return amount;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function withdrawAllEther() external override whenNotPaused nonReentrant returns (uint256 amount) {\r\n        _requireWETH9IsCollateral();\r\n\r\n        address to = _msgSender();\r\n        amount = getFreeCollateralByToken(to, _WETH9);\r\n\r\n        _withdrawEther(to, amount);\r\n        return amount;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function liquidateCollateral(\r\n        address trader,\r\n        address token,\r\n        uint256 amount,\r\n        bool isDenominatedInSettlementToken\r\n    ) external override whenNotPaused nonReentrant returns (uint256) {\r\n        // input requirement checks:\r\n        //   trader: here\r\n        //   token: in _isCollateral()\r\n        //   amount: here\r\n        //   isDenominatedInSettlementToken: X\r\n\r\n        // V_NL: Not liquidatable\r\n        require(isLiquidatable(trader), \"V_NL\");\r\n\r\n        (uint256 maxRepaidSettlementX10_S, uint256 maxLiquidatableCollateral) =\r\n            getMaxRepaidSettlementAndLiquidatableCollateral(trader, token);\r\n\r\n        uint256 collateral;\r\n        uint256 settlementX10_S;\r\n        uint256 returnAmount;\r\n\r\n        if (isDenominatedInSettlementToken) {\r\n            settlementX10_S = amount;\r\n            // V_MSAE: Maximum settlement amount exceeded\r\n            require(settlementX10_S <= maxRepaidSettlementX10_S, \"V_MSAE\");\r\n            collateral = settlementX10_S == maxRepaidSettlementX10_S\r\n                ? maxLiquidatableCollateral\r\n                : getLiquidatableCollateralBySettlement(token, settlementX10_S);\r\n            returnAmount = collateral;\r\n        } else {\r\n            collateral = amount;\r\n            // V_MCAE: Maximum collateral amount exceeded\r\n            require(collateral <= maxLiquidatableCollateral, \"V_MCAE\");\r\n            settlementX10_S = collateral == maxLiquidatableCollateral\r\n                ? maxRepaidSettlementX10_S\r\n                : getRepaidSettlementByCollateral(token, collateral);\r\n            returnAmount = settlementX10_S;\r\n        }\r\n\r\n        _liquidateCollateral(trader, token, settlementX10_S, collateral);\r\n\r\n        return returnAmount;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IVault\r\n    function getSettlementToken() external view override returns (address) {\r\n        return _settlementToken;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getTotalDebt() external view override returns (uint256) {\r\n        return _totalDebt;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getClearingHouseConfig() external view override returns (address) {\r\n        return _clearingHouseConfig;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getAccountBalance() external view override returns (address) {\r\n        return _accountBalance;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getInsuranceFund() external view override returns (address) {\r\n        return _insuranceFund;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getExchange() external view override returns (address) {\r\n        return _exchange;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getClearingHouse() external view override returns (address) {\r\n        return _clearingHouse;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getCollateralManager() external view override returns (address) {\r\n        return _collateralManager;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getWETH9() external view override returns (address) {\r\n        return _WETH9;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getFreeCollateral(address trader) external view override returns (uint256) {\r\n        return _getFreeCollateral(trader).formatSettlementToken(_decimals);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getFreeCollateralByRatio(address trader, uint24 ratio) external view override returns (int256) {\r\n        return _getFreeCollateralByRatio(trader, ratio).formatSettlementToken(_decimals);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getSettlementTokenValue(address trader) external view override returns (int256) {\r\n        return _getSettlementTokenValue(trader).formatSettlementToken(_decimals);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getAccountValue(address trader) external view override returns (int256) {\r\n        (int256 accountValueX10_18, ) = _getAccountValueAndTotalCollateralValue(trader);\r\n        return accountValueX10_18.formatSettlementToken(_decimals);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getCollateralTokens(address trader) external view override returns (address[] memory) {\r\n        return _collateralTokensMap[trader];\r\n    }\r\n\r\n    //\r\n    // PUBLIC VIEW\r\n    //\r\n\r\n    /// @inheritdoc IVault\r\n    function getBalance(address trader) public view override returns (int256) {\r\n        return _balance[trader][_settlementToken];\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getBalanceByToken(address trader, address token) public view override returns (int256) {\r\n        return _balance[trader][token];\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    /// @dev getFreeCollateralByToken(token) = (getSettlementTokenValue() >= 0)\r\n    ///   ? min(getFreeCollateral() / indexPrice[token], getBalanceByToken(token))\r\n    ///   : 0\r\n    /// @dev if token is settlementToken, then indexPrice[token] = 1\r\n    function getFreeCollateralByToken(address trader, address token) public view override returns (uint256) {\r\n        // do not check settlementTokenValue == 0 because user's settlement token balance may be zero\r\n        if (_getSettlementTokenValue(trader) < 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 freeCollateralX10_18 = _getFreeCollateral(trader);\r\n        if (freeCollateralX10_18 == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (token == _settlementToken) {\r\n            (int256 settlementTokenBalanceX10_18, ) = _getSettlementTokenBalanceAndUnrealizedPnl(trader);\r\n            return\r\n                settlementTokenBalanceX10_18 <= 0\r\n                    ? 0\r\n                    : MathUpgradeable\r\n                        .min(freeCollateralX10_18, settlementTokenBalanceX10_18.toUint256())\r\n                        .formatSettlementToken(_decimals);\r\n        }\r\n\r\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\r\n        uint24 collateralRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).collateralRatio;\r\n        return\r\n            MathUpgradeable.min(\r\n                _getCollateralBySettlement(token, freeCollateralX10_18, indexTwap, priceFeedDecimals).divRatio(\r\n                    collateralRatio\r\n                ),\r\n                // non-settlement token is always positive number\r\n                getBalanceByToken(trader, token).toUint256()\r\n            );\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function isLiquidatable(address trader) public view override returns (bool) {\r\n        address[] storage collateralTokens = _collateralTokensMap[trader];\r\n        if (collateralTokens.length == 0) {\r\n            return false;\r\n        }\r\n\r\n        (int256 accountValueX10_18, ) = _getAccountValueAndTotalCollateralValue(trader);\r\n        if (accountValueX10_18 < getMarginRequirementForCollateralLiquidation(trader)) {\r\n            return true;\r\n        }\r\n\r\n        int256 settlementTokenValueX10_18 = _getSettlementTokenValue(trader);\r\n        uint256 settlementTokenDebtX10_18 =\r\n            settlementTokenValueX10_18 < 0 ? settlementTokenValueX10_18.neg256().toUint256() : 0;\r\n\r\n        if (\r\n            settlementTokenDebtX10_18 >\r\n            _getNonSettlementTokenValue(trader).mulRatio(\r\n                ICollateralManager(_collateralManager).getDebtNonSettlementTokenValueRatio()\r\n            )\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        if (\r\n            settlementTokenDebtX10_18.formatSettlementToken(_decimals) >\r\n            ICollateralManager(_collateralManager).getDebtThreshold()\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getMarginRequirementForCollateralLiquidation(address trader) public view override returns (int256) {\r\n        return\r\n            IAccountBalance(_accountBalance)\r\n                .getTotalAbsPositionValue(trader)\r\n                .mulRatio(getCollateralMmRatio())\r\n                .toInt256();\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getCollateralMmRatio() public view override returns (uint24) {\r\n        uint24 collateralMmRatio =\r\n            ICollateralManager(_collateralManager).requireValidCollateralMmRatio(\r\n                ICollateralManager(_collateralManager).getMmRatioBuffer()\r\n            );\r\n        return collateralMmRatio;\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getRepaidSettlementByCollateral(address token, uint256 collateral)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 settlementX10_S)\r\n    {\r\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\r\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\r\n\r\n        return\r\n            _getSettlementByCollateral(\r\n                token,\r\n                collateral,\r\n                indexTwap.mulRatio(_ONE_HUNDRED_PERCENT_RATIO.subRatio(discountRatio)),\r\n                priceFeedDecimals\r\n            )\r\n                .formatSettlementToken(_decimals);\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    function getLiquidatableCollateralBySettlement(address token, uint256 settlementX10_S)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 collateral)\r\n    {\r\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\r\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\r\n\r\n        return\r\n            _getCollateralBySettlement(\r\n                token,\r\n                settlementX10_S.parseSettlementToken(_decimals),\r\n                indexTwap.mulRatio(_ONE_HUNDRED_PERCENT_RATIO.subRatio(discountRatio)),\r\n                priceFeedDecimals\r\n            );\r\n    }\r\n\r\n    /// @inheritdoc IVault\r\n    /// @dev formula:\r\n    /// maxRepaidSettlement = maxLiquidatableCollateral * (indexTwap * (1 - discountRatio))\r\n    /// maxLiquidatableCollateral =\r\n    ///     min(maxRepaidSettlement / (indexTwap * (1 - discountRatio)), getBalanceByToken(trader, token))\r\n    function getMaxRepaidSettlementAndLiquidatableCollateral(address trader, address token)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 maxRepaidSettlementX10_S, uint256 maxLiquidatableCollateral)\r\n    {\r\n        // V_TINAC: token is not a collateral\r\n        require(_isCollateral(token), \"V_TINAC\");\r\n\r\n        uint256 maxRepaidSettlementX10_18 = _getMaxRepaidSettlement(trader);\r\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\r\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\r\n\r\n        uint256 discountedIndexTwap = indexTwap.mulRatio(_ONE_HUNDRED_PERCENT_RATIO.subRatio(discountRatio));\r\n        maxLiquidatableCollateral = _getCollateralBySettlement(\r\n            token,\r\n            maxRepaidSettlementX10_18,\r\n            discountedIndexTwap,\r\n            priceFeedDecimals\r\n        );\r\n\r\n        uint256 tokenBalance = getBalanceByToken(trader, token).toUint256();\r\n        if (maxLiquidatableCollateral > tokenBalance) {\r\n            maxLiquidatableCollateral = tokenBalance;\r\n\r\n            // Deliberately rounding down when calculating settlement. Thus, when calculating\r\n            // collateral with settlement, the result is always <= maxCollateral.\r\n            // This makes sure that collateral will always be <= user's collateral balance.\r\n            maxRepaidSettlementX10_18 = _getSettlementByCollateral(\r\n                token,\r\n                maxLiquidatableCollateral,\r\n                discountedIndexTwap,\r\n                priceFeedDecimals\r\n            );\r\n        }\r\n\r\n        maxRepaidSettlementX10_S = maxRepaidSettlementX10_18.formatSettlementToken(_decimals);\r\n\r\n        return (maxRepaidSettlementX10_S, maxLiquidatableCollateral);\r\n    }\r\n\r\n    //\r\n    // INTERNAL NON-VIEW\r\n    //\r\n\r\n    /// @param token the collateral token needs to be transferred into vault\r\n    /// @param from the address of account who owns the collateral token\r\n    /// @param amount the amount of collateral token needs to be transferred\r\n    function _transferTokenIn(\r\n        address token,\r\n        address from,\r\n        uint256 amount\r\n    ) internal {\r\n        // check for deflationary tokens by assuring balances before and after transferring to be the same\r\n        uint256 balanceBefore = IERC20Metadata(token).balanceOf(address(this));\r\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(token), from, address(this), amount);\r\n        // V_IBA: inconsistent balance amount, to prevent from deflationary tokens\r\n        require((IERC20Metadata(token).balanceOf(address(this)).sub(balanceBefore)) == amount, \"V_IBA\");\r\n    }\r\n\r\n    /// @param from deposit token from this address\r\n    /// @param to deposit token to this address\r\n    /// @param token the collateral token wish to deposit\r\n    /// @param amount the amount of token to deposit\r\n    function _deposit(\r\n        address from,\r\n        address to,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        // V_ZA: Zero amount\r\n        require(amount > 0, \"V_ZA\");\r\n        _transferTokenIn(token, from, amount);\r\n        _checkDepositCapAndRegister(token, to, amount);\r\n    }\r\n\r\n    /// @param to deposit ETH to this address\r\n    function _depositEther(address to) internal {\r\n        uint256 amount = msg.value;\r\n        // V_ZA: Zero amount\r\n        require(amount > 0, \"V_ZA\");\r\n        _requireWETH9IsCollateral();\r\n\r\n        // SLOAD for gas saving\r\n        address WETH9 = _WETH9;\r\n        // wrap ETH into WETH\r\n        IWETH9(WETH9).deposit{ value: amount }();\r\n        _checkDepositCapAndRegister(WETH9, to, amount);\r\n    }\r\n\r\n    /// @param token the collateral token needs to be transferred out of vault\r\n    /// @param to the address of account that the collateral token deposit to\r\n    /// @param amount the amount of collateral token to be deposited\r\n    function _checkDepositCapAndRegister(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (token == _settlementToken) {\r\n            uint256 settlementTokenBalanceCap =\r\n                IClearingHouseConfig(_clearingHouseConfig).getSettlementTokenBalanceCap();\r\n            // V_GTSTBC: greater than settlement token balance cap\r\n            require(IERC20Metadata(token).balanceOf(address(this)) <= settlementTokenBalanceCap, \"V_GTSTBC\");\r\n        } else {\r\n            uint256 depositCap = ICollateralManager(_collateralManager).getCollateralConfig(token).depositCap;\r\n            // V_GTDC: greater than deposit cap\r\n            require(IERC20Metadata(token).balanceOf(address(this)) <= depositCap, \"V_GTDC\");\r\n        }\r\n\r\n        _modifyBalance(to, token, amount.toInt256());\r\n        emit Deposited(token, to, amount);\r\n    }\r\n\r\n    function _settleAndDecreaseBalance(\r\n        address to,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        // settle all funding payments owedRealizedPnl\r\n        // pending fee can be withdraw but won't be settled\r\n        IClearingHouse(_clearingHouse).settleAllFunding(to);\r\n\r\n        // incl. owedRealizedPnl\r\n        uint256 freeCollateral = getFreeCollateralByToken(to, token);\r\n        // V_NEFC: not enough freeCollateral\r\n        require(freeCollateral >= amount, \"V_NEFC\");\r\n\r\n        int256 deltaBalance = amount.toInt256().neg256();\r\n        if (token == _settlementToken) {\r\n            // borrow settlement token from insurance fund if the token balance in Vault is not enough\r\n            uint256 vaultBalanceX10_S = IERC20Metadata(token).balanceOf(address(this));\r\n            if (vaultBalanceX10_S < amount) {\r\n                uint256 borrowedAmountX10_S = amount - vaultBalanceX10_S;\r\n                IInsuranceFund(_insuranceFund).borrow(borrowedAmountX10_S);\r\n                _totalDebt += borrowedAmountX10_S;\r\n            }\r\n\r\n            // settle both the withdrawn amount and owedRealizedPnl to collateral\r\n            int256 owedRealizedPnlX10_18 = IAccountBalance(_accountBalance).settleOwedRealizedPnl(to);\r\n            deltaBalance = deltaBalance.add(owedRealizedPnlX10_18.formatSettlementToken(_decimals));\r\n        }\r\n\r\n        _modifyBalance(to, token, deltaBalance);\r\n    }\r\n\r\n    function _withdraw(\r\n        address to,\r\n        address token,\r\n        uint256 amount\r\n    ) internal {\r\n        _settleAndDecreaseBalance(to, token, amount);\r\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(token), to, amount);\r\n        emit Withdrawn(token, to, amount);\r\n    }\r\n\r\n    function _withdrawEther(address to, uint256 amount) internal {\r\n        // SLOAD for gas saving\r\n        address WETH9 = _WETH9;\r\n\r\n        _settleAndDecreaseBalance(to, WETH9, amount);\r\n\r\n        IWETH9(WETH9).withdraw(amount);\r\n        TransferHelper.safeTransferETH(to, amount);\r\n        emit Withdrawn(WETH9, to, amount);\r\n    }\r\n\r\n    /// @param amount can be 0; do not require this\r\n    function _modifyBalance(\r\n        address trader,\r\n        address token,\r\n        int256 amount\r\n    ) internal {\r\n        int256 oldBalance = _balance[trader][token];\r\n        int256 newBalance = oldBalance.add(amount);\r\n        _balance[trader][token] = newBalance;\r\n\r\n        if (token == _settlementToken) {\r\n            return;\r\n        }\r\n\r\n        // register/deregister non-settlement collateral tokens\r\n        if (oldBalance != 0 && newBalance == 0) {\r\n            address[] storage collateralTokens = _collateralTokensMap[trader];\r\n            uint256 tokenLen = collateralTokens.length;\r\n            uint256 lastTokenIndex = tokenLen - 1;\r\n            // find and deregister the token\r\n            for (uint256 i; i < tokenLen; i++) {\r\n                if (collateralTokens[i] == token) {\r\n                    // delete the token by replacing it with the last one and then pop it from there\r\n                    if (i != lastTokenIndex) {\r\n                        collateralTokens[i] = collateralTokens[lastTokenIndex];\r\n                    }\r\n                    collateralTokens.pop();\r\n                    break;\r\n                }\r\n            }\r\n        } else if (oldBalance == 0 && newBalance != 0) {\r\n            address[] storage collateralTokens = _collateralTokensMap[trader];\r\n            collateralTokens.push(token);\r\n            // V_CTNE: collateral tokens number exceeded\r\n            require(\r\n                collateralTokens.length <= ICollateralManager(_collateralManager).getMaxCollateralTokensPerAccount(),\r\n                \"V_CTNE\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev liquidate trader's collateral token by repaying the trader's settlement token debt\r\n    ///      the amount of collateral token and settlement token should be calculated by using\r\n    ///      getLiquidatableCollateralBySettlement() and getRepaidSettlementByCollateral()\r\n    function _liquidateCollateral(\r\n        address trader,\r\n        address token,\r\n        uint256 settlementX10_S,\r\n        uint256 collateral\r\n    ) internal {\r\n        address liquidator = _msgSender();\r\n        address settlementToken = _settlementToken; // SLOAD gas saving\r\n\r\n        // transfer settlement token from liquidator before changing any internal states\r\n        _transferTokenIn(settlementToken, liquidator, settlementX10_S);\r\n\r\n        _modifyBalance(trader, token, collateral.neg256());\r\n\r\n        uint24 clInsuranceFundFeeRatio = ICollateralManager(_collateralManager).getCLInsuranceFundFeeRatio();\r\n        // round down in insurance fund fee calculation, so we can make sure all\r\n        // the user's debt can be repaid when fully collateral liquidation\r\n        uint256 insuranceFundFeeX10_S = settlementX10_S.mulRatio(clInsuranceFundFeeRatio);\r\n        _modifyBalance(_insuranceFund, settlementToken, insuranceFundFeeX10_S.toInt256());\r\n\r\n        uint256 repaidSettlementWithoutInsuranceFundFeeX10_S = settlementX10_S.sub(insuranceFundFeeX10_S);\r\n        _modifyBalance(trader, settlementToken, repaidSettlementWithoutInsuranceFundFeeX10_S.toInt256());\r\n\r\n        // transfer collateral token from vault to liquidator\r\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(token), liquidator, collateral);\r\n\r\n        uint24 discountRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).discountRatio;\r\n\r\n        emit CollateralLiquidated(\r\n            trader,\r\n            token,\r\n            liquidator,\r\n            collateral,\r\n            repaidSettlementWithoutInsuranceFundFeeX10_S,\r\n            insuranceFundFeeX10_S,\r\n            discountRatio\r\n        );\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    function _getTokenDecimals(address token) internal view returns (uint8) {\r\n        return IERC20Metadata(token).decimals();\r\n    }\r\n\r\n    function _getFreeCollateral(address trader) internal view returns (uint256 freeCollateralX10_18) {\r\n        return\r\n            PerpMath\r\n                .max(_getFreeCollateralByRatio(trader, IClearingHouseConfig(_clearingHouseConfig).getImRatio()), 0)\r\n                .toUint256();\r\n    }\r\n\r\n    function _getFreeCollateralByRatio(address trader, uint24 ratio)\r\n        internal\r\n        view\r\n        returns (int256 freeCollateralX10_18)\r\n    {\r\n        // conservative config: freeCollateral = min(totalCollateralValue, accountValue) - openOrderMarginReq\r\n        (int256 accountValueX10_18, int256 totalCollateralValueX10_18) =\r\n            _getAccountValueAndTotalCollateralValue(trader);\r\n        uint256 totalMarginRequirementX10_18 = _getTotalMarginRequirement(trader, ratio);\r\n\r\n        return\r\n            PerpMath.min(totalCollateralValueX10_18, accountValueX10_18).sub(totalMarginRequirementX10_18.toInt256());\r\n\r\n        // moderate config: freeCollateral = min(totalCollateralValue, accountValue - openOrderMarginReq)\r\n        // return\r\n        //     PerpMath.min(\r\n        //         totalCollateralValueX10_18,\r\n        //         accountValueX10_S.sub(totalMarginRequirementX10_18.toInt256())\r\n        //     );\r\n\r\n        // aggressive config: freeCollateral = accountValue - openOrderMarginReq\r\n        // note that the aggressive model depends entirely on unrealizedPnl, which depends on the index price\r\n        //      we should implement some sort of safety check before using this model; otherwise,\r\n        //      a trader could drain the entire vault if the index price deviates significantly.\r\n        // return accountValueX10_18.sub(totalMarginRequirementX10_18.toInt256());\r\n    }\r\n\r\n    function _getTotalCollateralValue(address trader) internal view returns (int256 totalCollateralValueX10_18) {\r\n        (int256 settlementTokenBalanceX10_18, ) = _getSettlementTokenBalanceAndUnrealizedPnl(trader);\r\n        uint256 nonSettlementTokenValueX10_18 = _getNonSettlementTokenValue(trader);\r\n        return nonSettlementTokenValueX10_18.toInt256().add(settlementTokenBalanceX10_18);\r\n    }\r\n\r\n    /// @notice Get the specified trader's settlement token balance, including pending fee, funding payment,\r\n    ///         owed realized PnL, but without unrealized PnL)\r\n    /// @dev Note the difference between the return argument`settlementTokenBalanceX10_18` and\r\n    ///      the return value of `getSettlementTokenValue()`.\r\n    ///      The first one is settlement token balance with pending fee, funding payment, owed realized PnL;\r\n    ///      The second one is the first one plus unrealized PnL.\r\n    /// @return settlementTokenBalanceX10_18 Settlement amount in 18 decimals\r\n    /// @return unrealizedPnlX10_18 Unrealized PnL in 18 decimals\r\n    function _getSettlementTokenBalanceAndUnrealizedPnl(address trader)\r\n        internal\r\n        view\r\n        returns (int256 settlementTokenBalanceX10_18, int256 unrealizedPnlX10_18)\r\n    {\r\n        int256 fundingPaymentX10_18 = IExchange(_exchange).getAllPendingFundingPayment(trader);\r\n\r\n        int256 owedRealizedPnlX10_18;\r\n        uint256 pendingFeeX10_18;\r\n        (owedRealizedPnlX10_18, unrealizedPnlX10_18, pendingFeeX10_18) = IAccountBalance(_accountBalance)\r\n            .getPnlAndPendingFee(trader);\r\n\r\n        settlementTokenBalanceX10_18 = getBalance(trader).parseSettlementToken(_decimals).add(\r\n            pendingFeeX10_18.toInt256().sub(fundingPaymentX10_18).add(owedRealizedPnlX10_18)\r\n        );\r\n\r\n        return (settlementTokenBalanceX10_18, unrealizedPnlX10_18);\r\n    }\r\n\r\n    /// @return settlementTokenValueX10_18 settlementTokenBalance + totalUnrealizedPnl, in 18 decimals\r\n    function _getSettlementTokenValue(address trader) internal view returns (int256 settlementTokenValueX10_18) {\r\n        (int256 settlementBalanceX10_18, int256 unrealizedPnlX10_18) =\r\n            _getSettlementTokenBalanceAndUnrealizedPnl(trader);\r\n        return settlementBalanceX10_18.add(unrealizedPnlX10_18);\r\n    }\r\n\r\n    /// @return nonSettlementTokenValueX10_18 total non-settlement token value in 18 decimals\r\n    function _getNonSettlementTokenValue(address trader) internal view returns (uint256 nonSettlementTokenValueX10_18) {\r\n        address[] memory collateralTokens = _collateralTokensMap[trader];\r\n        uint256 tokenLen = collateralTokens.length;\r\n        for (uint256 i = 0; i < tokenLen; i++) {\r\n            address token = collateralTokens[i];\r\n            uint256 collateralValueX10_18 = _getCollateralValue(trader, token);\r\n            uint24 collateralRatio = ICollateralManager(_collateralManager).getCollateralConfig(token).collateralRatio;\r\n\r\n            nonSettlementTokenValueX10_18 = nonSettlementTokenValueX10_18.add(\r\n                collateralValueX10_18.mulRatio(collateralRatio)\r\n            );\r\n        }\r\n\r\n        return nonSettlementTokenValueX10_18;\r\n    }\r\n\r\n    /// @return collateralValueX10_18 collateral value in 18 decimals\r\n    function _getCollateralValue(address trader, address token) internal view returns (uint256 collateralValueX10_18) {\r\n        int256 tokenBalance = getBalanceByToken(trader, token);\r\n        (uint256 indexTwap, uint8 priceFeedDecimals) = _getIndexPriceAndDecimals(token);\r\n        return _getSettlementByCollateral(token, tokenBalance.toUint256(), indexTwap, priceFeedDecimals);\r\n    }\r\n\r\n    function _getIndexPriceAndDecimals(address token) internal view returns (uint256, uint8) {\r\n        return (\r\n            ICollateralManager(_collateralManager).getPrice(\r\n                token,\r\n                IClearingHouseConfig(_clearingHouseConfig).getTwapInterval()\r\n            ),\r\n            ICollateralManager(_collateralManager).getPriceFeedDecimals(token)\r\n        );\r\n    }\r\n\r\n    /// @return settlementX10_18 collateral value in 18 decimals\r\n    function _getSettlementByCollateral(\r\n        address token,\r\n        uint256 collateral,\r\n        uint256 price,\r\n        uint8 priceFeedDecimals\r\n    ) internal view returns (uint256 settlementX10_18) {\r\n        uint8 collateralTokenDecimals = _getTokenDecimals(token);\r\n\r\n        // Convert token decimals with as much precision as possible\r\n        return\r\n            collateralTokenDecimals > 18\r\n                ? collateral.mulDiv(price, 10**priceFeedDecimals).convertTokenDecimals(collateralTokenDecimals, 18)\r\n                : collateral.convertTokenDecimals(collateralTokenDecimals, 18).mulDiv(price, 10**priceFeedDecimals);\r\n    }\r\n\r\n    /// @return collateral collateral amount\r\n    function _getCollateralBySettlement(\r\n        address token,\r\n        uint256 settlementX10_18,\r\n        uint256 price,\r\n        uint8 priceFeedDecimals\r\n    ) internal view returns (uint256 collateral) {\r\n        uint8 collateralTokenDecimals = _getTokenDecimals(token);\r\n\r\n        // Convert token decimals with as much precision as possible\r\n        return\r\n            collateralTokenDecimals > 18\r\n                ? settlementX10_18.convertTokenDecimals(18, collateralTokenDecimals).mulDivRoundingUp(\r\n                    10**priceFeedDecimals,\r\n                    price\r\n                )\r\n                : settlementX10_18.mulDivRoundingUp(10**priceFeedDecimals, price).convertTokenDecimals(\r\n                    18,\r\n                    collateralTokenDecimals\r\n                );\r\n    }\r\n\r\n    function _getAccountValueAndTotalCollateralValue(address trader)\r\n        internal\r\n        view\r\n        returns (int256 accountValueX10_18, int256 totalCollateralValueX10_18)\r\n    {\r\n        (, int256 unrealizedPnlX10_18, ) = IAccountBalance(_accountBalance).getPnlAndPendingFee(trader);\r\n\r\n        totalCollateralValueX10_18 = _getTotalCollateralValue(trader);\r\n\r\n        // accountValue = totalCollateralValue + totalUnrealizedPnl, in 18 decimals\r\n        accountValueX10_18 = totalCollateralValueX10_18.add(unrealizedPnlX10_18);\r\n\r\n        return (accountValueX10_18, totalCollateralValueX10_18);\r\n    }\r\n\r\n    /// @notice Get the maximum value denominated in settlement token when liquidating a trader's collateral tokens\r\n    /// @dev formula:\r\n    ///      maxDebt = max(max(-settlementTokenValue, 0), openOrderReq)\r\n    ///      maxRepaidSettlementWithoutInsuranceFundFee =\r\n    ///          maxDebt > collateralValueDustThreshold ? maxDebt * liquidationRatio : maxDebt\r\n    ///      maxRepaidSettlement = maxRepaidSettlementWithoutInsuranceFundFee / (1 - IFRatio)\r\n    /// @return maxRepaidSettlementX10_18 max repaid settlement token in 18 decimals\r\n    function _getMaxRepaidSettlement(address trader) internal view returns (uint256 maxRepaidSettlementX10_18) {\r\n        // max(max(-settlementTokenValue, 0), totalMarginReq) * liquidationRatio\r\n        int256 settlementTokenValueX10_18 = _getSettlementTokenValue(trader);\r\n        uint256 settlementTokenDebtX10_18 =\r\n            settlementTokenValueX10_18 < 0 ? settlementTokenValueX10_18.neg256().toUint256() : 0;\r\n\r\n        uint256 totalMarginRequirementX10_18 =\r\n            _getTotalMarginRequirement(trader, IClearingHouseConfig(_clearingHouseConfig).getImRatio());\r\n\r\n        uint256 maxDebtX10_18 = MathUpgradeable.max(settlementTokenDebtX10_18, totalMarginRequirementX10_18);\r\n        uint256 collateralValueDustX10_18 =\r\n            ICollateralManager(_collateralManager).getCollateralValueDust().parseSettlementToken(_decimals);\r\n        uint256 maxRepaidSettlementWithoutInsuranceFundFeeX10_18 =\r\n            maxDebtX10_18 > collateralValueDustX10_18\r\n                ? maxDebtX10_18.mulRatio(ICollateralManager(_collateralManager).getLiquidationRatio())\r\n                : maxDebtX10_18;\r\n\r\n        return\r\n            maxRepaidSettlementWithoutInsuranceFundFeeX10_18.divRatio(\r\n                _ONE_HUNDRED_PERCENT_RATIO.subRatio(ICollateralManager(_collateralManager).getCLInsuranceFundFeeRatio())\r\n            );\r\n    }\r\n\r\n    /// @return totalMarginRequirementX10_18 total margin requirement in 18 decimals\r\n    function _getTotalMarginRequirement(address trader, uint24 ratio)\r\n        internal\r\n        view\r\n        returns (uint256 totalMarginRequirementX10_18)\r\n    {\r\n        uint256 totalDebtValueX10_18 = IAccountBalance(_accountBalance).getTotalDebtValue(trader);\r\n        return totalDebtValueX10_18.mulRatio(ratio);\r\n    }\r\n\r\n    function _isCollateral(address token) internal view returns (bool) {\r\n        return ICollateralManager(_collateralManager).isCollateral(token);\r\n    }\r\n\r\n    function _requireWETH9IsCollateral() internal view {\r\n        // V_WINAC: WETH9 is not a collateral\r\n        require(_isCollateral(_WETH9), \"V_WINAC\");\r\n    }\r\n\r\n    /// @inheritdoc BaseRelayRecipient\r\n    function _msgSender() internal view override(BaseRelayRecipient, OwnerPausable) returns (address payable) {\r\n        return super._msgSender();\r\n    }\r\n\r\n    /// @inheritdoc BaseRelayRecipient\r\n    function _msgData() internal view override(BaseRelayRecipient, OwnerPausable) returns (bytes memory) {\r\n        return super._msgData();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/interface/IInsuranceFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\ninterface IInsuranceFund {\r\n    /// @param borrower The address of the borrower\r\n    event BorrowerChanged(address borrower);\r\n\r\n    /// @notice If bad debt happened, `Vault` contract will borrow from `InsuranceFund` contract\r\n    /// @dev Borrower must be set by owner\r\n    /// @param amount Borrow amount, must be less than `InsuranceFund` balance\r\n    function borrow(uint256 amount) external;\r\n\r\n    /// @notice Get settlement token address\r\n    /// @return token The address of settlement token\r\n    function getToken() external view returns (address token);\r\n\r\n    /// @notice Get valid borrower\r\n    /// @return borrower Should be equal to vault address\r\n    function getBorrower() external view returns (address borrower);\r\n}\r\n"
    },
    "contracts/storage/VaultStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\n/// @notice For future upgrades, do not change VaultStorageV1. Create a new\r\n/// contract which implements VaultStorageV1 and following the naming convention\r\n/// VaultStorageVX.\r\nabstract contract VaultStorageV1 {\r\n    // --------- IMMUTABLE ---------\r\n\r\n    uint8 internal _decimals;\r\n\r\n    address internal _settlementToken;\r\n\r\n    // --------- ^^^^^^^^^ ---------\r\n\r\n    address internal _clearingHouseConfig;\r\n    address internal _accountBalance;\r\n    address internal _insuranceFund;\r\n    address internal _exchange;\r\n    address internal _clearingHouse;\r\n    uint256 internal _totalDebt;\r\n\r\n    // key: trader, token address\r\n    mapping(address => mapping(address => int256)) internal _balance;\r\n}\r\n\r\nabstract contract VaultStorageV2 is VaultStorageV1 {\r\n    address internal _collateralManager;\r\n    address internal _WETH9;\r\n\r\n    // trader => collateral token\r\n    // collateral token registry of each trader\r\n    mapping(address => address[]) internal _collateralTokensMap;\r\n}\r\n"
    },
    "contracts/lib/Collateral.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nlibrary Collateral {\r\n    struct Config {\r\n        address priceFeed;\r\n        uint24 collateralRatio;\r\n        uint24 discountRatio;\r\n        uint256 depositCap;\r\n    }\r\n}\r\n"
    },
    "contracts/interface/external/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/// @title Interface for WETH9\r\ninterface IWETH9 is IERC20 {\r\n    /// @notice Deposit ether to get wrapped ether\r\n    function deposit() external payable;\r\n\r\n    /// @notice Withdraw wrapped ether to get ether\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "contracts/interface/ICollateralManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { Collateral } from \"../lib/Collateral.sol\";\r\n\r\ninterface ICollateralManager {\r\n    /// @notice Emitted when owner add collateral\r\n    /// @param token address of token\r\n    /// @param priceFeed address of price feed\r\n    /// @param collateralRatio collateral ratio\r\n    /// @param discountRatio discount ratio for the collateral liquidation\r\n    /// @param depositCap max amount of collateral that can be deposited\r\n    event CollateralAdded(\r\n        address indexed token,\r\n        address priceFeed,\r\n        uint24 collateralRatio,\r\n        uint24 discountRatio,\r\n        uint256 depositCap\r\n    );\r\n\r\n    /// @notice Emitted when owner update the address of clearing house config\r\n    /// @param clearingHouseConfig address of clearing house config\r\n    event ClearingHouseConfigChanged(address indexed clearingHouseConfig);\r\n\r\n    /// @notice Emitted when owner update the address of vault\r\n    /// @param vault address of vault\r\n    event VaultChanged(address indexed vault);\r\n\r\n    /// @notice Emitted when owner update the price feed address of a collateral token\r\n    /// @param token address of token\r\n    /// @param priceFeed address of price feed\r\n    event PriceFeedChanged(address indexed token, address priceFeed);\r\n\r\n    /// @notice Emitted when owner update the collateral ratio of a collateral token\r\n    /// @param token address of token\r\n    /// @param collateralRatio collateral ratio\r\n    event CollateralRatioChanged(address indexed token, uint24 collateralRatio);\r\n\r\n    /// @notice Emitted when owner change the discount ratio\r\n    /// @param token address of token\r\n    /// @param discountRatio discount ratio for the collateral liquidation\r\n    event DiscountRatioChanged(address indexed token, uint24 discountRatio);\r\n\r\n    /// @notice Emitted when owner update the deposit cap of a collateral token\r\n    /// @param token address of token\r\n    /// @param depositCap max amount of the collateral that can be deposited\r\n    event DepositCapChanged(address indexed token, uint256 depositCap);\r\n\r\n    /// @notice Emitted when owner init or update the max collateral tokens that per account can have,\r\n    /// \t\tthis is can prevent high gas cost.\r\n    /// @param maxCollateralTokensPerAccount max amount of collateral tokens that per account can have\r\n    event MaxCollateralTokensPerAccountChanged(uint8 maxCollateralTokensPerAccount);\r\n\r\n    /// @notice Emitted when owner init or update the maintenance margin ratio buffer,\r\n    ///         the value provides a safe range between the mmRatio & the collateralMMRatio.\r\n    /// @param mmRatioBuffer safe buffer number (bps)\r\n    event MmRatioBufferChanged(uint24 mmRatioBuffer);\r\n\r\n    /// @notice Emitted when owner init or update the debt non-settlement token value ratio,\r\n    ///         maximum `debt / nonSettlementTokenValue` before the account's is liquidatable\r\n    /// @param debtNonSettlementTokenValueRatio debt non-settlement token value ratio, ≤ 1\r\n    event DebtNonSettlementTokenValueRatioChanged(uint24 debtNonSettlementTokenValueRatio);\r\n\r\n    /// @notice Emitted when owner init or update the liquidation ratio,\r\n    ///         the value presents the max repaid ratio of the collateral liquidation.\r\n    /// @param liquidationRatio liquidation ratio, ≤ 1\r\n    event LiquidationRatioChanged(uint24 liquidationRatio);\r\n\r\n    /// @notice Emitted when owner init or update the clearing house insurance fund fee ratio,\r\n    ///         charge fee for clearing house insurance fund.\r\n    /// @param clInsuranceFundFeeRatio clearing house insurance fund fee ratio, ≤ 1\r\n    event CLInsuranceFundFeeRatioChanged(uint24 clInsuranceFundFeeRatio);\r\n\r\n    /// @notice Emitted when owner init or update the debt threshold,\r\n    ///\t\t \tmaximum debt allowed before an account’s collateral is liquidatable.\r\n    /// @param debtThreshold debt threshold\r\n    event DebtThresholdChanged(uint256 debtThreshold);\r\n\r\n    /// @notice Emitted when owner init or update the collateral value dust,\r\n    ///\t\t\tif a trader’s debt value falls below this dust threshold,\r\n    /// \t\tthe liquidator will ignore the liquidationRatio.\r\n    /// @param collateralValueDust collateral value dust\r\n    event CollateralValueDustChanged(uint256 collateralValueDust);\r\n\r\n    /// @notice Get the address of vault\r\n    /// @return vault address of vault\r\n    function getVault() external view returns (address);\r\n\r\n    /// @notice Get the address of clearing house config\r\n    /// @return clearingHouseConfig address of clearing house config\r\n    function getClearingHouseConfig() external view returns (address);\r\n\r\n    /// @notice Get collateral config by token address\r\n    /// @param token address of token\r\n    /// @return collateral config\r\n    function getCollateralConfig(address token) external view returns (Collateral.Config memory);\r\n\r\n    /// @notice Get price feed decimals of the collateral token\r\n    /// @param token address of token\r\n    /// @return decimals of the price feed\r\n    function getPriceFeedDecimals(address token) external view returns (uint8);\r\n\r\n    /// @notice Get the price of the collateral token\r\n    /// @param token address of token\r\n    /// @return price of the certain period\r\n    function getPrice(address token, uint256 interval) external view returns (uint256);\r\n\r\n    /// @notice Get the max number of collateral tokens per account\r\n    /// @return max number of collateral tokens per account\r\n    function getMaxCollateralTokensPerAccount() external view returns (uint8);\r\n\r\n    /// @notice Get the minimum `margin ratio - mmRatio` before the account's collateral is liquidatable\r\n    /// @dev 6 decimals, same decimals as _mmRatio\r\n    /// @return ratio\r\n    function getMmRatioBuffer() external view returns (uint24);\r\n\r\n    /// @notice Get the maximum `debt / nonSettlementTokenValue` before the account's collaterals are liquidated\r\n    /// @dev 6 decimals\r\n    /// @return ratio\r\n    function getDebtNonSettlementTokenValueRatio() external view returns (uint24);\r\n\r\n    /// @notice Get the maximum ratio of debt can be repaid in one transaction\r\n    /// @dev 6 decimals. For example, `liquidationRatio` = 50% means\r\n    ///      the liquidator can repay as much as half of the trader’s debt in one liquidation\r\n    /// @return liquidation ratio\r\n    function getLiquidationRatio() external view returns (uint24);\r\n\r\n    /// @notice Get the insurance fund fee ratio when liquidating a trader's collateral\r\n    /// @dev 6 decimals. For example, `clInsuranceFundFeeRatio` = 5% means\r\n    ///      the liquidator will pay 5% of transferred settlement token to insurance fund\r\n    /// @return insurance fund fee ratio\r\n    function getCLInsuranceFundFeeRatio() external view returns (uint24);\r\n\r\n    /// @notice Get the maximum debt (denominated in settlement token) allowed\r\n    ///\t\t\tbefore an account’s collateral is liquidatable.\r\n    /// @dev 6 decimals\r\n    /// @return Debt threshold\r\n    function getDebtThreshold() external view returns (uint256);\r\n\r\n    /// @notice Get the threshold of the minium repaid.\r\n    ///  \t\tIf a trader’s collateral value (denominated in settlement token) falls below the threshold,\r\n    ///         the liquidator can convert it with 100% `liquidationRatio` so there is no dust left\r\n    /// @dev 6 decimals\r\n    /// @return Dust collateral value\r\n    function getCollateralValueDust() external view returns (uint256);\r\n\r\n    /// @notice Check if the given token is one of collateral tokens\r\n    /// @param token address of token\r\n    /// @return true if the token is one of collateral tokens\r\n    function isCollateral(address token) external view returns (bool);\r\n\r\n    /// @notice Require and get the the valid collateral maintenance margin ratio by mmRatioBuffer\r\n    /// @param mmRatioBuffer safe margin ratio buffer; 6 decimals, same decimals as _mmRatio\r\n    /// @return collateralMmRatio the collateral maintenance margin ratio\r\n    function requireValidCollateralMmRatio(uint24 mmRatioBuffer) external view returns (uint24);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/storage/CollateralManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { Collateral } from \"../lib/Collateral.sol\";\r\n\r\nabstract contract CollateralManagerStorageV1 {\r\n    // key: token address, value: collateral config\r\n    mapping(address => Collateral.Config) internal _collateralConfigMap;\r\n\r\n    address internal _clearingHouseConfig;\r\n\r\n    address internal _vault;\r\n\r\n    uint8 internal _maxCollateralTokensPerAccount;\r\n\r\n    uint24 internal _mmRatioBuffer;\r\n\r\n    uint24 internal _debtNonSettlementTokenValueRatio;\r\n\r\n    uint24 internal _liquidationRatio;\r\n\r\n    uint24 internal _clInsuranceFundFeeRatio;\r\n\r\n    uint256 internal _debtThreshold;\r\n\r\n    uint256 internal _collateralValueDust;\r\n}\r\n"
    },
    "contracts/CollateralManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { OwnerPausable } from \"./base/OwnerPausable.sol\";\r\nimport { CollateralManagerStorageV1 } from \"./storage/CollateralManagerStorage.sol\";\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { IPriceFeed } from \"@perp/perp-oracle-contract/contracts/interface/IPriceFeed.sol\";\r\nimport { Collateral } from \"./lib/Collateral.sol\";\r\nimport { ICollateralManager } from \"./interface/ICollateralManager.sol\";\r\nimport { IClearingHouseConfig } from \"./interface/IClearingHouseConfig.sol\";\r\nimport { IVault } from \"./interface/IVault.sol\";\r\n\r\ncontract CollateralManager is ICollateralManager, OwnerPausable, CollateralManagerStorageV1 {\r\n    using AddressUpgradeable for address;\r\n\r\n    uint24 private constant _ONE_HUNDRED_PERCENT_RATIO = 1e6;\r\n\r\n    //\r\n    // MODIFIER\r\n    //\r\n\r\n    modifier checkRatio(uint24 ratio) {\r\n        // CM_IR: invalid ratio, should be in [0, 1]\r\n        require(ratio <= _ONE_HUNDRED_PERCENT_RATIO, \"CM_IR\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize(\r\n        address clearingHouseConfigArg,\r\n        address vaultArg,\r\n        uint8 maxCollateralTokensPerAccountArg,\r\n        uint24 debtNonSettlementTokenValueRatioArg,\r\n        uint24 liquidationRatioArg,\r\n        uint24 mmRatioBufferArg,\r\n        uint24 clInsuranceFundFeeRatioArg,\r\n        uint256 debtThresholdArg,\r\n        uint256 collateralValueDustArg\r\n    )\r\n        external\r\n        initializer\r\n        checkRatio(debtNonSettlementTokenValueRatioArg)\r\n        checkRatio(liquidationRatioArg)\r\n        checkRatio(clInsuranceFundFeeRatioArg)\r\n    {\r\n        // CM_CHCNC: clearing house config is not contract\r\n        require(clearingHouseConfigArg.isContract(), \"CM_CHCNC\");\r\n        // CM_VNC: vault is not contract\r\n        require(vaultArg.isContract(), \"CM_VNC\");\r\n\r\n        __OwnerPausable_init();\r\n\r\n        _clearingHouseConfig = clearingHouseConfigArg;\r\n        _vault = vaultArg;\r\n        _maxCollateralTokensPerAccount = maxCollateralTokensPerAccountArg;\r\n        _debtNonSettlementTokenValueRatio = debtNonSettlementTokenValueRatioArg;\r\n        _liquidationRatio = liquidationRatioArg;\r\n\r\n        requireValidCollateralMmRatio(mmRatioBufferArg);\r\n        _mmRatioBuffer = mmRatioBufferArg;\r\n\r\n        _clInsuranceFundFeeRatio = clInsuranceFundFeeRatioArg;\r\n        _debtThreshold = debtThresholdArg;\r\n        _collateralValueDust = collateralValueDustArg;\r\n\r\n        emit ClearingHouseConfigChanged(clearingHouseConfigArg);\r\n        emit VaultChanged(vaultArg);\r\n        emit MaxCollateralTokensPerAccountChanged(maxCollateralTokensPerAccountArg);\r\n        emit MmRatioBufferChanged(mmRatioBufferArg);\r\n        emit DebtNonSettlementTokenValueRatioChanged(debtNonSettlementTokenValueRatioArg);\r\n        emit LiquidationRatioChanged(liquidationRatioArg);\r\n        emit CLInsuranceFundFeeRatioChanged(clInsuranceFundFeeRatioArg);\r\n        emit DebtThresholdChanged(debtThresholdArg);\r\n        emit CollateralValueDustChanged(collateralValueDustArg);\r\n    }\r\n\r\n    function addCollateral(address token, Collateral.Config memory config)\r\n        external\r\n        checkRatio(config.collateralRatio)\r\n        checkRatio(config.discountRatio)\r\n        onlyOwner\r\n    {\r\n        // CM_CTE: collateral token already exists\r\n        require(!isCollateral(token), \"CM_CTE\");\r\n        // CM_CTNC: collateral token is not contract\r\n        require(token.isContract(), \"CM_CTNC\");\r\n        // CM_PFNC: price feed is not contract\r\n        require(config.priceFeed.isContract(), \"CM_PFNC\");\r\n        // CM_CIS: collateral token is settlement token\r\n        require(IVault(_vault).getSettlementToken() != token, \"CM_CIS\");\r\n\r\n        _collateralConfigMap[token] = config;\r\n        emit CollateralAdded(token, config.priceFeed, config.collateralRatio, config.discountRatio, config.depositCap);\r\n    }\r\n\r\n    function setPriceFeed(address token, address priceFeed) external onlyOwner {\r\n        _requireIsCollateral(token);\r\n        // CM_PFNC: price feed is not contract\r\n        require(priceFeed.isContract(), \"CM_PFNC\");\r\n\r\n        _collateralConfigMap[token].priceFeed = priceFeed;\r\n        emit PriceFeedChanged(token, priceFeed);\r\n    }\r\n\r\n    function setCollateralRatio(address token, uint24 collateralRatio) external checkRatio(collateralRatio) onlyOwner {\r\n        _requireIsCollateral(token);\r\n\r\n        _collateralConfigMap[token].collateralRatio = collateralRatio;\r\n        emit CollateralRatioChanged(token, collateralRatio);\r\n    }\r\n\r\n    function setDiscountRatio(address token, uint24 discountRatio) external checkRatio(discountRatio) onlyOwner {\r\n        _requireIsCollateral(token);\r\n\r\n        _collateralConfigMap[token].discountRatio = discountRatio;\r\n        emit DiscountRatioChanged(token, discountRatio);\r\n    }\r\n\r\n    function setDepositCap(address token, uint256 depositCap) external onlyOwner {\r\n        _requireIsCollateral(token);\r\n        _collateralConfigMap[token].depositCap = depositCap;\r\n        emit DepositCapChanged(token, depositCap);\r\n    }\r\n\r\n    function setMaxCollateralTokensPerAccount(uint8 maxCollateralTokensPerAccount) external onlyOwner {\r\n        _maxCollateralTokensPerAccount = maxCollateralTokensPerAccount;\r\n        emit MaxCollateralTokensPerAccountChanged(maxCollateralTokensPerAccount);\r\n    }\r\n\r\n    function setMmRatioBuffer(uint24 mmRatioBuffer) external onlyOwner {\r\n        requireValidCollateralMmRatio(mmRatioBuffer);\r\n\r\n        _mmRatioBuffer = mmRatioBuffer;\r\n        emit MmRatioBufferChanged(mmRatioBuffer);\r\n    }\r\n\r\n    function setDebtNonSettlementTokenValueRatio(uint24 debtNonSettlementTokenValueRatio)\r\n        external\r\n        checkRatio(debtNonSettlementTokenValueRatio)\r\n        onlyOwner\r\n    {\r\n        _debtNonSettlementTokenValueRatio = debtNonSettlementTokenValueRatio;\r\n        emit DebtNonSettlementTokenValueRatioChanged(debtNonSettlementTokenValueRatio);\r\n    }\r\n\r\n    function setLiquidationRatio(uint24 liquidationRatio) external checkRatio(liquidationRatio) onlyOwner {\r\n        _liquidationRatio = liquidationRatio;\r\n        emit LiquidationRatioChanged(liquidationRatio);\r\n    }\r\n\r\n    function setCLInsuranceFundFeeRatio(uint24 clInsuranceFundFeeRatio)\r\n        external\r\n        checkRatio(clInsuranceFundFeeRatio)\r\n        onlyOwner\r\n    {\r\n        _clInsuranceFundFeeRatio = clInsuranceFundFeeRatio;\r\n        emit CLInsuranceFundFeeRatioChanged(clInsuranceFundFeeRatio);\r\n    }\r\n\r\n    function setDebtThreshold(uint256 debtThreshold) external onlyOwner {\r\n        // CM_ZDT: zero debt threshold\r\n        require(debtThreshold != 0, \"CM_ZDT\");\r\n\r\n        _debtThreshold = debtThreshold;\r\n        emit DebtThresholdChanged(debtThreshold);\r\n    }\r\n\r\n    /// @dev Same decimals as the settlement token\r\n    function setCollateralValueDust(uint256 collateralValueDust) external onlyOwner {\r\n        _collateralValueDust = collateralValueDust;\r\n        emit CollateralValueDustChanged(collateralValueDust);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getClearingHouseConfig() external view override returns (address) {\r\n        return _clearingHouseConfig;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getVault() external view override returns (address) {\r\n        return _vault;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getCollateralConfig(address token) external view override returns (Collateral.Config memory) {\r\n        return _collateralConfigMap[token];\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getPriceFeedDecimals(address token) external view override returns (uint8) {\r\n        _requireIsCollateral(token);\r\n        return IPriceFeed(_collateralConfigMap[token].priceFeed).decimals();\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getPrice(address token, uint256 interval) external view override returns (uint256) {\r\n        _requireIsCollateral(token);\r\n        return IPriceFeed(_collateralConfigMap[token].priceFeed).getPrice(interval);\r\n    }\r\n\r\n    function getMaxCollateralTokensPerAccount() external view override returns (uint8) {\r\n        return _maxCollateralTokensPerAccount;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getMmRatioBuffer() external view override returns (uint24) {\r\n        return _mmRatioBuffer;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getDebtNonSettlementTokenValueRatio() external view override returns (uint24) {\r\n        return _debtNonSettlementTokenValueRatio;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getLiquidationRatio() external view override returns (uint24) {\r\n        return _liquidationRatio;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getCLInsuranceFundFeeRatio() external view override returns (uint24) {\r\n        return _clInsuranceFundFeeRatio;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getDebtThreshold() external view override returns (uint256) {\r\n        return _debtThreshold;\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function getCollateralValueDust() external view override returns (uint256) {\r\n        return _collateralValueDust;\r\n    }\r\n\r\n    //\r\n    // PUBLIC VIEW\r\n    //\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function isCollateral(address token) public view override returns (bool) {\r\n        return _collateralConfigMap[token].priceFeed != address(0);\r\n    }\r\n\r\n    /// @inheritdoc ICollateralManager\r\n    function requireValidCollateralMmRatio(uint24 mmRatioBuffer) public view override returns (uint24) {\r\n        uint24 collateralMmRatio = IClearingHouseConfig(_clearingHouseConfig).getMmRatio() + mmRatioBuffer;\r\n        // CM_ICMR : invalid collateralMmRatio\r\n        require(collateralMmRatio <= _ONE_HUNDRED_PERCENT_RATIO, \"CM_ICMR\");\r\n\r\n        return collateralMmRatio;\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    function _requireIsCollateral(address token) internal view {\r\n        // CM_TINAC: token is not a collateral\r\n        require(isCollateral(token), \"CM_TINAC\");\r\n    }\r\n}\r\n"
    },
    "@perp/perp-oracle-contract/contracts/interface/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\n\ninterface IPriceFeed {\n    function decimals() external view returns (uint8);\n\n    /// @dev Returns the index price of the token.\n    /// @param interval The interval represents twap interval.\n    function getPrice(uint256 interval) external view returns (uint256);\n}\n"
    },
    "contracts/ClearingHouseConfig.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { SafeOwnable } from \"./base/SafeOwnable.sol\";\r\nimport { ClearingHouseConfigStorageV2 } from \"./storage/ClearingHouseConfigStorage.sol\";\r\nimport { IClearingHouseConfig } from \"./interface/IClearingHouseConfig.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract ClearingHouseConfig is IClearingHouseConfig, SafeOwnable, ClearingHouseConfigStorageV2 {\r\n    //\r\n    // EVENT\r\n    //\r\n    event TwapIntervalChanged(uint256 twapInterval);\r\n    event LiquidationPenaltyRatioChanged(uint24 liquidationPenaltyRatio);\r\n    event PartialCloseRatioChanged(uint24 partialCloseRatio);\r\n    event MaxMarketsPerAccountChanged(uint8 maxMarketsPerAccount);\r\n    event SettlementTokenBalanceCapChanged(uint256 cap);\r\n    event MaxFundingRateChanged(uint24 rate);\r\n    event BackstopLiquidityProviderChanged(address indexed account, bool indexed isProvider);\r\n\r\n    //\r\n    // MODIFIER\r\n    //\r\n\r\n    modifier checkRatio(uint24 ratio) {\r\n        // CHC_RO: ratio overflow\r\n        require(ratio <= 1e6, \"CHC_RO\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize() external initializer {\r\n        __SafeOwnable_init();\r\n\r\n        _maxMarketsPerAccount = type(uint8).max;\r\n        _imRatio = 0.1e6; // initial-margin ratio, 10% in decimal 6\r\n        _mmRatio = 0.0625e6; // minimum-margin ratio, 6.25% in decimal 6\r\n        _liquidationPenaltyRatio = 0.025e6; // initial penalty ratio, 2.5% in decimal 6\r\n        _partialCloseRatio = 0.25e6; // partial close ratio, 25% in decimal 6\r\n        _maxFundingRate = 0.1e6; // max funding rate, 10% in decimal 6\r\n        _twapInterval = 15 minutes;\r\n        _settlementTokenBalanceCap = 0;\r\n    }\r\n\r\n    function setLiquidationPenaltyRatio(uint24 liquidationPenaltyRatioArg)\r\n        external\r\n        checkRatio(liquidationPenaltyRatioArg)\r\n        onlyOwner\r\n    {\r\n        _liquidationPenaltyRatio = liquidationPenaltyRatioArg;\r\n        emit LiquidationPenaltyRatioChanged(liquidationPenaltyRatioArg);\r\n    }\r\n\r\n    function setPartialCloseRatio(uint24 partialCloseRatioArg) external checkRatio(partialCloseRatioArg) onlyOwner {\r\n        // CHC_IPCR: invalid partialCloseRatio\r\n        require(partialCloseRatioArg > 0, \"CHC_IPCR\");\r\n\r\n        _partialCloseRatio = partialCloseRatioArg;\r\n        emit PartialCloseRatioChanged(partialCloseRatioArg);\r\n    }\r\n\r\n    function setTwapInterval(uint32 twapIntervalArg) external onlyOwner {\r\n        // CHC_ITI: invalid twapInterval\r\n        require(twapIntervalArg != 0, \"CHC_ITI\");\r\n\r\n        _twapInterval = twapIntervalArg;\r\n        emit TwapIntervalChanged(twapIntervalArg);\r\n    }\r\n\r\n    function setMaxMarketsPerAccount(uint8 maxMarketsPerAccountArg) external onlyOwner {\r\n        _maxMarketsPerAccount = maxMarketsPerAccountArg;\r\n        emit MaxMarketsPerAccountChanged(maxMarketsPerAccountArg);\r\n    }\r\n\r\n    function setSettlementTokenBalanceCap(uint256 cap) external onlyOwner {\r\n        _settlementTokenBalanceCap = cap;\r\n        emit SettlementTokenBalanceCapChanged(cap);\r\n    }\r\n\r\n    function setMaxFundingRate(uint24 rate) external onlyOwner {\r\n        _maxFundingRate = rate;\r\n        emit MaxFundingRateChanged(rate);\r\n    }\r\n\r\n    function setBackstopLiquidityProvider(address account, bool isProvider) external onlyOwner {\r\n        _backstopLiquidityProviderMap[account] = isProvider;\r\n        emit BackstopLiquidityProviderChanged(account, isProvider);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getMaxMarketsPerAccount() external view override returns (uint8) {\r\n        return _maxMarketsPerAccount;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getImRatio() external view override returns (uint24) {\r\n        return _imRatio;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getMmRatio() external view override returns (uint24) {\r\n        return _mmRatio;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getLiquidationPenaltyRatio() external view override returns (uint24) {\r\n        return _liquidationPenaltyRatio;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getPartialCloseRatio() external view override returns (uint24) {\r\n        return _partialCloseRatio;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getTwapInterval() external view override returns (uint32) {\r\n        return _twapInterval;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getSettlementTokenBalanceCap() external view override returns (uint256) {\r\n        return _settlementTokenBalanceCap;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function getMaxFundingRate() external view override returns (uint24) {\r\n        return _maxFundingRate;\r\n    }\r\n\r\n    /// @inheritdoc IClearingHouseConfig\r\n    function isBackstopLiquidityProvider(address account) external view override returns (bool) {\r\n        return _backstopLiquidityProviderMap[account];\r\n    }\r\n}\r\n"
    },
    "contracts/storage/ClearingHouseConfigStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\n/// @notice For future upgrades, do not change ClearingHouseConfigStorageV1. Create a new\r\n/// contract which implements ClearingHouseConfigStorageV1 and following the naming convention\r\n/// ClearingHouseConfigStorageVX.\r\nabstract contract ClearingHouseConfigStorageV1 {\r\n    uint8 internal _maxMarketsPerAccount;\r\n    uint24 internal _imRatio;\r\n    uint24 internal _mmRatio;\r\n    uint24 internal _liquidationPenaltyRatio;\r\n    uint24 internal _partialCloseRatio;\r\n    uint24 internal _maxFundingRate;\r\n    uint32 internal _twapInterval;\r\n    uint256 internal _settlementTokenBalanceCap;\r\n}\r\n\r\nabstract contract ClearingHouseConfigStorageV2 is ClearingHouseConfigStorageV1 {\r\n    mapping(address => bool) internal _backstopLiquidityProviderMap;\r\n}\r\n"
    },
    "contracts/test/TestWhitelistERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { SafeOwnable } from \"../base/SafeOwnable.sol\";\r\nimport \"./TestERC20.sol\";\r\n\r\ncontract TestWhitelistERC20 is TestERC20, SafeOwnable {\r\n    mapping(address => bool) internal _whitelist;\r\n\r\n    modifier whitelistCheck(address sender, address recipient) {\r\n        if (!_whitelist[sender]) {\r\n            require(_whitelist[recipient], \"The address of recipient is not in whitelist.\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function __TestWhitelistERC20_init(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimal\r\n    ) external initializer {\r\n        __TestERC20_init(name, symbol, decimal);\r\n        __SafeOwnable_init();\r\n    }\r\n\r\n    function addWhitelist(address addr) external onlyOwner {\r\n        _whitelist[addr] = true;\r\n    }\r\n\r\n    function removeWhitelist(address addr) external onlyOwner {\r\n        _whitelist[addr] = false;\r\n    }\r\n\r\n    function isInWhitelist(address addr) external view returns (bool) {\r\n        return _whitelist[addr];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        whitelistCheck(msg.sender, recipient)\r\n        returns (bool)\r\n    {\r\n        return super.transfer(recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override whitelistCheck(msg.sender, recipient) returns (bool) {\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/presets/ERC20PresetMinterPauserUpgradeable.sol\";\r\n\r\ncontract TestERC20 is ERC20PresetMinterPauserUpgradeable {\r\n    uint256 _transferFeeRatio;\r\n\r\n    function __TestERC20_init(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimal\r\n    ) public initializer {\r\n        __ERC20PresetMinterPauser_init(name, symbol);\r\n        _setupDecimals(decimal);\r\n        _transferFeeRatio = 0;\r\n    }\r\n\r\n    function setMinter(address minter) external {\r\n        grantRole(MINTER_ROLE, minter);\r\n    }\r\n\r\n    function burnWithoutApproval(address user, uint256 amount) external {\r\n        _burn(user, amount);\r\n    }\r\n\r\n    function setTransferFeeRatio(uint256 ratio) external {\r\n        _transferFeeRatio = ratio;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool success) {\r\n        if (_transferFeeRatio != 0) {\r\n            uint256 fee = (amount * _transferFeeRatio) / 100;\r\n            _burn(sender, fee);\r\n            amount = amount - fee;\r\n        }\r\n        return super.transferFrom(sender, recipient, amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/presets/ERC20PresetMinterPauserUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../access/AccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../token/ERC20/ERC20Upgradeable.sol\";\nimport \"../token/ERC20/ERC20BurnableUpgradeable.sol\";\nimport \"../token/ERC20/ERC20PausableUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauserUpgradeable is Initializable, ContextUpgradeable, AccessControlUpgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable {\n    function initialize(string memory name, string memory symbol) public virtual initializer {\n        __ERC20PresetMinterPauser_init(name, symbol);\n    }\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    function __ERC20PresetMinterPauser_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n        __ERC20Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20Pausable_init_unchained();\n        __ERC20PresetMinterPauser_init_unchained(name, symbol);\n    }\n\n    function __ERC20PresetMinterPauser_init_unchained(string memory name, string memory symbol) internal initializer {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/EnumerableSetUpgradeable.sol\";\nimport \"../utils/AddressUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using AddressUpgradeable for address;\n\n    struct RoleData {\n        EnumerableSetUpgradeable.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC20Burnable_init_unchained();\n    }\n\n    function __ERC20Burnable_init_unchained() internal initializer {\n    }\n    using SafeMathUpgradeable for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ERC20Upgradeable.sol\";\nimport \"../../utils/PausableUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n    function __ERC20Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20Pausable_init_unchained();\n    }\n\n    function __ERC20Pausable_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/test/TestUniswapV3Broker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/libraries/Path.sol\";\r\nimport \"../lib/UniswapV3Broker.sol\";\r\nimport \"../interface/IERC20Metadata.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/libraries/PositionKey.sol\";\r\n\r\ncontract TestUniswapV3Broker is IUniswapV3MintCallback, IUniswapV3SwapCallback, Initializable {\r\n    using Path for bytes;\r\n\r\n    address private _factory;\r\n\r\n    function initialize(address factory) external initializer {\r\n        _factory = factory;\r\n    }\r\n\r\n    /// @inheritdoc IUniswapV3MintCallback\r\n    function uniswapV3MintCallback(\r\n        uint256 amount0Owed,\r\n        uint256 amount1Owed,\r\n        bytes calldata\r\n    ) external override {\r\n        // address baseToken = abi.decode(data, (address));\r\n        // address pool = _poolMap[baseToken];\r\n        // no data structure here; thus comment out\r\n        address pool = msg.sender;\r\n        // CH_FMV: failed mintCallback verification\r\n        require(msg.sender == pool, \"CH_FMV\");\r\n\r\n        if (amount0Owed > 0) {\r\n            IERC20Metadata(IUniswapV3Pool(pool).token0()).transfer(msg.sender, amount0Owed);\r\n        }\r\n        if (amount1Owed > 0) {\r\n            IERC20Metadata(IUniswapV3Pool(pool).token1()).transfer(msg.sender, amount1Owed);\r\n        }\r\n    }\r\n\r\n    struct SwapCallbackData {\r\n        bytes path;\r\n        address payer;\r\n    }\r\n\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata\r\n    ) external override {\r\n        // swaps entirely within 0-liquidity regions are not supported -> 0 swap is forbidden\r\n        // CH_ZIs: forbidden 0 swap\r\n        require(amount0Delta > 0 || amount1Delta > 0, \"CH_F0S\");\r\n\r\n        // address baseToken = abi.decode(data, (address));\r\n        // address pool = _poolMap[baseToken];\r\n        // no data structure here; thus comment out\r\n        IUniswapV3Pool pool = IUniswapV3Pool(msg.sender);\r\n        // CH_FSV: failed swapCallback verification\r\n        require(msg.sender == address(pool), \"CH_FSV\");\r\n\r\n        // amount0Delta & amount1Delta are guaranteed to be positive when being the amount to be paid\r\n        (address token, uint256 amountToPay) =\r\n            amount0Delta > 0 ? (pool.token0(), uint256(amount0Delta)) : (pool.token1(), uint256(amount1Delta));\r\n        IERC20Metadata(token).transfer(msg.sender, amountToPay);\r\n    }\r\n\r\n    function addLiquidity(UniswapV3Broker.AddLiquidityParams calldata params)\r\n        external\r\n        returns (UniswapV3Broker.AddLiquidityResponse memory response)\r\n    {\r\n        return UniswapV3Broker.addLiquidity(params);\r\n    }\r\n\r\n    function removeLiquidity(UniswapV3Broker.RemoveLiquidityParams calldata params)\r\n        external\r\n        returns (UniswapV3Broker.RemoveLiquidityResponse memory response)\r\n    {\r\n        return UniswapV3Broker.removeLiquidity(params);\r\n    }\r\n\r\n    function swap(UniswapV3Broker.SwapParams calldata params)\r\n        public\r\n        returns (UniswapV3Broker.SwapResponse memory response)\r\n    {\r\n        return UniswapV3Broker.swap(params);\r\n    }\r\n\r\n    function getPositionKey(int24 lowerTick, int24 upperTick) external view returns (bytes32) {\r\n        return PositionKey.compute(address(this), lowerTick, upperTick);\r\n    }\r\n}\r\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/CallbackValidation.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.7.6;\n\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\nimport './PoolAddress.sol';\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The V3 pool contract address\n    function verifyCallback(\n        address factory,\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal view returns (IUniswapV3Pool pool) {\n        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n    }\n\n    /// @notice Returns the address of a valid Uniswap V3 Pool\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param poolKey The identifying key of the V3 pool\n    /// @return pool The V3 pool contract address\n    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\n        internal\n        view\n        returns (IUniswapV3Pool pool)\n    {\n        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n        require(msg.sender == address(pool));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/Path.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport './BytesLib.sol';\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/PositionKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nlibrary PositionKey {\n    /// @dev Returns the key of the position in the core library\n    function compute(\n        address owner,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.5.0 <0.8.0;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
    },
    "contracts/MarketRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { IERC20Metadata } from \"./interface/IERC20Metadata.sol\";\r\nimport { ClearingHouseCallee } from \"./base/ClearingHouseCallee.sol\";\r\nimport { UniswapV3Broker } from \"./lib/UniswapV3Broker.sol\";\r\nimport { IVirtualToken } from \"./interface/IVirtualToken.sol\";\r\nimport { MarketRegistryStorageV1 } from \"./storage/MarketRegistryStorage.sol\";\r\nimport { IMarketRegistry } from \"./interface/IMarketRegistry.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract MarketRegistry is IMarketRegistry, ClearingHouseCallee, MarketRegistryStorageV1 {\r\n    using AddressUpgradeable for address;\r\n\r\n    //\r\n    // MODIFIER\r\n    //\r\n\r\n    modifier checkRatio(uint24 ratio) {\r\n        // ratio overflow\r\n        require(ratio <= 1e6, \"MR_RO\");\r\n        _;\r\n    }\r\n\r\n    modifier checkPool(address baseToken) {\r\n        // pool not exists\r\n        require(_poolMap[baseToken] != address(0), \"MR_PNE\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize(address uniswapV3FactoryArg, address quoteTokenArg) external initializer {\r\n        __ClearingHouseCallee_init();\r\n\r\n        // UnsiwapV3Factory is not contract\r\n        require(uniswapV3FactoryArg.isContract(), \"MR_UFNC\");\r\n        // QuoteToken is not contract\r\n        require(quoteTokenArg.isContract(), \"MR_QTNC\");\r\n\r\n        // update states\r\n        _uniswapV3Factory = uniswapV3FactoryArg;\r\n        _quoteToken = quoteTokenArg;\r\n        _maxOrdersPerMarket = type(uint8).max;\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function addPool(address baseToken, uint24 feeRatio) external override onlyOwner returns (address) {\r\n        // existent pool\r\n        require(_poolMap[baseToken] == address(0), \"MR_EP\");\r\n        // baseToken decimals is not 18\r\n        require(IERC20Metadata(baseToken).decimals() == 18, \"MR_BDN18\");\r\n        // clearingHouse base token balance not enough\r\n        require(IERC20Metadata(baseToken).balanceOf(_clearingHouse) == type(uint256).max, \"MR_CHBNE\");\r\n\r\n        // quote token total supply not enough\r\n        require(IERC20Metadata(_quoteToken).totalSupply() == type(uint256).max, \"MR_QTSNE\");\r\n\r\n        // to ensure the base is always token0 and quote is always token1\r\n        // invalid baseToken\r\n        require(baseToken < _quoteToken, \"MR_IB\");\r\n\r\n        address pool = UniswapV3Broker.getPool(_uniswapV3Factory, _quoteToken, baseToken, feeRatio);\r\n        // non-existent pool in uniswapV3 factory\r\n        require(pool != address(0), \"MR_NEP\");\r\n\r\n        (uint256 sqrtPriceX96, , , , , , ) = UniswapV3Broker.getSlot0(pool);\r\n        // pool not (yet) initialized\r\n        require(sqrtPriceX96 != 0, \"MR_PNI\");\r\n\r\n        // clearingHouse not in baseToken whitelist\r\n        require(IVirtualToken(baseToken).isInWhitelist(_clearingHouse), \"MR_CNBWL\");\r\n        // pool not in baseToken whitelist\r\n        require(IVirtualToken(baseToken).isInWhitelist(pool), \"MR_PNBWL\");\r\n\r\n        // clearingHouse not in quoteToken whitelist\r\n        require(IVirtualToken(_quoteToken).isInWhitelist(_clearingHouse), \"MR_CHNQWL\");\r\n        // pool not in quoteToken whitelist\r\n        require(IVirtualToken(_quoteToken).isInWhitelist(pool), \"MR_PNQWL\");\r\n\r\n        _poolMap[baseToken] = pool;\r\n        _uniswapFeeRatioMap[baseToken] = feeRatio;\r\n        _exchangeFeeRatioMap[baseToken] = feeRatio;\r\n\r\n        emit PoolAdded(baseToken, feeRatio, pool);\r\n        return pool;\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function setFeeRatio(address baseToken, uint24 feeRatio)\r\n        external\r\n        override\r\n        checkPool(baseToken)\r\n        checkRatio(feeRatio)\r\n        onlyOwner\r\n    {\r\n        _exchangeFeeRatioMap[baseToken] = feeRatio;\r\n        emit FeeRatioChanged(baseToken, feeRatio);\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function setInsuranceFundFeeRatio(address baseToken, uint24 insuranceFundFeeRatioArg)\r\n        external\r\n        override\r\n        checkPool(baseToken)\r\n        checkRatio(insuranceFundFeeRatioArg)\r\n        onlyOwner\r\n    {\r\n        _insuranceFundFeeRatioMap[baseToken] = insuranceFundFeeRatioArg;\r\n        emit InsuranceFundFeeRatioChanged(baseToken, insuranceFundFeeRatioArg);\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function setMaxOrdersPerMarket(uint8 maxOrdersPerMarketArg) external override onlyOwner {\r\n        _maxOrdersPerMarket = maxOrdersPerMarketArg;\r\n        emit MaxOrdersPerMarketChanged(maxOrdersPerMarketArg);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function getQuoteToken() external view override returns (address) {\r\n        return _quoteToken;\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function getUniswapV3Factory() external view override returns (address) {\r\n        return _uniswapV3Factory;\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function getMaxOrdersPerMarket() external view override returns (uint8) {\r\n        return _maxOrdersPerMarket;\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function getPool(address baseToken) external view override checkPool(baseToken) returns (address) {\r\n        return _poolMap[baseToken];\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function getFeeRatio(address baseToken) external view override checkPool(baseToken) returns (uint24) {\r\n        return _exchangeFeeRatioMap[baseToken];\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function getInsuranceFundFeeRatio(address baseToken) external view override checkPool(baseToken) returns (uint24) {\r\n        return _insuranceFundFeeRatioMap[baseToken];\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function getMarketInfo(address baseToken) external view override checkPool(baseToken) returns (MarketInfo memory) {\r\n        return\r\n            MarketInfo({\r\n                pool: _poolMap[baseToken],\r\n                exchangeFeeRatio: _exchangeFeeRatioMap[baseToken],\r\n                uniswapFeeRatio: _uniswapFeeRatioMap[baseToken],\r\n                insuranceFundFeeRatio: _insuranceFundFeeRatioMap[baseToken]\r\n            });\r\n    }\r\n\r\n    /// @inheritdoc IMarketRegistry\r\n    function hasPool(address baseToken) external view override returns (bool) {\r\n        return _poolMap[baseToken] != address(0);\r\n    }\r\n}\r\n"
    },
    "contracts/interface/IVirtualToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\ninterface IVirtualToken {\r\n    function isInWhitelist(address account) external view returns (bool);\r\n}\r\n"
    },
    "contracts/storage/MarketRegistryStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\n/// @notice For future upgrades, do not change MarketRegistryStorageV1. Create a new\r\n/// contract which implements MarketRegistryStorageV1 and following the naming convention\r\n/// MarketRegistryStorageVX.\r\nabstract contract MarketRegistryStorageV1 {\r\n    address internal _uniswapV3Factory;\r\n    address internal _quoteToken;\r\n\r\n    uint8 internal _maxOrdersPerMarket;\r\n\r\n    // key: baseToken, value: pool\r\n    mapping(address => address) internal _poolMap;\r\n\r\n    // key: baseToken, what insurance fund get = exchangeFee * insuranceFundFeeRatio\r\n    mapping(address => uint24) internal _insuranceFundFeeRatioMap;\r\n\r\n    // key: baseToken , uniswap fee will be ignored and use the exchangeFeeRatio instead\r\n    mapping(address => uint24) internal _exchangeFeeRatioMap;\r\n\r\n    // key: baseToken, _uniswapFeeRatioMap cache only\r\n    mapping(address => uint24) internal _uniswapFeeRatioMap;\r\n}\r\n"
    },
    "contracts/test/TestPerpMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { PerpMath } from \"../lib/PerpMath.sol\";\r\n\r\ncontract TestPerpMath {\r\n    using PerpMath for uint160;\r\n    using PerpMath for uint256;\r\n    using PerpMath for int256;\r\n\r\n    function testFormatSqrtPriceX96ToPriceX96(uint160 value) external pure returns (uint256) {\r\n        return value.formatSqrtPriceX96ToPriceX96();\r\n    }\r\n\r\n    function testFormatX10_18ToX96(uint256 value) external pure returns (uint256) {\r\n        return value.formatX10_18ToX96();\r\n    }\r\n\r\n    function testFormatX96ToX10_18(uint256 value) external pure returns (uint256) {\r\n        return value.formatX96ToX10_18();\r\n    }\r\n\r\n    function testMax(int256 a, int256 b) external pure returns (int256) {\r\n        return PerpMath.max(a, b);\r\n    }\r\n\r\n    function testMin(int256 a, int256 b) external pure returns (int256) {\r\n        return PerpMath.min(a, b);\r\n    }\r\n\r\n    function testAbs(int256 value) external pure returns (uint256) {\r\n        return value.abs();\r\n    }\r\n\r\n    function testDivBy10_18(int256 value) external pure returns (int256) {\r\n        return value.divBy10_18();\r\n    }\r\n\r\n    function testDivBy10_18(uint256 value) external pure returns (uint256) {\r\n        return value.divBy10_18();\r\n    }\r\n\r\n    function testMulRatio(uint256 value, uint24 ratio) external pure returns (uint256) {\r\n        return value.mulRatio(ratio);\r\n    }\r\n\r\n    function testMulRatio(int256 value, uint24 ratio) external pure returns (int256) {\r\n        return value.mulRatio(ratio);\r\n    }\r\n}\r\n"
    },
    "contracts/InsuranceFund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { AddressUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\r\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport { SafeERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\r\nimport { InsuranceFundStorageV1 } from \"./storage/InsuranceFundStorage.sol\";\r\nimport { OwnerPausable } from \"./base/OwnerPausable.sol\";\r\nimport { IInsuranceFund } from \"./interface/IInsuranceFund.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract InsuranceFund is IInsuranceFund, ReentrancyGuardUpgradeable, OwnerPausable, InsuranceFundStorageV1 {\r\n    using AddressUpgradeable for address;\r\n\r\n    event Borrowed(address borrower, uint256 amount);\r\n\r\n    function initialize(address tokenArg) external initializer {\r\n        // token address is not contract\r\n        require(tokenArg.isContract(), \"IF_TNC\");\r\n\r\n        __ReentrancyGuard_init();\r\n        __OwnerPausable_init();\r\n\r\n        _token = tokenArg;\r\n    }\r\n\r\n    function setBorrower(address borrowerArg) external onlyOwner {\r\n        // borrower is not a contract\r\n        require(borrowerArg.isContract(), \"IF_BNC\");\r\n        _borrower = borrowerArg;\r\n        emit BorrowerChanged(borrowerArg);\r\n    }\r\n\r\n    /// @inheritdoc IInsuranceFund\r\n    function borrow(uint256 amount) external override nonReentrant whenNotPaused {\r\n        // IF_OB: only borrower\r\n        require(_msgSender() == _borrower, \"IF_OB\");\r\n        // IF_NEB: not enough balance\r\n        require(IERC20Upgradeable(_token).balanceOf(address(this)) >= amount, \"IF_NEB\");\r\n\r\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_token), _borrower, amount);\r\n\r\n        emit Borrowed(_borrower, amount);\r\n    }\r\n\r\n    /// @inheritdoc IInsuranceFund\r\n    function getToken() external view override returns (address) {\r\n        return _token;\r\n    }\r\n\r\n    /// @inheritdoc IInsuranceFund\r\n    function getBorrower() external view override returns (address) {\r\n        return _borrower;\r\n    }\r\n}\r\n"
    },
    "contracts/storage/InsuranceFundStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\n/// @notice For future upgrades, do not change InsuranceFundStorageV1. Create a new\r\n/// contract which implements InsuranceFundStorageV1 and following the naming convention\r\n/// InsuranceFundStorageVX.\r\nabstract contract InsuranceFundStorageV1 {\r\n    // --------- IMMUTABLE ---------\r\n\r\n    address internal _token;\r\n\r\n    // --------- ^^^^^^^^^ ---------\r\n\r\n    address internal _borrower;\r\n}\r\n"
    },
    "contracts/VirtualToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { ERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport { SafeOwnable } from \"./base/SafeOwnable.sol\";\r\nimport { IVirtualToken } from \"./interface/IVirtualToken.sol\";\r\n\r\ncontract VirtualToken is IVirtualToken, SafeOwnable, ERC20Upgradeable {\r\n    mapping(address => bool) internal _whitelistMap;\r\n\r\n    // __gap is reserved storage\r\n    uint256[50] private __gap;\r\n\r\n    event WhitelistAdded(address account);\r\n    event WhitelistRemoved(address account);\r\n\r\n    function __VirtualToken_init(string memory nameArg, string memory symbolArg) internal initializer {\r\n        __SafeOwnable_init();\r\n        __ERC20_init(nameArg, symbolArg);\r\n    }\r\n\r\n    function mintMaximumTo(address recipient) external onlyOwner {\r\n        _mint(recipient, type(uint256).max);\r\n    }\r\n\r\n    function addWhitelist(address account) external onlyOwner {\r\n        _whitelistMap[account] = true;\r\n        emit WhitelistAdded(account);\r\n    }\r\n\r\n    function removeWhitelist(address account) external onlyOwner {\r\n        // VT_BNZ: balance is not zero\r\n        require(balanceOf(account) == 0, \"VT_BNZ\");\r\n        delete _whitelistMap[account];\r\n        emit WhitelistRemoved(account);\r\n    }\r\n\r\n    /// @inheritdoc IVirtualToken\r\n    function isInWhitelist(address account) external view override returns (bool) {\r\n        return _whitelistMap[account];\r\n    }\r\n\r\n    /// @inheritdoc ERC20Upgradeable\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        // `from` == address(0) when mint()\r\n        if (from != address(0)) {\r\n            // not whitelisted\r\n            require(_whitelistMap[from], \"VT_NW\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/QuoteToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\nimport { VirtualToken } from \"./VirtualToken.sol\";\r\n\r\ncontract QuoteToken is VirtualToken {\r\n    function initialize(string memory nameArg, string memory symbolArg) external initializer {\r\n        __VirtualToken_init(nameArg, symbolArg);\r\n    }\r\n}\r\n"
    },
    "contracts/BaseToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { SafeMathUpgradeable } from \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\r\nimport { IPriceFeedV2 } from \"@perp/perp-oracle-contract/contracts/interface/IPriceFeedV2.sol\";\r\nimport { IIndexPrice } from \"./interface/IIndexPrice.sol\";\r\nimport { VirtualToken } from \"./VirtualToken.sol\";\r\nimport { BaseTokenStorageV2 } from \"./storage/BaseTokenStorage.sol\";\r\nimport { IBaseToken } from \"./interface/IBaseToken.sol\";\r\nimport { BlockContext } from \"./base/BlockContext.sol\";\r\n\r\n// never inherit any new stateful contract. never change the orders of parent stateful contracts\r\ncontract BaseToken is IBaseToken, IIndexPrice, VirtualToken, BlockContext, BaseTokenStorageV2 {\r\n    using SafeMathUpgradeable for uint256;\r\n    using SafeMathUpgradeable for uint8;\r\n\r\n    //\r\n    // CONSTANT\r\n    //\r\n\r\n    uint256 internal constant _TWAP_INTERVAL_FOR_PAUSE = 15 * 60; // 15 minutes\r\n    uint256 internal constant _MAX_WAITING_PERIOD = 5 days;\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize(\r\n        string memory nameArg,\r\n        string memory symbolArg,\r\n        address priceFeedArg\r\n    ) external initializer {\r\n        __VirtualToken_init(nameArg, symbolArg);\r\n\r\n        uint8 priceFeedDecimals = IPriceFeedV2(priceFeedArg).decimals();\r\n\r\n        // invalid price feed decimals\r\n        require(priceFeedDecimals <= decimals(), \"BT_IPFD\");\r\n\r\n        _priceFeed = priceFeedArg;\r\n        _priceFeedDecimals = priceFeedDecimals;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        // BT_NO: Not open\r\n        require(_status == IBaseToken.Status.Open, \"BT_NO\");\r\n        _pausedIndexPrice = getIndexPrice(_TWAP_INTERVAL_FOR_PAUSE);\r\n        _status = IBaseToken.Status.Paused;\r\n        _pausedTimestamp = _blockTimestamp();\r\n        emit StatusUpdated(_status);\r\n    }\r\n\r\n    function close(uint256 closedPrice) external onlyOwner {\r\n        // BT_NP: Not paused\r\n        require(_status == IBaseToken.Status.Paused, \"BT_NP\");\r\n        _close(closedPrice);\r\n    }\r\n\r\n    function close() external override {\r\n        // BT_NP: Not paused\r\n        require(_status == IBaseToken.Status.Paused, \"BT_NP\");\r\n        // BT_WPNE: Waiting period not expired\r\n        require(_blockTimestamp() > _pausedTimestamp + _MAX_WAITING_PERIOD, \"BT_WPNE\");\r\n        _close(_pausedIndexPrice);\r\n    }\r\n\r\n    function setPriceFeed(address priceFeedArg) external onlyOwner {\r\n        // ChainlinkPriceFeed uses 8 decimals\r\n        // BandPriceFeed uses 18 decimals\r\n        uint8 priceFeedDecimals = IPriceFeedV2(priceFeedArg).decimals();\r\n        // BT_IPFD: Invalid price feed decimals\r\n        require(priceFeedDecimals <= decimals(), \"BT_IPFD\");\r\n\r\n        _priceFeed = priceFeedArg;\r\n        _priceFeedDecimals = priceFeedDecimals;\r\n\r\n        emit PriceFeedChanged(_priceFeed);\r\n    }\r\n\r\n    function cacheTwap(uint256 interval) external override {\r\n        IPriceFeedV2(_priceFeed).cacheTwap(interval);\r\n    }\r\n\r\n    //\r\n    // INTERNAL NON-VIEW\r\n    //\r\n\r\n    function _close(uint256 closedPrice) internal {\r\n        _status = IBaseToken.Status.Closed;\r\n        _closedPrice = closedPrice;\r\n        emit StatusUpdated(_status);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IBaseToken\r\n    function getPriceFeed() external view override returns (address) {\r\n        return _priceFeed;\r\n    }\r\n\r\n    function isOpen() external view override returns (bool) {\r\n        return _status == IBaseToken.Status.Open;\r\n    }\r\n\r\n    function isPaused() external view override returns (bool) {\r\n        return _status == IBaseToken.Status.Paused;\r\n    }\r\n\r\n    function isClosed() external view override returns (bool) {\r\n        return _status == IBaseToken.Status.Closed;\r\n    }\r\n\r\n    function getPausedTimestamp() external view override returns (uint256) {\r\n        return _pausedTimestamp;\r\n    }\r\n\r\n    function getPausedIndexPrice() external view override returns (uint256) {\r\n        return _pausedIndexPrice;\r\n    }\r\n\r\n    /// @inheritdoc IBaseToken\r\n    function getClosedPrice() external view override returns (uint256) {\r\n        // not closed\r\n        require(_status == IBaseToken.Status.Closed, \"BT_NC\");\r\n        return _closedPrice;\r\n    }\r\n\r\n    //\r\n    // PUBLIC VIEW\r\n    //\r\n\r\n    /// @inheritdoc IIndexPrice\r\n    /// @dev we overwrite the index price in BaseToken depending on the status\r\n    ///      1. Open: the price is from the price feed\r\n    ///      2. Paused or Closed: the price is twap when the token was paused\r\n    function getIndexPrice(uint256 interval) public view override returns (uint256) {\r\n        if (_status == IBaseToken.Status.Open) {\r\n            return _formatDecimals(IPriceFeedV2(_priceFeed).getPrice(interval));\r\n        }\r\n\r\n        return _pausedIndexPrice;\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    function _formatDecimals(uint256 _price) internal view returns (uint256) {\r\n        return _price.mul(10**(decimals().sub(_priceFeedDecimals)));\r\n    }\r\n}\r\n"
    },
    "@perp/perp-oracle-contract/contracts/interface/IPriceFeedV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\n\nimport \"./IPriceFeed.sol\";\n\ninterface IPriceFeedV2 is IPriceFeed {\n    /// @dev Returns the cached index price of the token.\n    /// @param interval The interval represents twap interval.\n    function cacheTwap(uint256 interval) external returns (uint256);\n}\n"
    },
    "contracts/storage/BaseTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { IBaseToken } from \"../interface/IBaseToken.sol\";\r\n\r\n/// @notice For future upgrades, do not change BaseTokenStorageV1. Create a new\r\n/// contract which implements BaseTokenStorageV1 and following the naming convention\r\n/// BaseTokenStorageVX.\r\nabstract contract BaseTokenStorageV1 {\r\n    // --------- IMMUTABLE ---------\r\n\r\n    uint8 internal _priceFeedDecimals;\r\n\r\n    // --------- ^^^^^^^^^ ---------\r\n\r\n    address internal _priceFeed;\r\n}\r\n\r\nabstract contract BaseTokenStorageV2 is BaseTokenStorageV1 {\r\n    IBaseToken.Status internal _status;\r\n\r\n    uint256 internal _pausedIndexPrice;\r\n\r\n    uint256 internal _pausedTimestamp;\r\n\r\n    uint256 internal _closedPrice;\r\n}\r\n"
    },
    "contracts/DelegateApproval.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { IDelegateApproval } from \"./interface/IDelegateApproval.sol\";\r\nimport { BlockContext } from \"./base/BlockContext.sol\";\r\nimport { SafeOwnable } from \"./base/SafeOwnable.sol\";\r\nimport { DelegateApprovalStorageV1 } from \"./storage/DelegateApprovalStorage.sol\";\r\n\r\ncontract DelegateApproval is IDelegateApproval, BlockContext, SafeOwnable, DelegateApprovalStorageV1 {\r\n    //\r\n    // CONSTANTS\r\n    //\r\n\r\n    /// @dev remember to update checkActions() if we add new actions\r\n    ///      the rule for action constants is `<<`, 2^n, n starts from 0\r\n    ///      so actions will be 1, 2, 4, 8, 16, 32, 64, 128\r\n    uint8 internal constant _CLEARINGHOUSE_OPENPOSITION = 1; // 00000001\r\n    uint8 internal constant _CLEARINGHOUSE_ADDLIQUIDITY = 2; // 00000010, not used for now\r\n    uint8 internal constant _CLEARINGHOUSE_REMOVELIQUIDITY = 4; // 00000100, not used for now\r\n\r\n    //\r\n    // MODIFIER\r\n    //\r\n\r\n    /// @dev prevent user from approving/revoking non-existed actions\r\n    ///      we only have 3 actions now, so actions cannot be greater than 7 (00000111)\r\n    modifier checkActions(uint8 actions) {\r\n        // DA_IA: Invalid Actions\r\n        require(actions > 0 && actions <= 7, \"DA_IA\");\r\n        _;\r\n    }\r\n\r\n    //\r\n    // EXTERNAL NON-VIEW\r\n    //\r\n\r\n    function initialize() external initializer {\r\n        __SafeOwnable_init();\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function approve(address delegate, uint8 actions) external override checkActions(actions) {\r\n        address trader = _msgSender();\r\n        bytes32 key = _getApprovalKey(trader, delegate);\r\n\r\n        // Examples:\r\n        // oldApprovedActions: 001\r\n        // actions: 010\r\n        // newApprovedActions: 011\r\n\r\n        // oldApprovedActions: 010\r\n        // actions: 110\r\n        // newApprovedActions: 110\r\n\r\n        // oldApprovedActions: 010\r\n        // actions: 100\r\n        // newApprovedActions: 110\r\n        _approvalMap[key] = _approvalMap[key] | actions;\r\n\r\n        emit DelegationApproved(trader, delegate, actions);\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function revoke(address delegate, uint8 actions) external override checkActions(actions) {\r\n        address trader = _msgSender();\r\n        bytes32 key = _getApprovalKey(trader, delegate);\r\n\r\n        // oldApprovedActions: 010\r\n        // actions: 010\r\n        // newApprovedActions: 000\r\n\r\n        // oldApprovedActions: 010\r\n        // actions: 110\r\n        // newApprovedActions: 000\r\n\r\n        // oldApprovedActions: 010\r\n        // actions: 100\r\n        // newApprovedActions: 010\r\n        _approvalMap[key] = _approvalMap[key] & (~actions);\r\n\r\n        emit DelegationRevoked(trader, delegate, actions);\r\n    }\r\n\r\n    //\r\n    // EXTERNAL VIEW\r\n    //\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function getClearingHouseOpenPositionAction() external pure override returns (uint8) {\r\n        return _CLEARINGHOUSE_OPENPOSITION;\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function getClearingHouseAddLiquidityAction() external pure override returns (uint8) {\r\n        return _CLEARINGHOUSE_ADDLIQUIDITY;\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function getClearingHouseRemoveLiquidityAction() external pure override returns (uint8) {\r\n        return _CLEARINGHOUSE_REMOVELIQUIDITY;\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function getApprovedActions(address trader, address delegate) external view override returns (uint8) {\r\n        bytes32 key = _getApprovalKey(trader, delegate);\r\n        return _approvalMap[key];\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function hasApprovalFor(\r\n        address trader,\r\n        address delegate,\r\n        uint8 actions\r\n    ) external view override checkActions(actions) returns (bool) {\r\n        return _hasApprovalFor(trader, delegate, actions);\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function canOpenPositionFor(address trader, address delegate) external view override returns (bool) {\r\n        return _hasApprovalFor(trader, delegate, _CLEARINGHOUSE_OPENPOSITION);\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function canAddLiquidityFor(address trader, address delegate) external view override returns (bool) {\r\n        return _hasApprovalFor(trader, delegate, _CLEARINGHOUSE_ADDLIQUIDITY);\r\n    }\r\n\r\n    /// @inheritdoc IDelegateApproval\r\n    function canRemoveLiquidityFor(address trader, address delegate) external view override returns (bool) {\r\n        return _hasApprovalFor(trader, delegate, _CLEARINGHOUSE_REMOVELIQUIDITY);\r\n    }\r\n\r\n    //\r\n    // INTERNAL VIEW\r\n    //\r\n\r\n    function _getApprovalKey(address trader, address delegate) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(trader, delegate));\r\n    }\r\n\r\n    function _hasApprovalFor(\r\n        address trader,\r\n        address delegate,\r\n        uint8 actions\r\n    ) internal view checkActions(actions) returns (bool) {\r\n        bytes32 key = _getApprovalKey(trader, delegate);\r\n\r\n        // approvedActions: 010\r\n        // actions: 110\r\n        // 010 & 110 = 010 != 110 => false\r\n\r\n        // approvedActions: 000\r\n        // actions: 010\r\n        // 000 & 010 = 000 != 010 => false\r\n\r\n        // approvedActions: 110\r\n        // actions: 110\r\n        // 110 & 110 = 110 == 110 => true\r\n        return (_approvalMap[key] & actions) == actions;\r\n    }\r\n}\r\n"
    },
    "contracts/storage/DelegateApprovalStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\n/// @notice For future upgrades, do not change DelegateApprovalStorageV1. Create a new\r\n/// contract which implements DelegateApprovalStorageV1 and following the naming convention\r\n/// DelegateApprovalStorageVX.\r\nabstract contract DelegateApprovalStorageV1 {\r\n    // key: the hash of `trader` and `delegate`, see _getApprovalKey()\r\n    // value: the bit value of approved actions\r\n    mapping(bytes32 => uint8) internal _approvalMap;\r\n}\r\n"
    },
    "@perp/perp-oracle-contract/contracts/EmergencyPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { IUniswapV3Pool } from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport { FixedPoint96 } from \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\";\nimport { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\nimport { TickMath } from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\nimport { IPriceFeedV2 } from \"./interface/IPriceFeedV2.sol\";\nimport { BlockContext } from \"./base/BlockContext.sol\";\n\ncontract EmergencyPriceFeed is IPriceFeedV2, BlockContext {\n    using Address for address;\n\n    //\n    // STATE\n    //\n\n    address public pool;\n\n    //\n    // EXTERNAL NON-VIEW\n    //\n\n    constructor(address poolArg) {\n        // EPF_EANC: pool address is not contract\n        require(address(poolArg).isContract(), \"EPF_EANC\");\n\n        pool = poolArg;\n    }\n\n    function cacheTwap(uint256 interval) external override returns (uint256) {}\n\n    //\n    // EXTERNAL VIEW\n    //\n\n    function getPrice(uint256 interval) external view override returns (uint256) {\n        uint256 markTwapX96 = _formatSqrtPriceX96ToPriceX96(_getSqrtMarkTwapX96(_toUint32(interval)));\n        return _formatX96ToX10_18(markTwapX96);\n    }\n\n    //\n    // EXTERNAL PURE\n    //\n\n    function decimals() external pure override returns (uint8) {\n        return 18;\n    }\n\n    /// @dev if twapInterval < 10 (should be less than 1 block), return mark price without twap directly,\n    ///      as twapInterval is too short and makes getting twap over such a short period meaningless\n    function _getSqrtMarkTwapX96(uint32 twapInterval) internal view returns (uint160) {\n        // return the current price as twapInterval is too short/ meaningless\n        if (twapInterval < 10) {\n            (uint160 sqrtMarkPrice, , , , , , ) = IUniswapV3Pool(pool).slot0();\n            return sqrtMarkPrice;\n        }\n        uint32[] memory secondsAgos = new uint32[](2);\n\n        // solhint-disable-next-line not-rely-on-time\n        secondsAgos[0] = twapInterval;\n        secondsAgos[1] = 0;\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(pool).observe(secondsAgos);\n\n        // tick(imprecise as it's an integer) to price\n        return TickMath.getSqrtRatioAtTick(int24((tickCumulatives[1] - tickCumulatives[0]) / twapInterval));\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function _toUint32(uint256 value) internal pure returns (uint32 returnValue) {\n        require(((returnValue = uint32(value)) == value), \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    function _formatSqrtPriceX96ToPriceX96(uint160 sqrtPriceX96) internal pure returns (uint256) {\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96);\n    }\n\n    function _formatX96ToX10_18(uint256 valueX96) internal pure returns (uint256) {\n        return FullMath.mulDiv(valueX96, 1e18, FixedPoint96.Q96);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@perp/perp-oracle-contract/contracts/base/BlockContext.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\n\nabstract contract BlockContext {\n    function _blockTimestamp() internal view virtual returns (uint256) {\n        // Reply from Arbitrum\n        // block.timestamp returns timestamp at the time at which the sequencer receives the tx.\n        // It may not actually correspond to a particular L1 block\n        return block.timestamp;\n    }\n\n    function _blockNumber() internal view virtual returns (uint256) {\n        return block.number;\n    }\n}\n"
    },
    "@perp/perp-oracle-contract/contracts/ChainlinkPriceFeedV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport { IChainlinkPriceFeed } from \"./interface/IChainlinkPriceFeed.sol\";\nimport { IPriceFeedV2 } from \"./interface/IPriceFeedV2.sol\";\nimport { BlockContext } from \"./base/BlockContext.sol\";\nimport { CachedTwap } from \"./twap/CachedTwap.sol\";\n\ncontract ChainlinkPriceFeedV2 is IChainlinkPriceFeed, IPriceFeedV2, BlockContext, CachedTwap {\n    using Address for address;\n\n    AggregatorV3Interface private immutable _aggregator;\n\n    constructor(AggregatorV3Interface aggregator, uint80 cacheTwapInterval) CachedTwap(cacheTwapInterval) {\n        // CPF_ANC: Aggregator address is not contract\n        require(address(aggregator).isContract(), \"CPF_ANC\");\n\n        _aggregator = aggregator;\n    }\n\n    /// @dev anyone can help update it.\n    function update() external {\n        (, uint256 latestPrice, uint256 latestTimestamp) = _getLatestRoundData();\n        _update(latestPrice, latestTimestamp);\n    }\n\n    function cacheTwap(uint256 interval) external override returns (uint256) {\n        (uint80 round, uint256 latestPrice, uint256 latestTimestamp) = _getLatestRoundData();\n\n        if (interval == 0 || round == 0) {\n            return latestPrice;\n        }\n        return _cacheTwap(interval, latestPrice, latestTimestamp);\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _aggregator.decimals();\n    }\n\n    function getAggregator() external view override returns (address) {\n        return address(_aggregator);\n    }\n\n    function getRoundData(uint80 roundId) external view override returns (uint256, uint256) {\n        // NOTE: aggregator will revert if roundId is invalid (but there might not be a revert message sometimes)\n        // will return (roundId, 0, 0, 0, roundId) if round is not complete (not existed yet)\n        // https://docs.chain.link/docs/historical-price-data/\n        (, int256 price, , uint256 updatedAt, ) = _aggregator.getRoundData(roundId);\n\n        // CPF_IP: Invalid Price\n        require(price > 0, \"CPF_IP\");\n\n        // CPF_RINC: Round Is Not Complete\n        require(updatedAt > 0, \"CPF_RINC\");\n\n        return (uint256(price), updatedAt);\n    }\n\n    function getPrice(uint256 interval) external view override returns (uint256) {\n        (uint80 round, uint256 latestPrice, uint256 latestTimestamp) = _getLatestRoundData();\n\n        if (interval == 0 || round == 0) {\n            return latestPrice;\n        }\n\n        return _getCachedTwap(interval, latestPrice, latestTimestamp);\n    }\n\n    function _getLatestRoundData()\n        private\n        view\n        returns (\n            uint80,\n            uint256 finalPrice,\n            uint256\n        )\n    {\n        (uint80 round, int256 latestPrice, , uint256 latestTimestamp, ) = _aggregator.latestRoundData();\n        finalPrice = uint256(latestPrice);\n        if (latestPrice < 0) {\n            _requireEnoughHistory(round);\n            (round, finalPrice, latestTimestamp) = _getRoundData(round - 1);\n        }\n        return (round, finalPrice, latestTimestamp);\n    }\n\n    function _getRoundData(uint80 _round)\n        private\n        view\n        returns (\n            uint80,\n            uint256,\n            uint256\n        )\n    {\n        (uint80 round, int256 latestPrice, , uint256 latestTimestamp, ) = _aggregator.getRoundData(_round);\n        while (latestPrice < 0) {\n            _requireEnoughHistory(round);\n            round = round - 1;\n            (, latestPrice, , latestTimestamp, ) = _aggregator.getRoundData(round);\n        }\n        return (round, uint256(latestPrice), latestTimestamp);\n    }\n\n    function _requireEnoughHistory(uint80 _round) private pure {\n        // CPF_NEH: no enough history\n        require(_round > 0, \"CPF_NEH\");\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "@perp/perp-oracle-contract/contracts/interface/IChainlinkPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\n\ninterface IChainlinkPriceFeed {\n    function getAggregator() external view returns (address);\n\n    /// @param roundId The roundId that fed into Chainlink aggregator.\n    function getRoundData(uint80 roundId) external view returns (uint256, uint256);\n}\n"
    },
    "@perp/perp-oracle-contract/contracts/twap/CachedTwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport { CumulativeTwap } from \"./CumulativeTwap.sol\";\n\nabstract contract CachedTwap is CumulativeTwap {\n    uint256 internal _cachedTwap;\n    uint160 internal _lastUpdatedAt;\n    uint80 internal _interval;\n\n    constructor(uint80 interval) {\n        _interval = interval;\n    }\n\n    function _cacheTwap(\n        uint256 interval,\n        uint256 latestPrice,\n        uint256 latestUpdatedTimestamp\n    ) internal virtual returns (uint256) {\n        // if requested interval is not the same as the one we have cached, then call _getPrice() directly\n        if (_interval != interval) {\n            return _calculateTwapPrice(interval, latestPrice, latestUpdatedTimestamp);\n        }\n\n        // if twap has been calculated in this block, then return cached value directly\n        if (_blockTimestamp() == _lastUpdatedAt) {\n            return _cachedTwap;\n        }\n\n        _update(latestPrice, latestUpdatedTimestamp);\n        _lastUpdatedAt = uint160(_blockTimestamp());\n        _cachedTwap = _calculateTwapPrice(interval, latestPrice, latestUpdatedTimestamp);\n\n        return _cachedTwap;\n    }\n\n    function _getCachedTwap(\n        uint256 interval,\n        uint256 latestPrice,\n        uint256 latestUpdatedTimestamp\n    ) internal view returns (uint256) {\n        if (_blockTimestamp() == _lastUpdatedAt && interval == _interval) {\n            return _cachedTwap;\n        }\n        return _calculateTwapPrice(interval, latestPrice, latestUpdatedTimestamp);\n    }\n}\n"
    },
    "@perp/perp-oracle-contract/contracts/twap/CumulativeTwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport { BlockContext } from \"../base/BlockContext.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract CumulativeTwap is BlockContext {\n    using SafeMath for uint256;\n\n    //\n    // STRUCT\n    //\n    struct Observation {\n        uint256 price;\n        uint256 priceCumulative;\n        uint256 timestamp;\n    }\n\n    //\n    // EVENT\n    //\n    event PriceUpdated(uint256 price, uint256 timestamp, uint8 indexAt);\n\n    //\n    // STATE\n    //\n    // let's use 15 mins and 1 hr twap as example\n    // if the price is being updated 15 secs, then needs 60 and 240 historical data for 15mins and 1hr twap.\n    Observation[256] public observations;\n\n    uint8 public currentObservationIndex;\n\n    function _update(uint256 price, uint256 lastUpdatedTimestamp) internal {\n        // for the first time update\n        if (currentObservationIndex == 0 && observations[0].timestamp == 0) {\n            observations[0] = Observation({ price: price, priceCumulative: 0, timestamp: lastUpdatedTimestamp });\n            emit PriceUpdated(price, lastUpdatedTimestamp, 0);\n            return;\n        }\n\n        // CT_IT: invalid timestamp\n        Observation memory lastObservation = observations[currentObservationIndex];\n        require(lastUpdatedTimestamp > lastObservation.timestamp, \"CT_IT\");\n\n        // overflow of currentObservationIndex is desired since currentObservationIndex is uint8 (0 - 255),\n        // so 255 + 1 will be 0\n        currentObservationIndex++;\n\n        uint256 elapsedTime = lastUpdatedTimestamp - lastObservation.timestamp;\n        observations[currentObservationIndex] = Observation({\n            priceCumulative: lastObservation.priceCumulative + (lastObservation.price * elapsedTime),\n            timestamp: lastUpdatedTimestamp,\n            price: price\n        });\n\n        emit PriceUpdated(price, lastUpdatedTimestamp, currentObservationIndex);\n    }\n\n    function _calculateTwapPrice(\n        uint256 interval,\n        uint256 latestPrice,\n        uint256 latestUpdatedTimestamp\n    ) internal view returns (uint256) {\n        Observation memory latestObservation = observations[currentObservationIndex];\n        if (latestObservation.price == 0) {\n            // CT_ND: no data\n            revert(\"CT_ND\");\n        }\n\n        uint256 currentTimestamp = _blockTimestamp();\n        uint256 targetTimestamp = currentTimestamp.sub(interval);\n        (Observation memory beforeOrAt, Observation memory atOrAfter) = _getSurroundingObservations(targetTimestamp);\n        uint256 currentCumulativePrice =\n            latestObservation.priceCumulative.add(\n                (latestObservation.price.mul(latestUpdatedTimestamp.sub(latestObservation.timestamp))).add(\n                    latestPrice.mul(currentTimestamp.sub(latestUpdatedTimestamp))\n                )\n            );\n\n        //\n        //                   beforeOrAt                    atOrAfter\n        //      ------------------+-------------+---------------+------------------\n        //                <-------|             |               |\n        // case 1       targetTimestamp         |               |------->\n        // case 2                               |              targetTimestamp\n        // case 3                          targetTimestamp\n        //\n        uint256 targetCumulativePrice;\n        // case1. not enough historical data or just enough (`==` case)\n        if (targetTimestamp <= beforeOrAt.timestamp) {\n            targetTimestamp = beforeOrAt.timestamp;\n            targetCumulativePrice = beforeOrAt.priceCumulative;\n        }\n        // case2. the latest data is older than or equal the request\n        else if (atOrAfter.timestamp <= targetTimestamp) {\n            targetTimestamp = atOrAfter.timestamp;\n            targetCumulativePrice = atOrAfter.priceCumulative;\n        }\n        // case3. in the middle\n        else {\n            uint256 observationTimeDelta = atOrAfter.timestamp - beforeOrAt.timestamp;\n            uint256 targetTimeDelta = targetTimestamp - beforeOrAt.timestamp;\n            targetCumulativePrice = beforeOrAt.priceCumulative.add(\n                ((atOrAfter.priceCumulative.sub(beforeOrAt.priceCumulative)).mul(targetTimeDelta)).div(\n                    observationTimeDelta\n                )\n            );\n        }\n\n        return currentCumulativePrice.sub(targetCumulativePrice).div(currentTimestamp - targetTimestamp);\n    }\n\n    function _getSurroundingObservations(uint256 targetTimestamp)\n        internal\n        view\n        returns (Observation memory beforeOrAt, Observation memory atOrAfter)\n    {\n        uint8 index = currentObservationIndex;\n        uint8 beforeOrAtIndex;\n        uint8 atOrAfterIndex;\n\n        // run at most 256 times\n        uint256 observationLen = observations.length;\n        uint256 i;\n        for (i = 0; i < observationLen; i++) {\n            if (observations[index].timestamp <= targetTimestamp) {\n                // if the next observation is empty, using the last one\n                // it implies the historical data is not enough\n                if (observations[index].timestamp == 0) {\n                    atOrAfterIndex = beforeOrAtIndex = index + 1;\n                    break;\n                }\n                beforeOrAtIndex = index;\n                atOrAfterIndex = beforeOrAtIndex + 1;\n                break;\n            }\n            index--;\n        }\n\n        // not enough historical data to query\n        if (i == observationLen) {\n            // CT_NEH: no enough historical data\n            revert(\"CT_NEH\");\n        }\n\n        beforeOrAt = observations[beforeOrAtIndex];\n        atOrAfter = observations[atOrAfterIndex];\n\n        // if timestamp of the right bound is earlier than timestamp of the left bound,\n        // it means the left bound is the lastest observation.\n        // It implies the latest observation is older than requested\n        // Then we set the right bound to the left bound.\n        if (atOrAfter.timestamp < beforeOrAt.timestamp) {\n            atOrAfter = beforeOrAt;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@perp/perp-oracle-contract/contracts/BandPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { BlockContext } from \"./base/BlockContext.sol\";\nimport { IPriceFeedV2 } from \"./interface/IPriceFeedV2.sol\";\nimport { IStdReference } from \"./interface/bandProtocol/IStdReference.sol\";\nimport { CachedTwap } from \"./twap/CachedTwap.sol\";\n\ncontract BandPriceFeed is IPriceFeedV2, BlockContext, CachedTwap {\n    using Address for address;\n\n    //\n    // STATE\n    //\n    string public constant QUOTE_ASSET = \"USD\";\n\n    string public baseAsset;\n    IStdReference public stdRef;\n\n    //\n    // EXTERNAL NON-VIEW\n    //\n\n    constructor(\n        IStdReference stdRefArg,\n        string memory baseAssetArg,\n        uint80 cacheTwapInterval\n    ) CachedTwap(cacheTwapInterval) {\n        // BPF_ANC: Reference address is not contract\n        require(address(stdRefArg).isContract(), \"BPF_ANC\");\n\n        stdRef = stdRefArg;\n        baseAsset = baseAssetArg;\n    }\n\n    /// @dev anyone can help update it.\n    function update() external {\n        IStdReference.ReferenceData memory bandData = _getReferenceData();\n        _update(bandData.rate, bandData.lastUpdatedBase);\n    }\n\n    function cacheTwap(uint256 interval) external override returns (uint256) {\n        IStdReference.ReferenceData memory latestBandData = _getReferenceData();\n        if (interval == 0) {\n            return latestBandData.rate;\n        }\n        return _cacheTwap(interval, latestBandData.rate, latestBandData.lastUpdatedBase);\n    }\n\n    //\n    // EXTERNAL VIEW\n    //\n\n    function getPrice(uint256 interval) public view override returns (uint256) {\n        IStdReference.ReferenceData memory latestBandData = _getReferenceData();\n        if (interval == 0) {\n            return latestBandData.rate;\n        }\n        return _getCachedTwap(interval, latestBandData.rate, latestBandData.lastUpdatedBase);\n    }\n\n    //\n    // EXTERNAL PURE\n    //\n\n    function decimals() external pure override returns (uint8) {\n        // We assume Band Protocol always has 18 decimals\n        // https://docs.bandchain.org/band-standard-dataset/using-band-dataset/using-band-dataset-evm.html\n        return 18;\n    }\n\n    //\n    // INTERNAL VIEW\n    //\n\n    function _getReferenceData() internal view returns (IStdReference.ReferenceData memory) {\n        IStdReference.ReferenceData memory bandData = stdRef.getReferenceData(baseAsset, QUOTE_ASSET);\n        // BPF_TQZ: timestamp for quote is zero\n        require(bandData.lastUpdatedQuote > 0, \"BPF_TQZ\");\n        // BPF_TBZ: timestamp for base is zero\n        require(bandData.lastUpdatedBase > 0, \"BPF_TBZ\");\n        // BPF_IP: invalid price\n        require(bandData.rate > 0, \"BPF_IP\");\n\n        return bandData;\n    }\n}\n"
    },
    "@perp/perp-oracle-contract/contracts/interface/bandProtocol/IStdReference.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\n// Copy from https://docs.bandchain.org/band-standard-dataset/using-band-dataset/using-band-dataset-evm.html\ninterface IStdReference {\n    /// A structure returned whenever someone requests for standard reference data.\n    struct ReferenceData {\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\n    }\n\n    /// Returns the price data for the given base/quote pair. Revert if not available.\n    function getReferenceData(string memory _base, string memory _quote) external view returns (ReferenceData memory);\n\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\n        external\n        view\n        returns (ReferenceData[] memory);\n}\n"
    },
    "contracts/test/TestStdReference.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { IStdReference } from \"@perp/perp-oracle-contract/contracts/interface/bandProtocol/IStdReference.sol\";\r\n\r\ncontract TestStdReference is IStdReference {\r\n    ReferenceData public refData;\r\n\r\n    constructor() {}\r\n\r\n    function getReferenceData(string memory _base, string memory _quote)\r\n        external\r\n        view\r\n        override\r\n        returns (ReferenceData memory)\r\n    {\r\n        return refData;\r\n    }\r\n\r\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\r\n        external\r\n        view\r\n        override\r\n        returns (ReferenceData[] memory)\r\n    {\r\n        revert();\r\n    }\r\n}\r\n"
    },
    "contracts/hardhat-dependency-compiler/@perp/perp-oracle-contract/contracts/BandPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@perp/perp-oracle-contract/contracts/BandPriceFeed.sol';\n"
    },
    "contracts/test/TestAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { AggregatorV3Interface } from \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract TestAggregatorV3 is AggregatorV3Interface {\r\n    function decimals() external view override returns (uint8) {\r\n        revert();\r\n    }\r\n\r\n    function description() external view override returns (string memory) {\r\n        revert();\r\n    }\r\n\r\n    function version() external view override returns (uint256) {\r\n        revert();\r\n    }\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        revert();\r\n    }\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        revert();\r\n    }\r\n}\r\n"
    },
    "contracts/hardhat-dependency-compiler/@perp/perp-oracle-contract/contracts/ChainlinkPriceFeedV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@perp/perp-oracle-contract/contracts/ChainlinkPriceFeedV2.sol';\n"
    },
    "@uniswap/v3-core/contracts/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './LowGasSafeMath.sol';\nimport './SafeCast.sol';\n\nimport './TickMath.sol';\nimport './LiquidityMath.sol';\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n    using LowGasSafeMath for int256;\n    using SafeCast for int256;\n\n    // info stored for each initialized individual tick\n    struct Info {\n        // the total position liquidity that references this tick\n        uint128 liquidityGross;\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\n        int128 liquidityNet;\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n        // the cumulative tick value on the other side of the tick\n        int56 tickCumulativeOutside;\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint160 secondsPerLiquidityOutsideX128;\n        // the seconds spent on the other side of the tick (relative to the current tick)\n        // only has relative meaning, not absolute — the value depends on when the tick is initialized\n        uint32 secondsOutside;\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n        bool initialized;\n    }\n\n    /// @notice Derives max liquidity per tick from given tick spacing\n    /// @dev Executed within the pool constructor\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @return The max liquidity per tick\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\n        int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n        int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n        return type(uint128).max / numTicks;\n    }\n\n    /// @notice Retrieves fee growth data\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @param tickCurrent The current tick\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function getFeeGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        Info storage lower = self[tickLower];\n        Info storage upper = self[tickUpper];\n\n        // calculate fee growth below\n        uint256 feeGrowthBelow0X128;\n        uint256 feeGrowthBelow1X128;\n        if (tickCurrent >= tickLower) {\n            feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\n        } else {\n            feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\n            feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\n        }\n\n        // calculate fee growth above\n        uint256 feeGrowthAbove0X128;\n        uint256 feeGrowthAbove1X128;\n        if (tickCurrent < tickUpper) {\n            feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\n        } else {\n            feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\n            feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\n        }\n\n        feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n        feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n    }\n\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param tickCurrent The current tick\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n    /// @param time The current block timestamp cast to a uint32\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n    function update(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int24 tickCurrent,\n        int128 liquidityDelta,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time,\n        bool upper,\n        uint128 maxLiquidity\n    ) internal returns (bool flipped) {\n        Tick.Info storage info = self[tick];\n\n        uint128 liquidityGrossBefore = info.liquidityGross;\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\n\n        require(liquidityGrossAfter <= maxLiquidity, 'LO');\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= tickCurrent) {\n                info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\n                info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\n                info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\n                info.tickCumulativeOutside = tickCumulative;\n                info.secondsOutside = time;\n            }\n            info.initialized = true;\n        }\n\n        info.liquidityGross = liquidityGrossAfter;\n\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n        info.liquidityNet = upper\n            ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\n            : int256(info.liquidityNet).add(liquidityDelta).toInt128();\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\n        delete self[tick];\n    }\n\n    /// @notice Transitions to next tick as needed by price movement\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The destination tick of the transition\n    /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n    /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n    /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n    /// @param time The current block.timestamp\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\n    function cross(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128,\n        uint160 secondsPerLiquidityCumulativeX128,\n        int56 tickCumulative,\n        uint32 time\n    ) internal returns (int128 liquidityNet) {\n        Tick.Info storage info = self[tick];\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\n        info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\n        info.secondsOutside = time - info.secondsOutside;\n        liquidityNet = info.liquidityNet;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './FullMath.sol';\nimport './FixedPoint128.sol';\nimport './LiquidityMath.sol';\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position\nlibrary Position {\n    // info stored for each user's position\n    struct Info {\n        // the amount of liquidity owned by this position\n        uint128 liquidity;\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        // the fees owed to the position owner in token0/token1\n        uint128 tokensOwed0;\n        uint128 tokensOwed1;\n    }\n\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\n    /// @param self The mapping containing all user positions\n    /// @param owner The address of the position owner\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return position The position info struct of the given owners' position\n    function get(\n        mapping(bytes32 => Info) storage self,\n        address owner,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal view returns (Position.Info storage position) {\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\n    }\n\n    /// @notice Credits accumulated fees to a user's position\n    /// @param self The individual position to update\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n    function update(\n        Info storage self,\n        int128 liquidityDelta,\n        uint256 feeGrowthInside0X128,\n        uint256 feeGrowthInside1X128\n    ) internal {\n        Info memory _self = self;\n\n        uint128 liquidityNext;\n        if (liquidityDelta == 0) {\n            require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions\n            liquidityNext = _self.liquidity;\n        } else {\n            liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\n        }\n\n        // calculate accumulated fees\n        uint128 tokensOwed0 =\n            uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\n                    _self.liquidity,\n                    FixedPoint128.Q128\n                )\n            );\n        uint128 tokensOwed1 =\n            uint128(\n                FullMath.mulDiv(\n                    feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\n                    _self.liquidity,\n                    FixedPoint128.Q128\n                )\n            );\n\n        // update the position\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\n            self.tokensOwed0 += tokensOwed0;\n            self.tokensOwed1 += tokensOwed1;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/UniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\nimport './interfaces/IUniswapV3Pool.sol';\n\nimport './NoDelegateCall.sol';\n\nimport './libraries/LowGasSafeMath.sol';\nimport './libraries/SafeCast.sol';\nimport './libraries/Tick.sol';\nimport './libraries/TickBitmap.sol';\nimport './libraries/Position.sol';\nimport './libraries/Oracle.sol';\n\nimport './libraries/FullMath.sol';\nimport './libraries/FixedPoint128.sol';\nimport './libraries/TransferHelper.sol';\nimport './libraries/TickMath.sol';\nimport './libraries/LiquidityMath.sol';\nimport './libraries/SqrtPriceMath.sol';\nimport './libraries/SwapMath.sol';\n\nimport './interfaces/IUniswapV3PoolDeployer.sol';\nimport './interfaces/IUniswapV3Factory.sol';\nimport './interfaces/IERC20Minimal.sol';\nimport './interfaces/callback/IUniswapV3MintCallback.sol';\nimport './interfaces/callback/IUniswapV3SwapCallback.sol';\nimport './interfaces/callback/IUniswapV3FlashCallback.sol';\n\ncontract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {\n    using LowGasSafeMath for uint256;\n    using LowGasSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Tick for mapping(int24 => Tick.Info);\n    using TickBitmap for mapping(int16 => uint256);\n    using Position for mapping(bytes32 => Position.Info);\n    using Position for Position.Info;\n    using Oracle for Oracle.Observation[65535];\n\n    /// @inheritdoc IUniswapV3PoolImmutables\n    address public immutable override factory;\n    /// @inheritdoc IUniswapV3PoolImmutables\n    address public immutable override token0;\n    /// @inheritdoc IUniswapV3PoolImmutables\n    address public immutable override token1;\n    /// @inheritdoc IUniswapV3PoolImmutables\n    uint24 public immutable override fee;\n\n    /// @inheritdoc IUniswapV3PoolImmutables\n    int24 public immutable override tickSpacing;\n\n    /// @inheritdoc IUniswapV3PoolImmutables\n    uint128 public immutable override maxLiquidityPerTick;\n\n    struct Slot0 {\n        // the current price\n        uint160 sqrtPriceX96;\n        // the current tick\n        int24 tick;\n        // the most-recently updated index of the observations array\n        uint16 observationIndex;\n        // the current maximum number of observations that are being stored\n        uint16 observationCardinality;\n        // the next maximum number of observations to store, triggered in observations.write\n        uint16 observationCardinalityNext;\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\n        // represented as an integer denominator (1/x)%\n        uint8 feeProtocol;\n        // whether the pool is locked\n        bool unlocked;\n    }\n    /// @inheritdoc IUniswapV3PoolState\n    Slot0 public override slot0;\n\n    /// @inheritdoc IUniswapV3PoolState\n    uint256 public override feeGrowthGlobal0X128;\n    /// @inheritdoc IUniswapV3PoolState\n    uint256 public override feeGrowthGlobal1X128;\n\n    // accumulated protocol fees in token0/token1 units\n    struct ProtocolFees {\n        uint128 token0;\n        uint128 token1;\n    }\n    /// @inheritdoc IUniswapV3PoolState\n    ProtocolFees public override protocolFees;\n\n    /// @inheritdoc IUniswapV3PoolState\n    uint128 public override liquidity;\n\n    /// @inheritdoc IUniswapV3PoolState\n    mapping(int24 => Tick.Info) public override ticks;\n    /// @inheritdoc IUniswapV3PoolState\n    mapping(int16 => uint256) public override tickBitmap;\n    /// @inheritdoc IUniswapV3PoolState\n    mapping(bytes32 => Position.Info) public override positions;\n    /// @inheritdoc IUniswapV3PoolState\n    Oracle.Observation[65535] public override observations;\n\n    /// @dev Mutually exclusive reentrancy protection into the pool to/from a method. This method also prevents entrance\n    /// to a function before the pool is initialized. The reentrancy guard is required throughout the contract because\n    /// we use balance checks to determine the payment status of interactions such as mint, swap and flash.\n    modifier lock() {\n        require(slot0.unlocked, 'LOK');\n        slot0.unlocked = false;\n        _;\n        slot0.unlocked = true;\n    }\n\n    /// @dev Prevents calling a function from anyone except the address returned by IUniswapV3Factory#owner()\n    modifier onlyFactoryOwner() {\n        require(msg.sender == IUniswapV3Factory(factory).owner());\n        _;\n    }\n\n    constructor() {\n        int24 _tickSpacing;\n        (factory, token0, token1, fee, _tickSpacing) = IUniswapV3PoolDeployer(msg.sender).parameters();\n        tickSpacing = _tickSpacing;\n\n        maxLiquidityPerTick = Tick.tickSpacingToMaxLiquidityPerTick(_tickSpacing);\n    }\n\n    /// @dev Common checks for valid tick inputs.\n    function checkTicks(int24 tickLower, int24 tickUpper) private pure {\n        require(tickLower < tickUpper, 'TLU');\n        require(tickLower >= TickMath.MIN_TICK, 'TLM');\n        require(tickUpper <= TickMath.MAX_TICK, 'TUM');\n    }\n\n    /// @dev Returns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.\n    function _blockTimestamp() internal view virtual returns (uint32) {\n        return uint32(block.timestamp); // truncation is desired\n    }\n\n    /// @dev Get the pool's balance of token0\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\n    /// check\n    function balance0() private view returns (uint256) {\n        (bool success, bytes memory data) =\n            token0.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\n        require(success && data.length >= 32);\n        return abi.decode(data, (uint256));\n    }\n\n    /// @dev Get the pool's balance of token1\n    /// @dev This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize\n    /// check\n    function balance1() private view returns (uint256) {\n        (bool success, bytes memory data) =\n            token1.staticcall(abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, address(this)));\n        require(success && data.length >= 32);\n        return abi.decode(data, (uint256));\n    }\n\n    /// @inheritdoc IUniswapV3PoolDerivedState\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        override\n        noDelegateCall\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        )\n    {\n        checkTicks(tickLower, tickUpper);\n\n        int56 tickCumulativeLower;\n        int56 tickCumulativeUpper;\n        uint160 secondsPerLiquidityOutsideLowerX128;\n        uint160 secondsPerLiquidityOutsideUpperX128;\n        uint32 secondsOutsideLower;\n        uint32 secondsOutsideUpper;\n\n        {\n            Tick.Info storage lower = ticks[tickLower];\n            Tick.Info storage upper = ticks[tickUpper];\n            bool initializedLower;\n            (tickCumulativeLower, secondsPerLiquidityOutsideLowerX128, secondsOutsideLower, initializedLower) = (\n                lower.tickCumulativeOutside,\n                lower.secondsPerLiquidityOutsideX128,\n                lower.secondsOutside,\n                lower.initialized\n            );\n            require(initializedLower);\n\n            bool initializedUpper;\n            (tickCumulativeUpper, secondsPerLiquidityOutsideUpperX128, secondsOutsideUpper, initializedUpper) = (\n                upper.tickCumulativeOutside,\n                upper.secondsPerLiquidityOutsideX128,\n                upper.secondsOutside,\n                upper.initialized\n            );\n            require(initializedUpper);\n        }\n\n        Slot0 memory _slot0 = slot0;\n\n        if (_slot0.tick < tickLower) {\n            return (\n                tickCumulativeLower - tickCumulativeUpper,\n                secondsPerLiquidityOutsideLowerX128 - secondsPerLiquidityOutsideUpperX128,\n                secondsOutsideLower - secondsOutsideUpper\n            );\n        } else if (_slot0.tick < tickUpper) {\n            uint32 time = _blockTimestamp();\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\n                observations.observeSingle(\n                    time,\n                    0,\n                    _slot0.tick,\n                    _slot0.observationIndex,\n                    liquidity,\n                    _slot0.observationCardinality\n                );\n            return (\n                tickCumulative - tickCumulativeLower - tickCumulativeUpper,\n                secondsPerLiquidityCumulativeX128 -\n                    secondsPerLiquidityOutsideLowerX128 -\n                    secondsPerLiquidityOutsideUpperX128,\n                time - secondsOutsideLower - secondsOutsideUpper\n            );\n        } else {\n            return (\n                tickCumulativeUpper - tickCumulativeLower,\n                secondsPerLiquidityOutsideUpperX128 - secondsPerLiquidityOutsideLowerX128,\n                secondsOutsideUpper - secondsOutsideLower\n            );\n        }\n    }\n\n    /// @inheritdoc IUniswapV3PoolDerivedState\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        override\n        noDelegateCall\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\n    {\n        return\n            observations.observe(\n                _blockTimestamp(),\n                secondsAgos,\n                slot0.tick,\n                slot0.observationIndex,\n                liquidity,\n                slot0.observationCardinality\n            );\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext)\n        external\n        override\n        lock\n        noDelegateCall\n    {\n        uint16 observationCardinalityNextOld = slot0.observationCardinalityNext; // for the event\n        uint16 observationCardinalityNextNew =\n            observations.grow(observationCardinalityNextOld, observationCardinalityNext);\n        slot0.observationCardinalityNext = observationCardinalityNextNew;\n        if (observationCardinalityNextOld != observationCardinalityNextNew)\n            emit IncreaseObservationCardinalityNext(observationCardinalityNextOld, observationCardinalityNextNew);\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    /// @dev not locked because it initializes unlocked\n    function initialize(uint160 sqrtPriceX96) external override {\n        require(slot0.sqrtPriceX96 == 0, 'AI');\n\n        int24 tick = TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n\n        (uint16 cardinality, uint16 cardinalityNext) = observations.initialize(_blockTimestamp());\n\n        slot0 = Slot0({\n            sqrtPriceX96: sqrtPriceX96,\n            tick: tick,\n            observationIndex: 0,\n            observationCardinality: cardinality,\n            observationCardinalityNext: cardinalityNext,\n            feeProtocol: 0,\n            unlocked: true\n        });\n\n        emit Initialize(sqrtPriceX96, tick);\n    }\n\n    struct ModifyPositionParams {\n        // the address that owns the position\n        address owner;\n        // the lower and upper tick of the position\n        int24 tickLower;\n        int24 tickUpper;\n        // any change in liquidity\n        int128 liquidityDelta;\n    }\n\n    /// @dev Effect some changes to a position\n    /// @param params the position details and the change to the position's liquidity to effect\n    /// @return position a storage pointer referencing the position with the given owner and tick range\n    /// @return amount0 the amount of token0 owed to the pool, negative if the pool should pay the recipient\n    /// @return amount1 the amount of token1 owed to the pool, negative if the pool should pay the recipient\n    function _modifyPosition(ModifyPositionParams memory params)\n        private\n        noDelegateCall\n        returns (\n            Position.Info storage position,\n            int256 amount0,\n            int256 amount1\n        )\n    {\n        checkTicks(params.tickLower, params.tickUpper);\n\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\n\n        position = _updatePosition(\n            params.owner,\n            params.tickLower,\n            params.tickUpper,\n            params.liquidityDelta,\n            _slot0.tick\n        );\n\n        if (params.liquidityDelta != 0) {\n            if (_slot0.tick < params.tickLower) {\n                // current tick is below the passed range; liquidity can only become in range by crossing from left to\n                // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it\n                amount0 = SqrtPriceMath.getAmount0Delta(\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\n                    params.liquidityDelta\n                );\n            } else if (_slot0.tick < params.tickUpper) {\n                // current tick is inside the passed range\n                uint128 liquidityBefore = liquidity; // SLOAD for gas optimization\n\n                // write an oracle entry\n                (slot0.observationIndex, slot0.observationCardinality) = observations.write(\n                    _slot0.observationIndex,\n                    _blockTimestamp(),\n                    _slot0.tick,\n                    liquidityBefore,\n                    _slot0.observationCardinality,\n                    _slot0.observationCardinalityNext\n                );\n\n                amount0 = SqrtPriceMath.getAmount0Delta(\n                    _slot0.sqrtPriceX96,\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\n                    params.liquidityDelta\n                );\n                amount1 = SqrtPriceMath.getAmount1Delta(\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\n                    _slot0.sqrtPriceX96,\n                    params.liquidityDelta\n                );\n\n                liquidity = LiquidityMath.addDelta(liquidityBefore, params.liquidityDelta);\n            } else {\n                // current tick is above the passed range; liquidity can only become in range by crossing from right to\n                // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it\n                amount1 = SqrtPriceMath.getAmount1Delta(\n                    TickMath.getSqrtRatioAtTick(params.tickLower),\n                    TickMath.getSqrtRatioAtTick(params.tickUpper),\n                    params.liquidityDelta\n                );\n            }\n        }\n    }\n\n    /// @dev Gets and updates a position with the given liquidity delta\n    /// @param owner the owner of the position\n    /// @param tickLower the lower tick of the position's tick range\n    /// @param tickUpper the upper tick of the position's tick range\n    /// @param tick the current tick, passed to avoid sloads\n    function _updatePosition(\n        address owner,\n        int24 tickLower,\n        int24 tickUpper,\n        int128 liquidityDelta,\n        int24 tick\n    ) private returns (Position.Info storage position) {\n        position = positions.get(owner, tickLower, tickUpper);\n\n        uint256 _feeGrowthGlobal0X128 = feeGrowthGlobal0X128; // SLOAD for gas optimization\n        uint256 _feeGrowthGlobal1X128 = feeGrowthGlobal1X128; // SLOAD for gas optimization\n\n        // if we need to update the ticks, do it\n        bool flippedLower;\n        bool flippedUpper;\n        if (liquidityDelta != 0) {\n            uint32 time = _blockTimestamp();\n            (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) =\n                observations.observeSingle(\n                    time,\n                    0,\n                    slot0.tick,\n                    slot0.observationIndex,\n                    liquidity,\n                    slot0.observationCardinality\n                );\n\n            flippedLower = ticks.update(\n                tickLower,\n                tick,\n                liquidityDelta,\n                _feeGrowthGlobal0X128,\n                _feeGrowthGlobal1X128,\n                secondsPerLiquidityCumulativeX128,\n                tickCumulative,\n                time,\n                false,\n                maxLiquidityPerTick\n            );\n            flippedUpper = ticks.update(\n                tickUpper,\n                tick,\n                liquidityDelta,\n                _feeGrowthGlobal0X128,\n                _feeGrowthGlobal1X128,\n                secondsPerLiquidityCumulativeX128,\n                tickCumulative,\n                time,\n                true,\n                maxLiquidityPerTick\n            );\n\n            if (flippedLower) {\n                tickBitmap.flipTick(tickLower, tickSpacing);\n            }\n            if (flippedUpper) {\n                tickBitmap.flipTick(tickUpper, tickSpacing);\n            }\n        }\n\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) =\n            ticks.getFeeGrowthInside(tickLower, tickUpper, tick, _feeGrowthGlobal0X128, _feeGrowthGlobal1X128);\n\n        position.update(liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128);\n\n        // clear any tick data that is no longer needed\n        if (liquidityDelta < 0) {\n            if (flippedLower) {\n                ticks.clear(tickLower);\n            }\n            if (flippedUpper) {\n                ticks.clear(tickUpper);\n            }\n        }\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\n        require(amount > 0);\n        (, int256 amount0Int, int256 amount1Int) =\n            _modifyPosition(\n                ModifyPositionParams({\n                    owner: recipient,\n                    tickLower: tickLower,\n                    tickUpper: tickUpper,\n                    liquidityDelta: int256(amount).toInt128()\n                })\n            );\n\n        amount0 = uint256(amount0Int);\n        amount1 = uint256(amount1Int);\n\n        uint256 balance0Before;\n        uint256 balance1Before;\n        if (amount0 > 0) balance0Before = balance0();\n        if (amount1 > 0) balance1Before = balance1();\n        IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0, amount1, data);\n        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');\n        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');\n\n        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external override lock returns (uint128 amount0, uint128 amount1) {\n        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\n\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\n\n        if (amount0 > 0) {\n            position.tokensOwed0 -= amount0;\n            TransferHelper.safeTransfer(token0, recipient, amount0);\n        }\n        if (amount1 > 0) {\n            position.tokensOwed1 -= amount1;\n            TransferHelper.safeTransfer(token1, recipient, amount1);\n        }\n\n        emit Collect(msg.sender, recipient, tickLower, tickUpper, amount0, amount1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    /// @dev noDelegateCall is applied indirectly via _modifyPosition\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\n        (Position.Info storage position, int256 amount0Int, int256 amount1Int) =\n            _modifyPosition(\n                ModifyPositionParams({\n                    owner: msg.sender,\n                    tickLower: tickLower,\n                    tickUpper: tickUpper,\n                    liquidityDelta: -int256(amount).toInt128()\n                })\n            );\n\n        amount0 = uint256(-amount0Int);\n        amount1 = uint256(-amount1Int);\n\n        if (amount0 > 0 || amount1 > 0) {\n            (position.tokensOwed0, position.tokensOwed1) = (\n                position.tokensOwed0 + uint128(amount0),\n                position.tokensOwed1 + uint128(amount1)\n            );\n        }\n\n        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\n    }\n\n    struct SwapCache {\n        // the protocol fee for the input token\n        uint8 feeProtocol;\n        // liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the timestamp of the current block\n        uint32 blockTimestamp;\n        // the current value of the tick accumulator, computed only if we cross an initialized tick\n        int56 tickCumulative;\n        // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether we've computed and cached the above two accumulators\n        bool computedLatestObservation;\n    }\n\n    // the top level state of the swap, the results of which are recorded in storage at the end\n    struct SwapState {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the global fee growth of the input token\n        uint256 feeGrowthGlobalX128;\n        // amount of input token paid as protocol fee\n        uint128 protocolFee;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'AS');\n\n        Slot0 memory slot0Start = slot0;\n\n        require(slot0Start.unlocked, 'LOK');\n        require(\n            zeroForOne\n                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\n                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\n            'SPL'\n        );\n\n        slot0.unlocked = false;\n\n        SwapCache memory cache =\n            SwapCache({\n                liquidityStart: liquidity,\n                blockTimestamp: _blockTimestamp(),\n                feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\n                secondsPerLiquidityCumulativeX128: 0,\n                tickCumulative: 0,\n                computedLatestObservation: false\n            });\n\n        bool exactInput = amountSpecified > 0;\n\n        SwapState memory state =\n            SwapState({\n                amountSpecifiedRemaining: amountSpecified,\n                amountCalculated: 0,\n                sqrtPriceX96: slot0Start.sqrtPriceX96,\n                tick: slot0Start.tick,\n                feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\n                protocolFee: 0,\n                liquidity: cache.liquidityStart\n            });\n\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\n                state.tick,\n                tickSpacing,\n                zeroForOne\n            );\n\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            // get the price for the next tick\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\n                    ? sqrtPriceLimitX96\n                    : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                fee\n            );\n\n            if (exactInput) {\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\n            } else {\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\n            }\n\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\n            if (cache.feeProtocol > 0) {\n                uint256 delta = step.feeAmount / cache.feeProtocol;\n                step.feeAmount -= delta;\n                state.protocolFee += uint128(delta);\n            }\n\n            // update global fee tracker\n            if (state.liquidity > 0)\n                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\n\n            // shift tick if we reached the next price\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                // if the tick is initialized, run the tick transition\n                if (step.initialized) {\n                    // check for the placeholder value, which we replace with the actual value the first time the swap\n                    // crosses an initialized tick\n                    if (!cache.computedLatestObservation) {\n                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\n                            cache.blockTimestamp,\n                            0,\n                            slot0Start.tick,\n                            slot0Start.observationIndex,\n                            cache.liquidityStart,\n                            slot0Start.observationCardinality\n                        );\n                        cache.computedLatestObservation = true;\n                    }\n                    int128 liquidityNet =\n                        ticks.cross(\n                            step.tickNext,\n                            (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\n                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\n                            cache.secondsPerLiquidityCumulativeX128,\n                            cache.tickCumulative,\n                            cache.blockTimestamp\n                        );\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\n                    // safe because liquidityNet cannot be type(int128).min\n                    if (zeroForOne) liquidityNet = -liquidityNet;\n\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n                }\n\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        // update tick and write an oracle entry if the tick change\n        if (state.tick != slot0Start.tick) {\n            (uint16 observationIndex, uint16 observationCardinality) =\n                observations.write(\n                    slot0Start.observationIndex,\n                    cache.blockTimestamp,\n                    slot0Start.tick,\n                    cache.liquidityStart,\n                    slot0Start.observationCardinality,\n                    slot0Start.observationCardinalityNext\n                );\n            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\n                state.sqrtPriceX96,\n                state.tick,\n                observationIndex,\n                observationCardinality\n            );\n        } else {\n            // otherwise just update the price\n            slot0.sqrtPriceX96 = state.sqrtPriceX96;\n        }\n\n        // update liquidity if it changed\n        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\n\n        // update fee growth global and, if necessary, protocol fees\n        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\n        if (zeroForOne) {\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\n            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\n        } else {\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\n            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n\n        // do the transfers and collect payment\n        if (zeroForOne) {\n            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\n\n            uint256 balance0Before = balance0();\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\n            require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');\n        } else {\n            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\n\n            uint256 balance1Before = balance1();\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\n            require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');\n        }\n\n        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\n        slot0.unlocked = true;\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external override lock noDelegateCall {\n        uint128 _liquidity = liquidity;\n        require(_liquidity > 0, 'L');\n\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\n        uint256 balance0Before = balance0();\n        uint256 balance1Before = balance1();\n\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\n\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\n\n        uint256 balance0After = balance0();\n        uint256 balance1After = balance1();\n\n        require(balance0Before.add(fee0) <= balance0After, 'F0');\n        require(balance1Before.add(fee1) <= balance1After, 'F1');\n\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\n        uint256 paid0 = balance0After - balance0Before;\n        uint256 paid1 = balance1After - balance1Before;\n\n        if (paid0 > 0) {\n            uint8 feeProtocol0 = slot0.feeProtocol % 16;\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\n        }\n        if (paid1 > 0) {\n            uint8 feeProtocol1 = slot0.feeProtocol >> 4;\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\n        }\n\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolOwnerActions\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external override lock onlyFactoryOwner {\n        require(\n            (feeProtocol0 == 0 || (feeProtocol0 >= 4 && feeProtocol0 <= 10)) &&\n                (feeProtocol1 == 0 || (feeProtocol1 >= 4 && feeProtocol1 <= 10))\n        );\n        uint8 feeProtocolOld = slot0.feeProtocol;\n        slot0.feeProtocol = feeProtocol0 + (feeProtocol1 << 4);\n        emit SetFeeProtocol(feeProtocolOld % 16, feeProtocolOld >> 4, feeProtocol0, feeProtocol1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolOwnerActions\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1) {\n        amount0 = amount0Requested > protocolFees.token0 ? protocolFees.token0 : amount0Requested;\n        amount1 = amount1Requested > protocolFees.token1 ? protocolFees.token1 : amount1Requested;\n\n        if (amount0 > 0) {\n            if (amount0 == protocolFees.token0) amount0--; // ensure that the slot is not cleared, for gas savings\n            protocolFees.token0 -= amount0;\n            TransferHelper.safeTransfer(token0, recipient, amount0);\n        }\n        if (amount1 > 0) {\n            if (amount1 == protocolFees.token1) amount1--; // ensure that the slot is not cleared, for gas savings\n            protocolFees.token1 -= amount1;\n            TransferHelper.safeTransfer(token1, recipient, amount1);\n        }\n\n        emit CollectProtocol(msg.sender, recipient, amount0, amount1);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/NoDelegateCall.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\n/// @title Prevents delegatecall to a contract\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\nabstract contract NoDelegateCall {\n    /// @dev The original address of this contract\n    address private immutable original;\n\n    constructor() {\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\n        // In other words, this variable won't change when it's checked at runtime.\n        original = address(this);\n    }\n\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\n    function checkNotDelegateCall() private view {\n        require(address(this) == original);\n    }\n\n    /// @notice Prevents delegatecall into the modified method\n    modifier noDelegateCall() {\n        checkNotDelegateCall();\n        _;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\nimport './BitMath.sol';\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        wordPos = int16(tick >> 8);\n        bitPos = uint8(tick % 256);\n    }\n\n    /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n    /// @param self The mapping in which to flip the tick\n    /// @param tick The tick to flip\n    /// @param tickSpacing The spacing between usable ticks\n    function flipTick(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing\n    ) internal {\n        require(tick % tickSpacing == 0); // ensure that the tick is spaced\n        (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n        uint256 mask = 1 << bitPos;\n        self[wordPos] ^= mask;\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        mapping(int16 => uint256) storage self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        int24 compressed = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n        if (lte) {\n            (int16 wordPos, uint8 bitPos) = position(compressed);\n            // all the 1s at or to the right of the current bitPos\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed - int24(bitPos - BitMath.mostSignificantBit(masked))) * tickSpacing\n                : (compressed - int24(bitPos)) * tickSpacing;\n        } else {\n            // start from the word of the next tick, since the current tick state doesn't matter\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n            // all the 1s at or to the left of the bitPos\n            uint256 mask = ~((1 << bitPos) - 1);\n            uint256 masked = self[wordPos] & mask;\n\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed + 1 + int24(BitMath.leastSignificantBit(masked) - bitPos)) * tickSpacing\n                : (compressed + 1 + int24(type(uint8).max - bitPos)) * tickSpacing;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/Oracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.5.0;\n\n/// @title Oracle\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\n/// @dev Instances of stored oracle data, \"observations\", are collected in the oracle array\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\n/// Observations are overwritten when the full length of the oracle array is populated.\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\nlibrary Oracle {\n    struct Observation {\n        // the block timestamp of the observation\n        uint32 blockTimestamp;\n        // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\n        int56 tickCumulative;\n        // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether or not the observation is initialized\n        bool initialized;\n    }\n\n    /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\n    /// @param last The specified observation to be transformed\n    /// @param blockTimestamp The timestamp of the new observation\n    /// @param tick The active tick at the time of the new observation\n    /// @param liquidity The total in-range liquidity at the time of the new observation\n    /// @return Observation The newly populated observation\n    function transform(\n        Observation memory last,\n        uint32 blockTimestamp,\n        int24 tick,\n        uint128 liquidity\n    ) private pure returns (Observation memory) {\n        uint32 delta = blockTimestamp - last.blockTimestamp;\n        return\n            Observation({\n                blockTimestamp: blockTimestamp,\n                tickCumulative: last.tickCumulative + int56(tick) * delta,\n                secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\n                    ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\n                initialized: true\n            });\n    }\n\n    /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\n    /// @param self The stored oracle array\n    /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\n    /// @return cardinality The number of populated elements in the oracle array\n    /// @return cardinalityNext The new length of the oracle array, independent of population\n    function initialize(Observation[65535] storage self, uint32 time)\n        internal\n        returns (uint16 cardinality, uint16 cardinalityNext)\n    {\n        self[0] = Observation({\n            blockTimestamp: time,\n            tickCumulative: 0,\n            secondsPerLiquidityCumulativeX128: 0,\n            initialized: true\n        });\n        return (1, 1);\n    }\n\n    /// @notice Writes an oracle observation to the array\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\n    /// @param self The stored oracle array\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param blockTimestamp The timestamp of the new observation\n    /// @param tick The active tick at the time of the new observation\n    /// @param liquidity The total in-range liquidity at the time of the new observation\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @param cardinalityNext The new length of the oracle array, independent of population\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\n    /// @return cardinalityUpdated The new cardinality of the oracle array\n    function write(\n        Observation[65535] storage self,\n        uint16 index,\n        uint32 blockTimestamp,\n        int24 tick,\n        uint128 liquidity,\n        uint16 cardinality,\n        uint16 cardinalityNext\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\n        Observation memory last = self[index];\n\n        // early return if we've already written an observation this block\n        if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\n\n        // if the conditions are right, we can bump the cardinality\n        if (cardinalityNext > cardinality && index == (cardinality - 1)) {\n            cardinalityUpdated = cardinalityNext;\n        } else {\n            cardinalityUpdated = cardinality;\n        }\n\n        indexUpdated = (index + 1) % cardinalityUpdated;\n        self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\n    }\n\n    /// @notice Prepares the oracle array to store up to `next` observations\n    /// @param self The stored oracle array\n    /// @param current The current next cardinality of the oracle array\n    /// @param next The proposed next cardinality which will be populated in the oracle array\n    /// @return next The next cardinality which will be populated in the oracle array\n    function grow(\n        Observation[65535] storage self,\n        uint16 current,\n        uint16 next\n    ) internal returns (uint16) {\n        require(current > 0, 'I');\n        // no-op if the passed next value isn't greater than the current next value\n        if (next <= current) return current;\n        // store in each slot to prevent fresh SSTOREs in swaps\n        // this data will not be used because the initialized boolean is still false\n        for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\n        return next;\n    }\n\n    /// @notice comparator for 32-bit timestamps\n    /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\n    /// @param time A timestamp truncated to 32 bits\n    /// @param a A comparison timestamp from which to determine the relative position of `time`\n    /// @param b From which to determine the relative position of `time`\n    /// @return bool Whether `a` is chronologically <= `b`\n    function lte(\n        uint32 time,\n        uint32 a,\n        uint32 b\n    ) private pure returns (bool) {\n        // if there hasn't been overflow, no need to adjust\n        if (a <= time && b <= time) return a <= b;\n\n        uint256 aAdjusted = a > time ? a : a + 2**32;\n        uint256 bAdjusted = b > time ? b : b + 2**32;\n\n        return aAdjusted <= bAdjusted;\n    }\n\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\n    /// The result may be the same observation, or adjacent observations.\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param target The timestamp at which the reserved observation should be for\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return beforeOrAt The observation recorded before, or at, the target\n    /// @return atOrAfter The observation recorded at, or after, the target\n    function binarySearch(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 target,\n        uint16 index,\n        uint16 cardinality\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n        uint256 l = (index + 1) % cardinality; // oldest observation\n        uint256 r = l + cardinality - 1; // newest observation\n        uint256 i;\n        while (true) {\n            i = (l + r) / 2;\n\n            beforeOrAt = self[i % cardinality];\n\n            // we've landed on an uninitialized tick, keep searching higher (more recently)\n            if (!beforeOrAt.initialized) {\n                l = i + 1;\n                continue;\n            }\n\n            atOrAfter = self[(i + 1) % cardinality];\n\n            bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\n\n            // check if we've found the answer!\n            if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\n\n            if (!targetAtOrAfter) r = i - 1;\n            else l = i + 1;\n        }\n    }\n\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\n    /// @dev Assumes there is at least 1 initialized observation.\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param target The timestamp at which the reserved observation should be for\n    /// @param tick The active tick at the time of the returned or simulated observation\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The total pool liquidity at the time of the call\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\n    function getSurroundingObservations(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 target,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n        // optimistically set before to the newest observation\n        beforeOrAt = self[index];\n\n        // if the target is chronologically at or after the newest observation, we can early return\n        if (lte(time, beforeOrAt.blockTimestamp, target)) {\n            if (beforeOrAt.blockTimestamp == target) {\n                // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\n                return (beforeOrAt, atOrAfter);\n            } else {\n                // otherwise, we need to transform\n                return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\n            }\n        }\n\n        // now, set before to the oldest observation\n        beforeOrAt = self[(index + 1) % cardinality];\n        if (!beforeOrAt.initialized) beforeOrAt = self[0];\n\n        // ensure that the target is chronologically at or after the oldest observation\n        require(lte(time, beforeOrAt.blockTimestamp, target), 'OLD');\n\n        // if we've reached this point, we have to binary search\n        return binarySearch(self, time, target, index, cardinality);\n    }\n\n    /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\n    /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\n    /// at exactly the timestamp between the two observations.\n    /// @param self The stored oracle array\n    /// @param time The current block timestamp\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\n    /// @param tick The current tick\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The current in-range pool liquidity\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\n    /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\n    function observeSingle(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32 secondsAgo,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\n        if (secondsAgo == 0) {\n            Observation memory last = self[index];\n            if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\n            return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\n        }\n\n        uint32 target = time - secondsAgo;\n\n        (Observation memory beforeOrAt, Observation memory atOrAfter) =\n            getSurroundingObservations(self, time, target, tick, index, liquidity, cardinality);\n\n        if (target == beforeOrAt.blockTimestamp) {\n            // we're at the left boundary\n            return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\n        } else if (target == atOrAfter.blockTimestamp) {\n            // we're at the right boundary\n            return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\n        } else {\n            // we're in the middle\n            uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\n            uint32 targetDelta = target - beforeOrAt.blockTimestamp;\n            return (\n                beforeOrAt.tickCumulative +\n                    ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / observationTimeDelta) *\n                    targetDelta,\n                beforeOrAt.secondsPerLiquidityCumulativeX128 +\n                    uint160(\n                        (uint256(\n                            atOrAfter.secondsPerLiquidityCumulativeX128 - beforeOrAt.secondsPerLiquidityCumulativeX128\n                        ) * targetDelta) / observationTimeDelta\n                    )\n            );\n        }\n    }\n\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\n    /// @dev Reverts if `secondsAgos` > oldest observation\n    /// @param self The stored oracle array\n    /// @param time The current block.timestamp\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\n    /// @param tick The current tick\n    /// @param index The index of the observation that was most recently written to the observations array\n    /// @param liquidity The current in-range pool liquidity\n    /// @param cardinality The number of populated elements in the oracle array\n    /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\n    /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\n    function observe(\n        Observation[65535] storage self,\n        uint32 time,\n        uint32[] memory secondsAgos,\n        int24 tick,\n        uint16 index,\n        uint128 liquidity,\n        uint16 cardinality\n    ) internal view returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) {\n        require(cardinality > 0, 'I');\n\n        tickCumulatives = new int56[](secondsAgos.length);\n        secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\n        for (uint256 i = 0; i < secondsAgos.length; i++) {\n            (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\n                self,\n                time,\n                secondsAgos[i],\n                tick,\n                index,\n                liquidity,\n                cardinality\n            );\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '../interfaces/IERC20Minimal.sol';\n\n/// @title TransferHelper\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\nlibrary TransferHelper {\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\ninterface IUniswapV3PoolDeployer {\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\n    /// Returns factory The factory address\n    /// Returns token0 The first token of the pool by address sort order\n    /// Returns token1 The second token of the pool by address sort order\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\n    function parameters()\n        external\n        view\n        returns (\n            address factory,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickSpacing\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3FlashCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#flash\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\ninterface IUniswapV3FlashCallback {\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\n    function uniswapV3FlashCallback(\n        uint256 fee0,\n        uint256 fee1,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@uniswap/v3-core/contracts/UniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@uniswap/v3-core/contracts/UniswapV3Pool.sol';\n"
    },
    "@uniswap/v3-core/contracts/UniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\nimport './interfaces/IUniswapV3Factory.sol';\n\nimport './UniswapV3PoolDeployer.sol';\nimport './NoDelegateCall.sol';\n\nimport './UniswapV3Pool.sol';\n\n/// @title Canonical Uniswap V3 factory\n/// @notice Deploys Uniswap V3 pools and manages ownership and control over pool protocol fees\ncontract UniswapV3Factory is IUniswapV3Factory, UniswapV3PoolDeployer, NoDelegateCall {\n    /// @inheritdoc IUniswapV3Factory\n    address public override owner;\n\n    /// @inheritdoc IUniswapV3Factory\n    mapping(uint24 => int24) public override feeAmountTickSpacing;\n    /// @inheritdoc IUniswapV3Factory\n    mapping(address => mapping(address => mapping(uint24 => address))) public override getPool;\n\n    constructor() {\n        owner = msg.sender;\n        emit OwnerChanged(address(0), msg.sender);\n\n        feeAmountTickSpacing[500] = 10;\n        emit FeeAmountEnabled(500, 10);\n        feeAmountTickSpacing[3000] = 60;\n        emit FeeAmountEnabled(3000, 60);\n        feeAmountTickSpacing[10000] = 200;\n        emit FeeAmountEnabled(10000, 200);\n    }\n\n    /// @inheritdoc IUniswapV3Factory\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external override noDelegateCall returns (address pool) {\n        require(tokenA != tokenB);\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0));\n        int24 tickSpacing = feeAmountTickSpacing[fee];\n        require(tickSpacing != 0);\n        require(getPool[token0][token1][fee] == address(0));\n        pool = deploy(address(this), token0, token1, fee, tickSpacing);\n        getPool[token0][token1][fee] = pool;\n        // populate mapping in the reverse direction, deliberate choice to avoid the cost of comparing addresses\n        getPool[token1][token0][fee] = pool;\n        emit PoolCreated(token0, token1, fee, tickSpacing, pool);\n    }\n\n    /// @inheritdoc IUniswapV3Factory\n    function setOwner(address _owner) external override {\n        require(msg.sender == owner);\n        emit OwnerChanged(owner, _owner);\n        owner = _owner;\n    }\n\n    /// @inheritdoc IUniswapV3Factory\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) public override {\n        require(msg.sender == owner);\n        require(fee < 1000000);\n        // tick spacing is capped at 16384 to prevent the situation where tickSpacing is so large that\n        // TickBitmap#nextInitializedTickWithinOneWord overflows int24 container from a valid tick\n        // 16384 ticks represents a >5x price change with ticks of 1 bips\n        require(tickSpacing > 0 && tickSpacing < 16384);\n        require(feeAmountTickSpacing[fee] == 0);\n\n        feeAmountTickSpacing[fee] = tickSpacing;\n        emit FeeAmountEnabled(fee, tickSpacing);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/UniswapV3PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.7.6;\n\nimport './interfaces/IUniswapV3PoolDeployer.sol';\n\nimport './UniswapV3Pool.sol';\n\ncontract UniswapV3PoolDeployer is IUniswapV3PoolDeployer {\n    struct Parameters {\n        address factory;\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickSpacing;\n    }\n\n    /// @inheritdoc IUniswapV3PoolDeployer\n    Parameters public override parameters;\n\n    /// @dev Deploys a pool with the given parameters by transiently setting the parameters storage slot and then\n    /// clearing it after deploying the pool.\n    /// @param factory The contract address of the Uniswap V3 factory\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The spacing between usable ticks\n    function deploy(\n        address factory,\n        address token0,\n        address token1,\n        uint24 fee,\n        int24 tickSpacing\n    ) internal returns (address pool) {\n        parameters = Parameters({factory: factory, token0: token0, token1: token1, fee: fee, tickSpacing: tickSpacing});\n        pool = address(new UniswapV3Pool{salt: keccak256(abi.encode(token0, token1, fee))}());\n        delete parameters;\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@uniswap/v3-core/contracts/UniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@uniswap/v3-core/contracts/UniswapV3Factory.sol';\n"
    },
    "contracts/hardhat-dependency-compiler/@perp/perp-oracle-contract/contracts/EmergencyPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@perp/perp-oracle-contract/contracts/EmergencyPriceFeed.sol';\n"
    },
    "contracts/test/TestSettlementTokenMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { SettlementTokenMath } from \"../lib/SettlementTokenMath.sol\";\r\n\r\ncontract TestSettlementTokenMath {\r\n    using SettlementTokenMath for uint256;\r\n    using SettlementTokenMath for int256;\r\n\r\n    function testLte(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.lte(amountX10_18, decimals);\r\n    }\r\n\r\n    function testLte(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.lte(amountX10_18, decimals);\r\n    }\r\n\r\n    function testLt(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.lt(amountX10_18, decimals);\r\n    }\r\n\r\n    function testLt(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.lt(amountX10_18, decimals);\r\n    }\r\n\r\n    function testGte(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.gte(amountX10_18, decimals);\r\n    }\r\n\r\n    function testGte(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.gte(amountX10_18, decimals);\r\n    }\r\n\r\n    function testGt(\r\n        uint256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        uint256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.gt(amountX10_18, decimals);\r\n    }\r\n\r\n    function testGt(\r\n        int256 settlementToken,\r\n        // solhint-disable-next-line var-name-mixedcase\r\n        int256 amountX10_18,\r\n        uint8 decimals\r\n    ) external pure returns (bool) {\r\n        return settlementToken.gt(amountX10_18, decimals);\r\n    }\r\n\r\n    function testParseSettlementToken(uint256 amount, uint8 decimals) external pure returns (uint256) {\r\n        return amount.parseSettlementToken(decimals);\r\n    }\r\n\r\n    function testParseSettlementToken(int256 amount, uint8 decimals) external pure returns (int256) {\r\n        return amount.parseSettlementToken(decimals);\r\n    }\r\n\r\n    function testFormatSettlementToken(uint256 amount, uint8 decimals) external pure returns (uint256) {\r\n        return amount.formatSettlementToken(decimals);\r\n    }\r\n\r\n    function testFormatSettlementToken(int256 amount, uint8 decimals) external pure returns (int256) {\r\n        return amount.formatSettlementToken(decimals);\r\n    }\r\n\r\n    function testConvertTokenDecimals(\r\n        uint256 amount,\r\n        uint8 fromDecimals,\r\n        uint8 toDecimals\r\n    ) external pure returns (uint256) {\r\n        return amount.convertTokenDecimals(fromDecimals, toDecimals);\r\n    }\r\n\r\n    function testConvertTokenDecimals(\r\n        int256 amount,\r\n        uint8 fromDecimals,\r\n        uint8 toDecimals\r\n    ) external pure returns (int256) {\r\n        return amount.convertTokenDecimals(fromDecimals, toDecimals);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestPerpSafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { PerpSafeCast } from \"../lib/PerpSafeCast.sol\";\r\n\r\ncontract TestPerpSafeCast {\r\n    using PerpSafeCast for uint256;\r\n    using PerpSafeCast for int256;\r\n\r\n    // uint test\r\n\r\n    // int256 to uin256\r\n    function testToUint256(int256 value) external pure returns (uint256) {\r\n        return value.toUint256();\r\n    }\r\n\r\n    function testToUint128(uint256 value) external pure returns (uint128) {\r\n        return value.toUint128();\r\n    }\r\n\r\n    function testToUint64(uint256 value) external pure returns (uint64) {\r\n        return value.toUint64();\r\n    }\r\n\r\n    function testToUint32(uint256 value) external pure returns (uint32) {\r\n        return value.toUint32();\r\n    }\r\n\r\n    // int24 to uint24\r\n    function testToUint24(int256 value) external pure returns (uint24) {\r\n        return value.toUint24();\r\n    }\r\n\r\n    function testToUint16(uint256 value) external pure returns (uint16) {\r\n        return value.toUint16();\r\n    }\r\n\r\n    function testToUint8(uint256 value) external pure returns (uint8) {\r\n        return value.toUint8();\r\n    }\r\n\r\n    // int test\r\n\r\n    // uint256 to int256\r\n    function testToInt256(uint256 value) external pure returns (int256) {\r\n        return value.toInt256();\r\n    }\r\n\r\n    function testToInt128(int256 value) external pure returns (int128) {\r\n        return value.toInt128();\r\n    }\r\n\r\n    function testToInt64(int256 value) external pure returns (int64) {\r\n        return value.toInt64();\r\n    }\r\n\r\n    function testToInt32(int256 value) external pure returns (int32) {\r\n        return value.toInt32();\r\n    }\r\n\r\n    function testToInt24(int256 value) external pure returns (int24) {\r\n        return value.toInt24();\r\n    }\r\n\r\n    function testToInt16(int256 value) external pure returns (int16) {\r\n        return value.toInt16();\r\n    }\r\n\r\n    function testToInt8(int256 value) external pure returns (int8) {\r\n        return value.toInt8();\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestMetaTxRecipient.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport { BaseRelayRecipient } from \"../gsn/BaseRelayRecipient.sol\";\r\n\r\ncontract TestMetaTxRecipient is BaseRelayRecipient, Initializable {\r\n    address public pokedBy;\r\n\r\n    function __TestMetaTxRecipient_init(address trustedForwarderArg) external initializer {\r\n        _setTrustedForwarder(trustedForwarderArg);\r\n    }\r\n\r\n    function poke() external {\r\n        pokedBy = _msgSender();\r\n    }\r\n\r\n    // solhint-disable\r\n    function error() external pure {\r\n        revert(\"MetaTxRecipientMock: Error\");\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestSafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\nimport \"../base/SafeOwnable.sol\";\r\n\r\ncontract TestSafeOwnable is SafeOwnable {\r\n    function initialize() external initializer {\r\n        __SafeOwnable_init();\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestLimitOrderBook.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport { IClearingHouse } from \"../interface/IClearingHouse.sol\";\r\n\r\ncontract TestLimitOrderBook {\r\n    address internal _clearingHouse;\r\n\r\n    constructor(address clearingHouseArg) {\r\n        _clearingHouse = clearingHouseArg;\r\n    }\r\n\r\n    function openPositionFor(address trader, IClearingHouse.OpenPositionParams memory params) external {\r\n        // NOTE: here we only care about whether a contract can call `ClearingHouse.openPositionFor()` for a trader\r\n        // for the actual `fillLimitOrder()` logic, see `perp-curie-limit-order-contract` repo\r\n        IClearingHouse(_clearingHouse).openPositionFor(\r\n            trader,\r\n            IClearingHouse.OpenPositionParams({\r\n                baseToken: params.baseToken,\r\n                isBaseToQuote: params.isBaseToQuote,\r\n                isExactInput: params.isExactInput,\r\n                amount: params.amount,\r\n                oppositeAmountBound: params.oppositeAmountBound,\r\n                deadline: params.deadline,\r\n                sqrtPriceLimitX96: params.sqrtPriceLimitX96,\r\n                referralCode: params.referralCode\r\n            })\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"../Vault.sol\";\r\n\r\ncontract TestVault is Vault {\r\n    function testGetMaxRepaidSettlement(address trader) external view returns (uint256) {\r\n        return _getMaxRepaidSettlement(trader);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}